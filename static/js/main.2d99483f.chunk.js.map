{"version":3,"sources":["CQL-Driver/src/utils/conversions.ts","CQL-Driver/src/utils/FrameTemplate.ts","CQL-Driver/src/utils/setVersion.ts","CQL-Driver/src/utils/setLength.ts","CQL-Driver/src/utils/getMessageCode.ts","CQL-Driver/src/utils/setOpcode.ts","CQL-Driver/src/cql-types/types.ts","CQL-Driver/src/cql-types/typeFactory.ts","CQL-Driver/src/utils/addQueryBody.ts","CQL-Driver/src/utils/getQueryMessage.ts","CQL-Driver/src/utils/addExecuteBody.ts","CQL-Driver/src/utils/getExecuteMessage.ts","CQL-Driver/src/functions/Consistency.ts","CQL-Driver/src/Driver.ts","CQL-Driver/src/utils/addStartupBody.ts","CQL-Driver/src/utils/getStartupMessage.ts","CQL-Driver/src/functions/Handshake.ts","CQL-Driver/src/utils/getLength.ts","CQL-Driver/src/utils/getOpcode.ts","CQL-Driver/src/utils/getQueryResult.ts","CQL-Driver/src/utils/addPrepareBody.ts","CQL-Driver/src/utils/getPrepareMessage.ts","assets/logo.webp","components/TerminalHistory.tsx","consts.js","components/LaunchForm.tsx","components/Input.tsx","components/TableDisplayer.tsx","components/ServerResponse.tsx","components/Terminal.tsx","App.tsx","index.tsx"],"names":["format","require","numberToInt","value","int","bigIntToBuffer","numberToShort","short","numberToByte","byte","bufferToShort","buf","slice","bufferToInt","bufferToOption","id","stringLen","idVal","size","bufferToString","fst","snd","keyspace","udt","n","udtList","Array","from","length","i","name","option","optionList","len","Number","console","log","BigInt","string","bufferToBytes","readInt32BE","bytes","bufferToShortBytes","shortBytes","bufferToStringList","parsed","result","newItem","push","stringList","stringToValue","textValue","Buffer","typeVal","type","getTypeFrom","toCQL","concat","tokensToValues","types","values","results","alloc","tempSize","mul","Frame","setVersion","version","setLength","copy","getMessageCode","messageType","setOpcode","ASCII","data","validationError","asciiText","entries","pair","this","String","fromCharCode","BIGINT","readBigInt64BE","toString","BLOB","BOOLEAN","COUNTER","DECIMAL","scale","unscaled","DOUBLE","readDoubleBE","writeDoubleBE","FLOAT","readFloatBE","writeFloatBE","INET","address","join","INT","writeInt32BE","LIST","list","MAP","container","firstVal","secondVal","dataPart","resultString","key","replace","SET","SMALLINT","readInt16BE","writeInt16BE","TIME","Math","pow","DATE","Date","readUInt32BE","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","TIMESTAMP","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getTimezoneOffset","TINYINT","readInt8","writeInt8","TUPLE","tuple","tupleValue","UUID","stringify","parse","VARCHAR","addQueryBody","buffer","queryBody","consistency","flag","extraData","body","PageSizeFlagValue","NextPageFlagValue","getQueryMessage","driver","setLastQuery","pagingState","getConsistency","getPaging","pageSize","pagingEnabled","flagValue","addExecuteBody","executeBody","ValuesFlag","getExecuteMessage","queryId","bindValues","bindTypes","consistencyCode","CQLDriver","handshake","handshakeMessage","bind","set","getResponse","getQueryResult","connect","websocket","setResponse","setTableResponse","current","addEventListener","event","coder","TextEncoder","send","encode","arrayBuffer","then","response","query","clearPagingStates","prepare","getPrepareMessage","execute","get","undefined","getNextPageQuery","wantedIndex","getNumberOfLoadedPages","hasPreviousPage","getPageNumber","hasNextPage","getPreviousPageQuery","index","isFirstPage","getExpectedIndex","getExpectingNewQuery","setPageNumber","page","setConsistency","s","received","compare","getLastQuery","getKeyspace","getConsistencyName","addPagingState","nextPagingState","setPaging","mode","toUpperCase","Map","addStartupBody","getStartupMessage","getLength","getOpcodeName","num","getOpcode","setKeyspace","addPreparedStatement","code","globalTableSpecPresent","hasMorePages","metaDataFlags","keySpaceName","tableName","columnCount","columnVars","columnName","columnType","rowCount","rows","row","j","content","receivedType","getRowsResult","keyspaceName","getSetKeyspaceResult","idBuffer","pkCount","columnValues","getPreparedResult","changeType","target","object","fun","args","getSchemaChangeResult","addPrepareBody","prepareBody","useStyles","makeStyles","theme","lineContainer","display","flexDirection","alignItems","justifyContent","inputContainer","width","color","outlineWidth","border","fontSize","terminalSign","TerminalHistory","history","classes","map","e","className","DEFUALT_ADDRESS","blurredBackground","position","height","backgroundSize","backgroundColor","opacity","margin","marginTop","padding","borderRadius","element","marginBottom","LaunchForm","adress","setAddress","port","setPort","login","setLogin","password","setPassword","setFormPassed","onSubmit","preventDefault","defaultValue","onChange","trim","placeholder","Input","forwardRef","ref","changeValue","cellTable","cellTh","cellTd","textAlign","tableLabel","tableButton","textTransform","textDecoration","background","fontWeight","transition","borderColor","boxShadow","tableRoller","overflowX","TableDisplayer","headers","sendMsg","useState","setPageCount","header","ele","rowId","React","back","setDisableOnBack","next","setDisableOnNext","setDisable","cellSpacing","colSpan","disabled","onClick","previousPageQuery","nextPageQuery","errorStruct","ServerResponse","tableResponse","useEffect","WebSocket","errorResponse","toLocaleLowerCase","includes","terminalContainer","line","Terminal","command","setCommand","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","serverResponse","setServerResponse","editMode","setEditMode","textAreaRef","useRef","webSocket","isFormPassed","clearInput","selectionStart","selectionEnd","setSelectionRange","focus","msg","receivedHistory","window","localStorage","getItem","receivedConsistency","sessionStorage","parsedReceivedHistory","JSON","setItem","listener","tokenizedCommand","split","toLowerCase","prevState","sendConnect","newPagingValue","newPagingMode","parseInt","prepareArg","executeArgs","executeQuery","document","removeEventListener","logo","default","src","style","right","bottom","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2d99483f.chunk.js","sourcesContent":["import { Buffer } from 'buffer';\nimport {Byte, Int, Long, Short, String, StringList, Option, Bytes, ShortBytes} from \"./types\";\nconst format = require(\"biguint-format\");\nimport {parse} from 'uuid'\nimport { getTypeFrom } from '../cql-types/typeFactory';\n\nexport const numberToLong = (value: bigint) : Long => {\n    return {long: bigIntToBuffer(value, 8)}\n}\n\nexport const numberToInt = (value : bigint) : Int => {\n    return {int: bigIntToBuffer(value, 4)}\n}\n\nexport const numberToShort = (value : bigint) : Short => {\n    return {short: bigIntToBuffer(value, 2)}\n}\n\nexport const numberToByte = (value : bigint) : Byte => {\n    return {byte: bigIntToBuffer(value, 1)}\n}\n\nexport const bufferToShort = (buf : Buffer) : Short => {\n    return {short : buf.slice(0, 2)}\n}\n\nexport const bufferToInt = (buf : Buffer) : Int => {\n    return {int : buf.slice(0, 4)}\n}\n\nexport const bufferToOption = (buf : Buffer) : Option  =>  {\n    const id = bufferToShort(buf);\n    let stringLen = 2\n    const idVal = format(id.short)\n    let size = 0\n    let value = null\n\n    if (idVal == 0) {\n        value = bufferToString(buf.slice(stringLen))\n    } else if (idVal == 32 || idVal == 34) {\n        value = bufferToOption(buf.slice(stringLen))\n        size += value.size + 2\n    } else if (idVal == 33) {\n        const fst = bufferToOption(buf.slice(stringLen))\n        stringLen += fst.size\n        const snd = (bufferToOption(buf.slice(stringLen)))\n        size += fst.size + snd.size + 4\n        value = [fst, snd]\n\n    } else if (idVal == 48) {\n        const keyspace = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const udt = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n\n        stringLen += 2\n\n        let udtList : any[] = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            udtList[i].name =  bufferToString(buf.slice(stringLen));\n            stringLen += format(udtList[i].name.length)\n            udtList[i].option = bufferToOption(buf.slice(stringLen))\n            stringLen += udtList[i].option.size\n        }\n\n        value = [keyspace, udt, udtList]\n\n    } else if (idVal == 49) {\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n    \n        stringLen += 2\n        size += 2\n\n        let optionList : any[] = Array.from({length: n})\n       \n        for (let i = 0; i < n; ++i ) {\n            optionList[i] = bufferToOption(buf.slice(stringLen))\n            stringLen += optionList[i].size + 2\n            size += optionList[i].size + 2\n        }\n        value = optionList\n    }\n    \n    return {id: id, value : value, size: size}\n}\n\nexport const bufferToString = (buf : Buffer) : String => {\n    const len = Number(format(buf.slice(0, 2)))\n    console.log(len)\n    console.log(buf.slice(2, len + 2))\n    return {length: numberToShort(BigInt(len)), string: buf.slice(2, len + 2)}\n}\n\nexport const bufferToBytes = (buf : Buffer) : Bytes | null => {\n    const len = buf.readInt32BE(0)\n    if (len < 0) {\n        return null;\n    }\n    return {length: numberToInt(BigInt(len)), bytes: buf.slice(4, len + 4)}\n}\n\nexport const bufferToShortBytes = (buf : Buffer) : ShortBytes => {\n    let len = Number(format(buf.slice(0, 2)))\n    if (len < 0) {\n        len = 0\n    }\n    return {length: numberToShort(BigInt(len)), shortBytes: buf.slice(2, len + 2)}\n}\n\nexport const optionToReadableString = (id : Short, byt: Bytes) : string => {\n    console.log(id)\n    const idVal = format(id.short)\n\n    let result = \"\";\n    let buf = byt.bytes\n\n    // Ascii\n    if (idVal == 1) {\n        for (let i = 0; i < format(buf.length); ++i) {\n            if (buf[i] > 127) {\n                // Some error handling\n            } else {\n                result += buf[i].toString()\n            }\n        }\n        return result;\n    }\n    // Bigint\n    else if (idVal == 2) {\n        return buf.readBigInt64BE(0).toString();\n    }\n    // Blob\n    else if (idVal == 3) {\n        return buf.toString()\n    }\n    // Boolean\n    else if (idVal == 4) {\n        if (buf[0] == 0) {\n            return \"False\"\n        } else {\n            return \"True\"\n        }\n    }\n    // Date\n    else if (idVal == 5) {\n\n    }\n    // Decimal\n    else if (idVal == 6) {\n        return buf.readFloatLE(0).toString();\n    }\n    // Double\n    else if (idVal == 7) {\n        return buf.readDoubleBE(0).toString();\n    }\n    // Float\n    else if (idVal == 8) {\n\n    }\n    // Int\n    else if (idVal == 12) {\n        return buf.toString()\n    }\n    return \"\"\n}\n\nexport const bufferToStringList = (buf : Buffer) : StringList => {\n    const len = format(buf.slice(0, 2))\n    let parsed = 2\n    let result : String[] = []\n    for (let i = 0; i < len; ++i) {\n        const newItem = bufferToString(buf.slice(parsed))\n        parsed += format(newItem.length) + 2\n        result.push(newItem)\n    }\n    return  {length: numberToShort(len), stringList: result}\n}\n\nconst stringToValue = (option : Option, textValue : string) : Buffer => {\n    if (textValue == \"null\") {\n        return Buffer.from([-1])\n    }\n\n    const type = getTypeFrom(option, textValue)\n\n    // TODO : handle null\n\n    let typeVal : Buffer\n    if (type == null) {\n        typeVal = Buffer.from(\"null\")\n    }\n    else {\n        typeVal = type.toCQL()\n        console.log(typeVal)\n    }\n\n    //const val : ArrayLike<number> = parse(textValue)\n    const result = Buffer.concat([numberToInt(BigInt(typeVal.length)).int, typeVal])\n    return result\n}\n\nexport const tokensToValues = (types : Array<Option>, values : Array<string>) : Buffer => {\n    let results = numberToShort(BigInt(values.length)).short\n\n    for (let i = 0; i < values.length; ++i) {\n        results = Buffer.concat([results, stringToValue(types[i], values[i])])\n    }\n\n    return results\n}\n\nexport const bigIntToBuffer = (value : bigint, size? : number) : Buffer => {\n    if (!size) {\n        console.log(value)\n        let tempSize = 1, mul = 256n\n        while (value >= mul) {\n            mul *= 256n\n            tempSize += 1\n        }\n        size = tempSize\n        console.log(size)\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        console.log(buf, buf.length)\n        return buf;\n    } else {\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        return buf;\n    }\n}\n","import {Buffer} from 'buffer';\n\nconst Frame= () : Buffer => {\n    return Buffer.alloc(9);\n}\nexport default Frame;","import { Buffer } from 'buffer';\n\nconst setVersion = (buf : Buffer, version: number) : Buffer => {\n    // Version is at position 0 in the frame\n    buf[0] = version;\n    return buf;\n}\nexport default setVersion;","import { Buffer } from 'buffer';\nimport {numberToInt} from \"./conversions\";\n\nconst setLength = (buf : Buffer, length: bigint) : Buffer => {\n    const bodySize = numberToInt(length);\n    bodySize.int.copy(buf, 5, 0, 4);\n    return buf;\n}\nexport default setLength;","const getMessageCode = (messageType: String) : number => {\n    switch (messageType) {\n        case \"ERROR\": {\n            return 0;\n        }\n        case \"STARTUP\": {\n            return 1;\n        }\n        case \"READY\": {\n            return 2;\n        }\n        case \"AUTHENTICATE\": {\n            return 3;\n        }\n        case \"OPTIONS\": {\n            return 5;\n        }\n        case \"SUPPORTED\": {\n            return 6;\n        }\n        case \"QUERY\": {\n            return 7;\n        }\n        case \"RESULT\": {\n            return 8;\n        }\n        case \"PREPARE\": {\n            return 9;\n        }\n        case \"EXECUTE\": {\n            return 10;\n        }\n        case \"REGISTER\": {\n            return 11;\n        }\n        case \"EVENT\": {\n            return 12;\n        }\n        case \"BATCH\": {\n            return 13;\n        }\n        case \"AUTH_CHALLENGE\": {\n            return 14;\n        }\n        case \"AUTH_RESPONSE\": {\n            return 15;\n        }\n        case \"AUTH_SUCCESS\": {\n            return 16;\n        }\n    }\n    return -1;\n}\nexport default getMessageCode;","import { Buffer } from 'buffer';\nimport getMessageCode from \"./getMessageCode\";\n\nconst setOpcode = (buf : Buffer, messageType: String) : void => {\n    // Opcode is at position 4 in the frame\n    buf[4] = getMessageCode(messageType);\n}\nexport default setOpcode;","import {Buffer} from 'buffer';\nimport {bufferToBytes} from \"../utils/conversions\";\nimport {getTypeFrom} from \"./typeFactory\";\nconst format = require(\"biguint-format\");\nimport {stringify, parse} from 'uuid'\n\nexport interface type {\n    toString() : string;\n    toCQL() : Buffer\n}\n\nexport class ASCII implements type {\n    validationError : boolean = false;\n    asciiText : string = \"\"\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            for (let pair of data.entries()) {\n                if (pair[1] > 127) {\n                    this.validationError = true;\n                    break;\n                }\n                this.asciiText += String.fromCharCode(pair[1])\n           }\n        }\n    }\n\n    toString() {\n        return this.asciiText\n    }\n\n    toCQL() {\n        return Buffer.from(this.asciiText, \"ascii\")\n    }\n}\n\n// 8 Byte signed long\nexport class BIGINT implements type {\n    value : bigint = 0n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readBigInt64BE();\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\n// Blob is just a sequence of bytes\nexport class BLOB implements type {\n    \n    #value : BigInt = 0n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#value = BigInt(format(data))\n        }\n    }\n\n    toString() {\n        return \"0x\" + this.#value.toString(16)\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class BOOLEAN implements type {\n    value : boolean = false\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            if (data.length && data[0] > 0) {\n                this.value = true;\n            }\n        }\n    }\n\n    toString() {\n        return this.value ? \"True\" : \"False\"\n    }\n\n    toCQL() {\n        return Buffer.from([this.value ? 1 : 0])\n    }\n}\n\nexport class COUNTER implements type {\n    constructor(data: Buffer | string) {\n    }\n\n    toString() {\n        return \"\"\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\n// Number represented as unscaled * 10 ^ scale\nexport class DECIMAL implements type {\n    scale = 0n\n    unscaled = 0n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.scale = BigInt(format(data.slice(0, 4)))\n            this.unscaled = BigInt(format(data.slice(4)))\n        }\n    }\n\n    toString() {\n        return \"\"\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class DOUBLE implements type {\n    value : number\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readDoubleBE(0)\n        } else {\n            this.value = 0\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeDoubleBE(this.value, 0)\n        return buf\n    }\n}\n\nexport class FLOAT implements type {\n    value : number\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readFloatBE(0)\n        } else {\n            this.value = 0\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeFloatBE(this.value, 0)\n        return buf\n    }\n}\n\nexport class INET implements type {\n    address : Buffer = Buffer.from(\"\")\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.address = data\n        }\n    }\n\n    toString() {\n        if (this.address.length == 4) {\n            return this.address.join('.').toString()\n        } else if (this.address.length == 6) {\n            return \"unimplemented\"\n        } else {\n            return \"invalid address\"\n        }\n    }\n     \n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class INT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt32BE(0)\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt32BE(this.value, 0)\n        return buf\n    }\n}\n\nexport class LIST implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value: any) {\n        if (data instanceof Buffer) {\n            const n = data.readInt32BE(0)\n            data = data.slice(4)\n            this.list = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    this.list[i] = getTypeFrom(value, bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class MAP implements type {\n    container : Array<[type | null, type | null]> = new Array<[type | null, type | null]>()\n\n    constructor(data: Buffer | string, value : any) {\n        if (data instanceof Buffer) {\n            const [firstVal, secondVal] = value\n            const n = data.readInt32BE(0)\n            let dataPart = data.slice(4)\n            this.container = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                this.container[i] = [null, null]\n                let bytes = bufferToBytes(dataPart);\n            \n                if (bytes != null) {\n                    this.container[i][0] = getTypeFrom(firstVal, bytes.bytes);\n                    dataPart = dataPart.slice(bytes.bytes.length + 4)\n    \n                }\n                \n                bytes = bufferToBytes(dataPart);\n                if (bytes != null) {\n                    this.container[i][1] = getTypeFrom(secondVal, bytes.bytes);\n                    dataPart = dataPart.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"{\"\n        for (let i = 0; i < this.container.length; ++i) {\n            const [key, value] = this.container[i]\n            //if (key != null) {console.log(key.toString())}\n            const keyString = key != null ? key.toString() : \"null\"\n            const valueString =value != null ? value.toString() : \"null\"\n            resultString += keyString + \" : \" + valueString + \", \"\n        }\n        resultString = resultString.replace(/..$/,\"}\")\n        return resultString\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class SET implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value : any) {\n        if (data instanceof Buffer) {\n            const n = data.readInt32BE(0)\n            data = data.slice(4)\n            this.list = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    this.list[i] = getTypeFrom(value, bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n        //console.log(this.list.toString())\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class SMALLINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt16BE()\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt16BE(this.value, 0)\n        return buf\n    }\n}\n\nexport class TIME implements type {\n    #hours : bigint = 0n;\n    #minutes : bigint = 0n\n    #seconds : bigint = 0n\n    #nanoseconds :bigint = 0n\n    #hoursRatio : bigint = 3600000000000n\n    #minutesRatio : bigint = 60000000000n\n    #secondsRatio : bigint = 1000000000n\n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#nanoseconds = BigInt(data.slice(0, 4).readInt32BE(0)) * BigInt(Math.pow(2,32)) + BigInt(data.slice(4, 8).readInt32BE(0))\n            if (0 < this.#nanoseconds && this.#nanoseconds < 86399999999999) {\n                this.#hours = this.#nanoseconds / this.#hoursRatio\n                this.#nanoseconds -= this.#hours * this.#hoursRatio\n                console.log(this.#nanoseconds)\n                this.#minutes = this.#nanoseconds / this.#minutesRatio\n                this.#nanoseconds -= this.#minutes * this.#minutesRatio\n                console.log(this.#nanoseconds)\n                this.#seconds = this.#nanoseconds / this.#secondsRatio\n                this.#nanoseconds -= this.#seconds * this.#secondsRatio\n            }\n        }\n    }\n\n    toString() {\n        let result = this.#hours + \":\" + this.#minutes + \":\" + this.#seconds\n        if (this.#nanoseconds > 0) {\n            result += \".\" + this.#nanoseconds\n        }\n        return result\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class DATE implements type {\n\n    #value : Date = new Date(0)\n    #days = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#days = data.slice(0, 4).readUInt32BE(0) - Math.pow(2, 31)\n            this.#value = new Date(this.#days * 8.64e7)\n        }\n    }\n\n    toString() {\n        if (isNaN(this.#value.getUTCFullYear())) {\n            return this.#days.toString() + \" days from 1970-01-01\"\n        }\n      \n        return this.#value.getUTCFullYear() + \"-\" + (this.#value.getUTCMonth() + 1) + \"-\" + this.#value.getUTCDate() \n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class TIMESTAMP implements type {\n    #value : Date = new Date(0)\n    #miliseconds = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#miliseconds = data.slice(0, 4).readUInt32BE(0) * Math.pow(2, 32) + data.slice(4, 8).readUInt32BE(0)\n            this.#value = new Date(this.#miliseconds)\n        }\n    }\n\n    toString() {\n        if (isNaN(this.#value.getUTCFullYear())) {\n            return this.#miliseconds.toString()\n        }\n      \n        console.log(this.#value.toString())\n        let result = this.#value.getUTCFullYear()  + \"-\" + (this.#value.getUTCMonth() + 1) + \"-\" + this.#value.getUTCDate()\n        + \" \" + this.#value.getUTCHours() + \":\" + this.#value.getUTCMinutes()\n\n        if (this.#value.getUTCSeconds() > 0) {\n            result += \":\" + this.#value.getUTCSeconds()\n        }\n        \n        if (this.#value.getUTCMilliseconds() > 0) {\n            result += \".\" + this.#value.getUTCMilliseconds()\n        }\n\n        result += \"+\" + (this.#value.getTimezoneOffset() / -60)\n\n        return result\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class TINYINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt8()\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt8(this.value, 0)\n        return buf\n    }\n}\n\nexport class TUPLE implements type {\n    tuple : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value: any) {\n        if (data instanceof Buffer) {\n            const n = value.length\n            this.tuple = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    //console.log(value[i])\n                    this.tuple[i] = getTypeFrom(value[i], bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"(\"\n        for (let i = 0; i < this.tuple.length; ++i) {\n            const tupleValue = this.tuple[i]\n            const stringValue = tupleValue != null ? tupleValue.toString() : \"null\"\n           \n            resultString += stringValue + \", \"\n        }\n        resultString = resultString.replace(/..$/,\")\")\n        return resultString\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}\n\nexport class UUID implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer | string) {\n        console.log(data)\n        if (data instanceof Buffer) {\n            this.#value = stringify(data)\n        } else {\n            this.#value = data\n        }\n    }\n\n    toString() {\n        return this.#value\n    }\n\n    toCQL() {\n        return Buffer.from(Array.from(parse(this.#value)))\n    }\n}\n\nexport class VARCHAR implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#value = data.toString('utf8')\n        }\n    }\n\n    toString() {\n        return this.#value\n    }\n\n    toCQL() {\n        return Buffer.from(this.#value, \"utf-8\")\n    }\n}\n\nexport class VARINT implements type {\n    toString() {\n        return \"\"\n    }\n\n    toCQL() {\n        return Buffer.from(\"\")\n    }\n}","import {ASCII, BIGINT, BLOB, BOOLEAN, COUNTER, DECIMAL, DOUBLE, FLOAT,\n        SET, INT, type, LIST, MAP, VARCHAR, UUID, TUPLE, INET, TIME, DATE, SMALLINT, TINYINT, TIMESTAMP} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const getTypeFrom = (type: any, data: Buffer | string) : type | null =>  {\n    const id = Number(format(type.id.short))\n    const value = type.value\n    switch (id) {\n        case 1: {\n            return new ASCII(data);\n        }\n        case 2: {\n            return new BIGINT(data);\n        }\n        case 3: {\n            return new BLOB(data);\n        }\n        case 4: {\n            return new BOOLEAN(data)\n        }\n        case 5: {\n            return new COUNTER(data)\n        }\n        case 6: {\n            return new DECIMAL(data)\n        }\n        case 7: {\n            return new DOUBLE(data)\n        }\n        case 8: {\n            return new FLOAT(data)\n        }\n        case 9: {\n            return new INT(data)\n        }\n        case 11: {\n            return new TIMESTAMP(data)\n        }\n        case 12: {\n            return new UUID(data)\n        }\n        case 13: {\n            return new VARCHAR(data)\n        }\n        case 16: {\n            return new INET(data)\n        }\n        case 17: {\n            return new DATE(data)\n        }\n        case 18: {\n            return new TIME(data)\n        }\n        case 19: {\n            return new SMALLINT(data)\n        }\n        case 20: {\n            return new TINYINT(data)\n        }\n        case 32 : {\n            return new LIST(data, value)\n        }\n        case 33: {\n            return new MAP(data, value)\n        }\n        case 34: {\n            return new SET(data, value)\n        }\n        case 49: {\n            return new TUPLE(data, value)\n        }\n    }\n    return null;\n}","import {Buffer} from \"buffer\";\nimport {numberToInt, numberToShort} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addQueryBody = (buffer: Buffer, queryBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const querySize = numberToInt(BigInt(queryBody.length));\n    querySize.int.copy(body, 0, 0, 4);\n   \n    queryBody.copy(body, 4, 0, queryBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, queryBody.length + 4, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, queryBody.length + 6, 0, 1);\n    extraData.copy(body, queryBody.length + 7, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addQueryBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport {Bytes, Consistency} from \"./types\";\nimport setLength from \"./setLength\";\nimport addQueryBody from \"./addQueryBody\";\nimport {numberToByte, numberToInt} from \"./conversions\";\nimport { CQLDriver } from \"../Driver\";\n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getQueryMessage = (driver: CQLDriver, body: string, setLastQuery : any, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(body)\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n    setOpcode(buffer, \"QUERY\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        \n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n    \n    // Basic query - long string(int) + consistency(short) + flag(byte) + possible data    \n    const queryBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(queryBody.length + 7 + extraData.length)\n    setLength(buffer, length)\n    buffer = addQueryBody(buffer, queryBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    return buffer;\n}\n\n\n\nexport default getQueryMessage;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addExecuteBody = (buffer: Buffer, executeBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n   \n    executeBody.copy(body, 0, 0, executeBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, executeBody.length, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, executeBody.length + 2, 0, 1);\n    extraData.copy(body, executeBody.length + 3, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addExecuteBody;\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport {bigIntToBuffer, numberToByte, numberToInt, numberToShort, tokensToValues} from \"./conversions\";\nimport addExecuteBody from \"./addExecuteBody\";\nimport { CQLDriver } from \"../Driver\";\nimport { Bytes, Option } from \"./types\";\nconst format = require(\"biguint-format\");\n\nconst ValuesFlag : bigint = 1n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getExecuteMessage = (driver : CQLDriver, queryId: string, setLastQuery : any, bindValues : Array<string>, bindTypes : Array<Option>, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(queryId)\n\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n\n    setOpcode(buffer, \"EXECUTE\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    if (bindValues != []) {\n        flagValue += ValuesFlag\n        extraData = Buffer.concat([extraData, tokensToValues(bindTypes, bindValues)])\n    }\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n\n    // Execute message + short bytes(short)*/\n    \n    const value = bigIntToBuffer(BigInt(queryId))\n    console.log(value)\n    const executeBody = Buffer.concat([numberToShort(BigInt(value.length)).short, value])\n    const length = BigInt(executeBody.length + 3 + extraData.length)\n    setLength(buffer, length)\n    buffer = addExecuteBody(buffer, executeBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    console.log(buffer)\n    return buffer;\n}\n\n\n\nexport default getExecuteMessage;","import {Consistency} from \"../utils/types\";\nimport {numberToShort} from \"../utils/conversions\";\n\nconst getConsistency = (value : string) : Consistency => {\n    let consistencyCode = -1\n\n    switch (value) {\n        case \"ANY\": {\n            consistencyCode = 0;\n            break;\n        }\n        case \"ONE\": {\n            consistencyCode = 1;\n            break;\n        }\n        case \"TWO\": {\n            consistencyCode = 2;\n            break;\n        }\n        case \"THREE\": {\n            consistencyCode = 3;\n            break;\n        }\n        case \"QUORUM\": {\n            consistencyCode = 4;\n            break;\n        }\n        case \"ALL\": {\n            consistencyCode = 5;\n            break;\n        }\n        case \"LOCAL_QUORUM\": {\n            consistencyCode = 6;\n            break;\n        }\n        case \"EACH_QUORUM\": {\n            consistencyCode = 7;\n            break;\n        }\n        case \"LOCAL_SERIAL\": {\n            consistencyCode = 8;\n            break;\n        }\n        case \"LOCAL_ONE\": {\n            consistencyCode = 9;\n            break;\n        }\n    }\n\n    return {\n        name: value,\n        consistency : numberToShort(BigInt(consistencyCode))\n    };\n}\n\nexport default getConsistency;","import handshakeMessage from \"./functions/Handshake\"\nimport {Bytes, Consistency, Option} from \"./utils/types\";\nimport getConsistency from \"./functions/Consistency\";\nimport {numberToShort} from \"./utils/conversions\";\nimport getQueryMessage from \"./utils/getQueryMessage\";\nimport getQueryResult from \"./utils/getQueryResult\";\nimport getPrepareMessage from \"./utils/getPrepareMessage\";\nimport getExecuteMessage from \"./utils/getExecuteMessage\";\n\nclass CQLDriver {\n    #consistency: Consistency\n    #keyspace : string\n    #pageSize: number\n    #pagingEnabled : boolean\n    #pagingStates : Array<Bytes>\n    #pagingIndex : number\n    #lastQuery: string\n    #lastQueryType : string\n    #expectedIndex : number\n    #expectingNewQuery : boolean\n    #bindValues : Array<string>\n    #preparedStatements : Map<bigint, Array<Option>>\n\n    constructor() {\n        console.log(\"creating object\")\n        this.#consistency = getConsistency(\"ONE\");\n        this.#keyspace = \"\"\n        this.#pageSize = 6\n        this.#pagingEnabled = true\n        this.#pagingStates = []\n        this.#pagingIndex = -1\n        this.#expectedIndex = 0\n        this.#lastQuery = \"\"\n        this.#lastQueryType = \"QUERY\"\n        this.#expectingNewQuery = true\n        this.#bindValues = []\n        this.#preparedStatements = new Map()\n    }\n\n    handshake = handshakeMessage.bind(this)\n\n    #addPreparedStatement = (id: bigint, values: Array<Option>) : void => {\n        this.#preparedStatements.set(id, values)\n    }\n\n    getResponse = (buf: Buffer) => {\n        return getQueryResult(this, buf, this.#setKeyspace, this.#addPreparedStatement)\n    }\n\n    connect = (websocket : any, setResponse : any, setTableResponse : any) : boolean => {\n        let driver = this\n        websocket.current.addEventListener('open', function (event : any) {\n            console.log('Connected to the WS Server!')\n        });\n        const coder = new TextEncoder()\n        websocket.current.send(coder.encode(driver.handshake()));\n\n         // Connection closed\n         websocket.current.addEventListener('close', function (event: any) {\n            console.log('Disconnected from the WS Server!')\n        });\n\n        // Listen for messages\n        \n        websocket.current.addEventListener('message', function (event: any) {\n            event.data.arrayBuffer().then((response: any) => {\n                response = driver.getResponse(Buffer.from(response))\n                if (typeof response == \"string\") {\n                    setResponse(response)\n                } else {\n                    setTableResponse(response)\n                }\n            })\n        });\n\n        return true;\n    }\n\n    query = (body : string, pagingState? : Bytes) : Buffer => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"QUERY\"\n        this.#bindValues = []\n        return getQueryMessage(this, body, this.#setLastQuery, pagingState);\n    }\n\n    prepare = (body : string) : Buffer => {\n        return getPrepareMessage(body)\n    }\n\n    execute = (body : string, bindValues : Array<string>) : Buffer | null => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"EXECUTE\"\n        this.#bindValues = bindValues\n        console.log(BigInt(body))\n        const result = this.#preparedStatements.get(BigInt(body))\n\n        if (result == undefined) {\n            return null\n        }\n        console.log(result)\n        return getExecuteMessage(this, body, this.#setLastQuery, this.#bindValues, result);\n    }\n\n    getNextPageQuery = () : Buffer | null => {\n        console.log(this.#pagingStates)\n        const wantedIndex = this.#pagingIndex + 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    getNumberOfLoadedPages = () : number => {\n        return this.#pagingStates.length + 1\n    }\n\n    hasPreviousPage = () : boolean => {\n        if (this.getPageNumber() > 0) {\n            return true\n        }\n        return false\n    }\n\n    hasNextPage = () : boolean => {\n        if (this.getPageNumber() < this.#pagingStates.length) {\n            return true\n        }\n        return false\n    }\n\n    getPreviousPageQuery = () : Buffer | null => {\n        const wantedIndex = this.#pagingIndex - 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    #getQueryPageAt = (index: number) : Buffer | null => {\n        const [isFirstPage, pagingState] = this.#getPagingState(index)\n        this.#expectedIndex = index\n\n        if (isFirstPage && pagingState == null) {\n            if (this.#lastQueryType == \"EXECUTE\") {\n                const result = this.#preparedStatements.get(BigInt(this.#lastQuery))\n\n                if (result == undefined) {\n                    return null\n                }\n                return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery, this.#bindValues, result);\n            } else {\n                return getQueryMessage(this, this.#lastQuery, this.#setLastQuery);\n            }\n        } else if (pagingState == null) {\n            return null\n        }\n        if (this.#lastQueryType == \"EXECUTE\") {\n            const result = this.#preparedStatements.get(BigInt(this.#lastQuery))\n\n            if (result == undefined) {\n                return null\n            }\n            return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery, this.#bindValues, result, pagingState);\n        } else {\n            return getQueryMessage(this, this.#lastQuery, this.#setLastQuery, pagingState);\n        }\n    }\n\n    getExpectedIndex = () : number => {\n        return this.#expectedIndex\n    }\n\n    getExpectingNewQuery = () : boolean => {\n        return this.#expectingNewQuery\n    }\n\n    setPageNumber = (page: number) : void => {\n        this.#pagingIndex = page\n    }\n\n    setConsistency = (s : string) => {\n        const received = getConsistency(s);\n        if (Buffer.compare(received.consistency.short, numberToShort(BigInt(-1)).short) != 0) {\n            this.#consistency = received;\n            return 0\n        }\n        return -1\n    }\n\n    #setKeyspace = (keyspace : string) => {\n        this.#keyspace = keyspace\n    }\n\n    #setLastQuery = (query : string) : void => {\n        this.#lastQuery = query;\n    }\n\n    getLastQuery = () : string => {\n        return this.#lastQuery\n    }\n\n    getKeyspace = () : string => {\n        return this.#keyspace\n    }\n\n    getConsistencyName = () : string => {\n        return this.#consistency.name\n    }\n\n    getConsistency = () : Consistency => {\n        return this.#consistency\n    }\n\n    #getPagingState = (index: number) :  [boolean, Bytes | null]  => {\n       \n        if (index == 0) {\n            return [true, null]\n        } else if (index < 0 || index - 1 >= this.#pagingStates.length) {\n            return [false, null]\n        }\n\n        return [false, this.#pagingStates[index - 1]]\n    }\n\n    getPageNumber = () : number => {\n        return this.#pagingIndex\n    }\n\n    clearPagingStates = () : void => {\n        this.#pagingStates = []\n    }\n\n    addPagingState = (nextPagingState : Bytes) : void => {\n        this.#pagingStates.push(nextPagingState)\n    }\n\n    setPaging = (mode : string, size? : number) => {\n        if (size) {\n            this.#pageSize = size;\n        }\n        \n        if (mode.toUpperCase() == \"ON\") {\n            this.#pagingEnabled = true\n        } else if (mode.toUpperCase() == \"OFF\") {\n            this.#pagingEnabled = false\n        } \n    }\n\n    getPaging = () : [number, boolean] => {\n        return [this.#pageSize, this.#pagingEnabled]\n    }\n}\n\nexport {CQLDriver}","import {Buffer} from \"buffer\";\n\nconst addStartupBody = (buffer: Buffer) : Buffer => {\n    const body = Buffer.alloc(2);\n    buffer = Buffer.concat([buffer, body], buffer.length + 2);\n    return buffer\n}\n\nexport default addStartupBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport addStartupBody from \"./addStartupBody\";\nimport setLength from \"./setLength\";\n\nconst getStartupMessage = () : Buffer => {\n    let buffer = Frame();\n    setOpcode(buffer, \"STARTUP\");\n    setVersion(buffer, 4);\n    console.log(buffer)\n    setLength(buffer, 2n)\n    buffer = addStartupBody(buffer);\n    console.log(buffer)\n    return buffer;\n}\n\nexport default  getStartupMessage;","import getStartupMessage from \"../utils/getStartupMessage\";\n\n\nconst handshakeMessage = () : string => {\n    return getStartupMessage().toString();\n}\n\nexport default handshakeMessage;","import { Buffer } from 'buffer';\nconst format = require(\"biguint-format\");\n\nconst getLength = (buf : Buffer) : bigint => {\n    return BigInt(format(buf.slice(5, 9)));\n}\nexport default getLength;","import { Buffer } from 'buffer';\n\nexport const getOpcode = (buf : Buffer) : number => {\n    // Opcode is at position 4 in the frame\n    return buf[4]\n}\n\nexport const getOpcodeName = (buf : Buffer) : string => {\n    // Opcode is at position 4 in the frame\n    var num = getOpcode(buf)\n\n    switch (num) {\n        case 0: {\n            return \"ERROR\";\n        }\n        case 1: {\n            return \"STARTUP\";\n        }\n        case 2: {\n            return \"READY\";\n        }\n        case 3: {\n            return \"AUTHENTICATE\";\n        }\n        case 5: {\n            return \"OPTIONS\";\n        }\n        case 6: {\n            return \"SUPPORTED\";\n        }\n        case 7: {\n            return \"QUERY\";\n        }\n        case 8: {\n            return \"RESULT\";\n        }\n        case 9: {\n            return \"PREPARE\";\n        }\n        case 10: {\n            return \"EXECUTE\";\n        }\n        case 11: {\n            return \"REGISTER\";\n        }\n        case 12: {\n            return \"EVENT\";\n        }\n        case 13: {\n            return \"BATCH\";\n        }\n        case 14: {\n            return \"AUTH_CHALLENGE\";\n        }\n        case 15: {\n            return \"AUTH_RESPONSE\";\n        }\n        case 16: {\n            return \"AUTH_SUCCESS\";\n        }\n    }\n    return \"INVALID\";\n}","import {Buffer} from \"buffer\";\nimport {\n    bufferToBytes,\n    bufferToInt,\n    bufferToOption,\n    bufferToShort,\n    bufferToShortBytes,\n    bufferToString,\n    bufferToStringList\n} from \"./conversions\";\nimport {Option} from \"./types\";\nimport getLength from \"./getLength\";\nimport { getOpcodeName } from \"./getOpcode\";\nimport { getTypeFrom } from \"../cql-types/typeFactory\";\nimport { CQLDriver } from \"../Driver\";\nconst format = require(\"biguint-format\");\n\nconst getVoidResult = () : string => {\n    return \"\"\n}\n\nconst getRowsResult = (driver : CQLDriver, buf : Buffer) : string  | Array<Array<string>> => {\n    let stringLen = 0\n    let globalTableSpecPresent = false\n    let hasMorePages = false\n    let noMetaData = false\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    if (metaDataFlags & 2) {\n        hasMorePages = true\n    }\n    if (metaDataFlags & 4) {\n        noMetaData = true\n    }\n    stringLen += 4\n    const columnCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    stringLen += 4\n\n    if (hasMorePages) {\n        const pagingState = bufferToBytes(buf.slice(stringLen))\n        if (pagingState != null) {\n            stringLen += pagingState.bytes.length + 4;\n            if (driver.getExpectedIndex() == driver.getNumberOfLoadedPages() - 1) {\n                driver.addPagingState(pagingState)\n            }\n            driver.setPageNumber(driver.getExpectedIndex())\n        } else {\n            stringLen += 4\n        }\n    } else {\n       driver.setPageNumber(driver.getExpectedIndex())\n    }\n\n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(keySpaceName.length))\n        tableName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(tableName.length))\n    }\n    \n\n    let columnVars : any = Array.from({length: columnCount})\n  \n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(keySpaceName.length.short)) + 2\n            tableName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(tableName.length.short)) + 2\n        }\n        \n        let columnName = bufferToString(buf.slice(stringLen))\n \n        stringLen += Number(format(columnName.length.short)) + 2\n        let columnType = bufferToOption(buf.slice(stringLen))\n    \n        columnVars[i] = {name: columnName, type: columnType}\n        //console.log(columnType)\n        stringLen += columnType.size + 2\n    }\n    \n    const rowCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n\n    stringLen += 4\n    let rows : any[] = Array.from({length: rowCount})\n\n    for (let i = 0; i < rowCount; ++i) {\n        let row : any = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            row[j] = bufferToBytes(buf.slice(stringLen))\n            stringLen += 4\n            if (row[j] != null) {\n                stringLen += Number(format(row[j].length.int))\n            }\n        }\n        rows[i] = row\n    }\n   \n    let content : Array<Array<string>> = Array.from({length: rowCount + 1})\n  \n    content[0] = Array.from({length: columnCount})\n    for (let j = 0; j < columnCount; ++j) {\n        content[0][j] = columnVars[j].name.string.toString()\n    }\n   \n    // Creating final array\n    for (let i = 1; i <= rowCount; ++i) {\n        content[i] = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            //console.log(format(columnVars[j].type.id.short))\n            if (rows[i - 1][j] != null) {\n            //console.log()\n                const receivedType = getTypeFrom(columnVars[j].type, rows[i - 1][j].bytes)\n                if (receivedType != null) {\n                    content[i][j] = receivedType.toString()\n                } else {\n                    content[i][j] = \"null\"\n                }\n            } else {\n                content[i][j] = \"null\"\n            }\n            \n        }\n    }\n\n    return content\n}\n\nconst getSetKeyspaceResult = (buf : Buffer, setKeyspace : (arg0: string) => void) : string => {\n    const keyspaceName =  bufferToString(buf).string.toString()\n    setKeyspace(keyspaceName)\n    const response = \"Changed keyspace to \" + keyspaceName\n    return response\n}\n\nconst getPreparedResult = (buf : Buffer, addPreparedStatement : any) : string => {\n    const idBuffer = bufferToShortBytes(buf).shortBytes\n    const id = BigInt(format(bufferToShortBytes(buf).shortBytes))\n    let globalTableSpecPresent = false\n    buf = buf.slice(idBuffer.length + 2)\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    console.log(globalTableSpecPresent)\n    \n    buf = buf.slice(4)\n    \n    const columnCount = Number(format(bufferToInt(buf).int))\n    buf = buf.slice(4)\n    const pkCount = Number(format(bufferToInt(buf).int))\n    buf = buf.slice(4)\n    console.log(pkCount)\n    \n    for (let i = 0; i < pkCount; ++i) {\n        const pkIndex = Number(format(bufferToShort(buf).short))\n        buf = buf.slice(2)\n    }\n    let columnValues : Array<Option> = Array.from({length: columnCount})\n   \n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf)\n        buf = buf.slice(keySpaceName.string.length + 2)\n        tableName = bufferToString(buf)\n        buf = buf.slice(tableName.string.length + 2)\n    }\n    console.log(columnCount)\n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf)\n            console.log(keySpaceName)\n            buf.slice(Number(format(keySpaceName.length.short)) + 2)\n            tableName = bufferToString(buf)\n            console.log(tableName)\n            buf.slice(Number(format(tableName.length.short)) + 2)\n        }\n        \n        let columnName = bufferToString(buf)\n        console.log(columnName)\n        buf = buf.slice(Number(format(columnName.length.short)) + 2)\n        let columnType = bufferToOption(buf)\n        columnValues[i] = columnType\n        console.log(columnType)\n        buf = buf.slice(columnType.size + 2)\n    }\n    console.log(columnValues)\n    addPreparedStatement(id, columnValues)\n\n    return \"Prepared statement with id \" + id.toString()\n}\n\nconst getSchemaChangeResult = (buf : Buffer) : string => {\n    let stringLen = 0\n    const changeType = bufferToString(buf).string.toString()\n    stringLen += changeType.length + 2\n    const target = bufferToString(buf.slice(stringLen)).string.toString()\n    stringLen += target.length + 2\n    let option = \"\"\n\n    if (target == \"KEYSPACE\") {\n        option = bufferToString(buf.slice(stringLen)).string.toString()\n    } else if (target == \"TABLE\" || target == \"TYPE\") {\n        const object = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += object.length + 2\n        const name = bufferToString(buf.slice(stringLen)).string.toString()\n        option = object + \" \" + name\n    } else if (target == \"FUNCTION\" || target == \"AGGREGATE\") {\n        const keyspace = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const fun = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const args = bufferToStringList(buf.slice(stringLen))\n        option = keyspace + \" \" + fun\n        for (let i = 0; i < format(args.length.short); ++i) {\n            option += \" \" + args.stringList[i].string.toString()\n        }\n    }\n\n    return changeType + \" \" + target + \" \" + option\n}\n\nconst getQueryResult = (driver : any, buffer: Buffer, setKeyspace: any, addPreparedStatement : any) : string | Array<Array<string>> => {\n\n    //console.log(buffer)\n    const length = getLength(buffer)\n    //console.log(length)\n    const body = buffer.slice(9, 9 + Number(length));\n\n    let code = Number(format(body.slice(0, 4)))\n    if (getOpcodeName(buffer) == \"RESULT\") {\n        switch (code) {\n            case 1: {\n                return getVoidResult();\n            }\n            case 2: {\n                //return \"Rows\";\n                return getRowsResult(driver, body.slice(4, Number(length)))\n            }\n            case 3: {\n                return getSetKeyspaceResult(body.slice(4, Number(length)), setKeyspace);\n            }\n            case 4: {\n                return getPreparedResult(body.slice(4, Number(length)), addPreparedStatement);\n            }\n            case 5: {\n                return getSchemaChangeResult(body.slice(4, Number(length)));\n            }\n        }\n\n        return \"Invalid body code\" + body.toString()\n    } else {\n        return getOpcodeName(buffer) + body.toString();\n    }\n}\n\nexport default getQueryResult;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\n\nconst addPrepareBody = (buffer: Buffer, prepareBody: Buffer, length : number) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const prepareSize = numberToInt(BigInt(prepareBody.length));\n    prepareSize.int.copy(body, 0, 0, 4);\n   \n    prepareBody.copy(body, 4, 0, prepareBody.length);\n  \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addPrepareBody;","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport addPrepareBody from \"./addPrepareBody\";\n\nconst getPrepareMessage = (body: string) : Buffer => {\n    let buffer = Frame();\n\n    setOpcode(buffer, \"PREPARE\");\n    setVersion(buffer, 4);\n\n    // Prepare message + long string(int)  \n    const prepareBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(prepareBody.length + 4)\n    setLength(buffer, length)\n    buffer = addPrepareBody(buffer, prepareBody, Number(length))\n    return buffer;\n}\n\n\n\nexport default getPrepareMessage;","export default __webpack_public_path__ + \"static/media/logo.5f473e75.webp\";","import {makeStyles} from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ninterface TerminalHistoryProp {\n  history: string[];\n}\n\nconst TerminalHistory = ({ history } : TerminalHistoryProp) : JSX.Element =>\n{\n    const classes = useStyles();\n    const list = history.map((e, i) => e ?\n        <div key={\"history-upper-\" + i}>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <div className={classes.inputContainer}>{e}</div>\n            </div>\n        </div> :\n        <div className={classes.inputContainer} key={\"history-lower-\" + i}>\n            {'> '}\n        </div>)\n\n    return (\n        <div>\n            <div className={classes.lineContainer}>\n                History\n            </div>\n            {list.slice(-10)}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport default TerminalHistory","\nexport const DEFAULT_PAGING_VALUE = 40;\n\nexport const DEFUALT_ADDRESS = \"127.0.0.1\";\n\nexport const DEFAULT_PORT = \"3000\";\n","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DEFUALT_ADDRESS, DEFAULT_PORT} from \"../consts\"\n\ninterface LaunchFormProps {\n    adress : string;\n    setAddress : (s : string) => void;\n    port : string;\n    setPort : (s : string) => void;\n    login : string, \n    setLogin : (s : string) => void;\n    password : string;\n    setPassword : (s : string) => void;\n    setFormPassed : (b : boolean) => void;\n}\n\nfunction LaunchForm({adress, setAddress, port, setPort, login, setLogin, password, setPassword, setFormPassed} : LaunchFormProps)\n{\n    const classes = useStyles();\n\n    const changeAddress =  (event : React.ChangeEvent<HTMLInputElement>) => {\n        setAddress(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changePort = (event : React.ChangeEvent<HTMLInputElement>)  => {\n        setPort(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changeLogin =  (event : React.ChangeEvent<HTMLInputElement>) => {\n        setLogin(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changePassword = (event : React.ChangeEvent<HTMLInputElement>)  => {\n        setPassword(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const submitForm = (e : any) => {\n        e.preventDefault();\n\n        if (adress === \"\")\n            setAddress(DEFUALT_ADDRESS);\n\n        if (port == \"\")\n            setPort(DEFAULT_PORT);\n\n        //console.log(adress, port, login, password)\n        setFormPassed(true);\n    }\n\n    return <div className={classes.blurredBackground}>\n        <form className={classes.content} onSubmit={submitForm} >\n            <div className={classes.element}>\n                <div>Address:</div>\n                <input\n                    defaultValue=\"\"\n                    value={adress}\n                    onChange={changeAddress}\n                    placeholder={DEFUALT_ADDRESS}\n                />\n            </div>\n\n            <div className={classes.element}>\n                <div>Port:</div>\n                <input\n                    defaultValue=\"\"\n                    value={port}\n                    onChange={changePort}\n                />\n            </div>\n\n            <div className={classes.element}>\n                <div>Username:</div>\n                <input\n                    defaultValue=\"\"\n                    value={login}\n                    onChange={changeLogin}\n                />\n            </div>\n\n            <div className={classes.element}>\n                <div>Password:</div>\n                <input\n                    defaultValue=\"\"\n                    value={password}\n                    onChange={changePassword}\n                    type=\"password\"\n                />\n            </div>\n\n            <button>\n                Connect\n            </button>\n        </form>\n    </div>\n}\n\nconst useStyles = makeStyles(theme => ({\n    blurredBackground: {\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundSize: \"cover\",\n        backgroundColor: \"#161616\",\n        opacity:\"0.8\",\n        //filter: \"blur(5px)\", TODO: Blur\n    },\n\n    content: {\n        fontSize: \"80%\",\n        backgroundColor: \"#0b0b61\",\n        width: \"fit-content\",\n        margin: \"auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: '20px',\n        padding: \"25px\",\n        borderRadius: \"15px\",\n    },\n\n    element: {\n        marginBottom: \"10px\",\n    }\n}));\n\nexport default LaunchForm;","import React, { forwardRef } from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ninterface InputProps {\n    value: string;\n    keyspaceName: string;\n    changeValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst Input = forwardRef<HTMLTextAreaElement, InputProps>(({value, keyspaceName, changeValue}, ref) => {\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Input: ~/{keyspaceName}{keyspaceName ? \"/\" : \"\"}\n            </div>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <textarea\n                    className={classes.inputContainer}\n                    defaultValue=\"\"\n                    value={value}\n                    onChange={changeValue}\n                    ref={ref}\n                    id=\"inputTextArea\"\n                />\n            </div>\n        </div>\n    );\n});\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"#161616\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\nexport default Input;","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { CQLDriver } from \"../CQL-Driver/src/Driver\";\nimport Terminal from \"./Terminal\";\n\ninterface TableProps {\n    driver : CQLDriver;\n    headers: string[]; \n    data: string[][];\n    sendMsg: any;\n}\n\nfunction TableDisplayer({driver, headers, data, sendMsg} : TableProps)\n{\n    const classes = useStyles();\n\n    const [page, setPageCount] = useState(driver.getPageNumber() + 1);\n    const header = headers.map((ele, i) => {\n        return <th className={classes.cellTh} key = {i}>{ele}</th>\n    })\n\n    let content =data.map((row, rowId) => {\n        return <tr key = {rowId}>\n            {row.map((ele, id) => {\n                return <td className={classes.cellTd} key={id}>{ele}</td>\n            })}\n        </tr>\n    })\n\n    const [back, setDisableOnBack] = React.useState(page == 1);\n    const [next, setDisableOnNext] = React.useState(false);\n    const setDisable = () => {\n        setDisableOnNext(driver.hasNextPage())\n        setDisableOnBack(driver.hasPreviousPage())\n    }\n\n    const onBack = () => {\n        const previousPageQuery = driver.getPreviousPageQuery();\n\n        if (previousPageQuery != null) {\n            sendMsg(previousPageQuery);\n            setPageCount(page - 1);\n            setDisable();\n        }\n    }\n    \n    const onNext = () => {        \n        const nextPageQuery = driver.getNextPageQuery();\n\n        if (nextPageQuery != null) {\n            sendMsg(nextPageQuery);\n            setPageCount(page + 1);\n            setDisable();\n        }\n    }\n\n    return (\n        <div className={classes.tableRoller}>\n            <table\n                cellSpacing={\"0\"}\n                className={classes.cellTable} \n            >\n                <thead>\n                    <tr>\n                        {header}\n                    </tr>\n                </thead>\n                <tbody>\n                    {content}\n                </tbody>\n                <tfoot>\n                    <td colSpan={headers.length} className={classes.cellTd} >\n                        <button disabled={back} className={classes.tableButton} onClick={onBack}>\n                            Back\n                        </button>\n                        <label className={classes.tableLabel}>{page}</label>\n                        <button disabled={next} className={classes.tableButton} onClick={onNext}>\n                            Next\n                        </button>\n                    </td>\n                </tfoot>\n            </table>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    cellTable:  {\n        width: \"auto\",\n        height: \"auto\",\n        padding: \"10px\"\n    },\n\n    cellTh:  {\n        border: \"1px solid lightblue;\",\n        padding: \"10px\",\n    },\n\n    cellTd:  {\n        border: \"1px solid lightblue;\",\n        textAlign: \"center\",\n        padding: \"5px\",\n    },\n\n    tableLabel: {\n        padding: \"0 15px\"\n    },\n\n    tableButton: {\n        color: \"#494949\",\n        textTransform: \"uppercase\",\n        textDecoration: \"none\",\n        background: \"#eeeeee\",\n        padding: \"5px\",\n        fontSize: \"15px\",\n        fontWeight: 'bold',\n        borderRadius: \"5px\",\n        border: \"3px solid lightblue\",\n        display: \"inline-block\",\n        transition: \"all 0.4s ease 0s\",\n\n        '&:hover': {\n            color: \"#3a2d55\",\n            background: \"#57d1e5\",\n            borderColor: \"#57d1e5\",\n            transition: \"all 0.4s ease 0s\",\n        },\n\n        '&:hover:active': {\n            background: \"#77e1ff\",\n            borderColor: \"#77e1ff\",\n            boxShadow: \"0px 0px 25px 2px  rgba(77, 225, 255, 0.7)\",\n            transition: \"none\",\n        },\n\n        '&:disabled': {\n            color: \"#666666\",\n            background: \"#aaaaaa\",\n            borderColor: \"#bbbbbb\",\n        },\n\n        '&:disabled:active': {\n            color: \"#666666\",\n            background: \"#aaaaaa\",\n            borderColor: \"#bbbbbb\",\n            boxShadow: \"none\",\n        },\n    },\n\n    tableRoller: {\n        overflowX: 'auto',\n    },\n\n}));\n\nexport default TableDisplayer;\n","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TableDisplayer from \"./TableDisplayer\";\n\ninterface ServerResponseProps {\n    driver: any;\n    websocket: any;\n    response: string;\n    setResponse: (s: string) => void;\n    tableResponse: string[][];\n    setTableResponse: (s: string[][]) => void;\n    sendMsg: (s : Buffer) => void; \n}\n\nconst ServerResponse = ({driver, websocket, response, setResponse, tableResponse, setTableResponse, sendMsg} : ServerResponseProps) => {\n    const classes = useStyles();\n\n    useEffect(() => {\n        // Create WebSocket connection.\n        websocket.current = new WebSocket('ws://localhost:8222');\n    }, []);\n\n    const errorResponse = <div className={classes.errorStruct}> {response} </div>;\n\n    return (\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Response\n            </div>\n            {tableResponse && tableResponse.length && tableResponse[0] && tableResponse[0].length ?\n                <TableDisplayer\n                    driver = {driver}\n                    headers = {tableResponse[0]}\n                    data = {tableResponse.slice(1)}\n                    sendMsg ={sendMsg}\n                />\n            :   \n            (<div className={classes.lineContainer}>\n                    <div className={classes.terminalSign}>\n                        {'>'}\n                    </div>\n                    <div className={classes.inputContainer}>\n                        {response.toLocaleLowerCase().includes(\"error\") ? errorResponse : response}\n                    </div>\n                </div>)}\n            <hr/>\n        </div>\n    )\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n\n    terminalSign: {\n        width: \"2%\",\n    },\n\n    errorStruct: {\n        color: \"#bb0000\",\n        fontWeight: 700,\n    },\n}));\n\n\nexport  default  ServerResponse;","import React, {useEffect, useState, useRef} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\nimport LaunchForm from \"./LaunchForm\";\n\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Input from \"./Input\";\nimport ServerResponse from \"./ServerResponse\";\nimport {CQLDriver} from \"../CQL-Driver/src/Driver\";\n\nconst Terminal = () => {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n    const [serverResponse, setServerResponse] = useState<string>(\"\");\n    const [tableResponse, setTableResponse] = useState<Array<Array<string>>>([[]]);\n    const [editMode, setEditMode] = useState(false);\n\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n    const webSocket:any = useRef();\n    const [driver, setDriver] = useState(new CQLDriver());\n    const classes = useStyles();\n\n    const [adress, setAddress] = useState(\"\");\n    const [port, setPort] = useState<string>(\"\");\n    const [login, setLogin] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [isFormPassed, setFormPassed] = useState(false);\n\n    const changeCommand = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommand(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    } \n\n    const clearInput = () => {\n        setCommand(\"\");\n\n        if (textAreaRef && textAreaRef.current && textAreaRef.current.selectionStart \n            && textAreaRef.current.selectionEnd)\n        {\n            textAreaRef.current.selectionStart = 0;\n            textAreaRef.current.selectionEnd = 0;\n            textAreaRef.current.setSelectionRange(0, 0)\n            textAreaRef.current.focus();\n        }\n    }\n\n    // Send a msg to the websocket\n    const sendMsg = (msg : Buffer) => {\n        webSocket.current.send(msg);\n    }\n\n    const sendConnect = (driver : CQLDriver) => {\n        driver.connect(webSocket, setServerResponse, setTableResponse);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n        let receivedConsistency = window.sessionStorage.getItem('consistency');\n\n        if (typeof receivedConsistency === \"string\") {\n            driver.setConsistency(receivedConsistency)\n        }\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n        window.sessionStorage.setItem('consistency', driver.getConsistencyName())\n    }, [commandHistory, driver]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    const tokenizedCommand = command.split(' ')\n\n                    if (command.toLowerCase().trim() == \"long\")\n                    {\n                        setEditMode(true)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    else if (command.toLowerCase().trim() == \"short\")\n                    {\n                        setEditMode(false)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1)\n                    }\n                    else if (command.toLowerCase().trim() == \"clear\")\n                    {\n                        clearInput();\n                        setServerResponse(\"\");\n                        setPositionInHistory(0);\n                        setCommandHistory([]);\n                        setCommandResult(\"\");\n                        setTableResponse([]);\n                    } else if (command.toLowerCase().trim() == \"connect\") {\n                        setServerResponse(\"\")\n                        sendConnect(driver);\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PAGING\") {\n                        // Rest of arguments are ignored - we can change it for required precise 2 arguemnts\n                        const newPagingMode = tokenizedCommand[1].trim();\n\n                        let newPagingValue\n                        if (tokenizedCommand.length > 2) {\n                            newPagingValue = tokenizedCommand[2].trim();\n                        } else {\n                            newPagingValue = \"\";\n                        }\n                        \n                        if (newPagingMode === \"OFF\")\n                        {\n                            driver.setPaging(\"OFF\")\n                        }\n                        else if (newPagingMode === \"ON\" && newPagingValue === \"\")\n                        {\n                            driver.setPaging(\"ON\")\n                        }\n                        else if (newPagingMode === \"ON\" && parseInt(newPagingValue) > 0)\n                        {\n                            driver.setPaging(\"ON\", parseInt(newPagingValue))\n                        }\n\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setServerResponse(\"\")\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PREPARE\") {\n\n                        const prepareArg = command.slice(tokenizedCommand[0].length).trim()\n                        console.log(\"Preparing \", prepareArg)\n\n                        // Tu jakies wysłanie tego\n\n\n                        // Tu jakis odbiór\n                        sendMsg(driver.prepare(prepareArg))\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse(\"\")\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"EXECUTE\") {\n                        \n                        const executeArgs : Array<string> = tokenizedCommand.slice(1);\n                        console.log(\"Executing \", executeArgs)\n\n                        // Tu jakies wysłanie tego\n                       \n\n                        // Tu jakis odbiór\n                        const executeQuery = driver.execute(executeArgs[0], executeArgs.slice(1))\n                        if (executeQuery != null) {\n                            sendMsg(executeQuery)\n                        }\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse(\"\")\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 1 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(\"Current consistency level is \" + driver.getConsistency() + \".\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 2 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(driver.setConsistency(tokenizedCommand[1]) == 0 ?\n                            \"Successfully changed consistency level to \" + tokenizedCommand[1] + \".\" :\n                            \"Invalid consistency level\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (command && command.length)\n                    {\n                        if (editMode && command.trim().slice(-1) !== ';') // Commands are to end with semicolon\n                            break;\n\n                        setServerResponse(\"\")\n                        sendMsg(driver.query(command));\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length && !editMode) {\n                        event.preventDefault();\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            clearInput();\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0 && !editMode) {\n                        event.preventDefault();\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory, driver]);\n\n    const logo = require(\"../assets/logo.webp\").default;\n\n    return (\n        <div className={classes.terminalContainer}>\n            {!isFormPassed && <LaunchForm \n                 adress={adress}\n                 setAddress={setAddress}\n                 port={port}\n                 setPort={setPort}\n                 login={login}\n                 setLogin={setLogin}\n                 password={password}\n                 setPassword={setPassword}\n                 setFormPassed={setFormPassed}\n            />}\n            <img \n                src={logo} \n                style={{\n                    opacity: 0.2,\n                    position: \"absolute\",\n                    right: 0,\n                    bottom: 0,\n                    height: \"52%\",\n                }}\n            />\n            <TerminalHistory\n                history={commandHistory}\n            />\n            <Input \n                value={command} \n                keyspaceName={driver.getKeyspace()} \n                changeValue={changeCommand}\n                ref={textAreaRef}\n            />\n             <ServerResponse\n                websocket={webSocket}\n                response={serverResponse}\n                setResponse={setServerResponse}\n                tableResponse={tableResponse}\n                setTableResponse={setTableResponse}\n                driver={driver}\n                sendMsg={sendMsg}\n            />\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    terminalContainer: {\n        height: \"100%\",\n        width: \"100%\",\n        backgroundColor: \"#161616\",\n        color: \"lightblue\",\n        fontSize: \"24px\",\n    },\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n    line : {\n        marginTop: 0,\n    }\n}));\n\nexport default Terminal;\n","import Terminal from \"./components/Terminal\";\nimport './index.css';\nfunction App() {\n\n    return (\n        <Terminal/>\n    );\n}\n\nexport default App;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}