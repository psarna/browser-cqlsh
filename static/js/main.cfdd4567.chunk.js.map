{"version":3,"sources":["CQL-Driver/src/utils/conversions.ts","CQL-Driver/src/utils/FrameTemplate.ts","CQL-Driver/src/utils/setVersion.ts","CQL-Driver/src/utils/setLength.ts","CQL-Driver/src/utils/getMessageCode.ts","CQL-Driver/src/utils/setOpcode.ts","CQL-Driver/src/utils/addQueryBody.ts","CQL-Driver/src/utils/getQueryMessage.ts","CQL-Driver/src/functions/Consistency.ts","components/ServerResponse.tsx","components/TableDisplayer.tsx","CQL-Driver/src/Driver.ts","CQL-Driver/src/utils/getLength.ts","CQL-Driver/src/utils/getOpcode.ts","CQL-Driver/src/cql-types/types.ts","CQL-Driver/src/cql-types/typeFactory.ts","CQL-Driver/src/utils/getQueryResult.ts","CQL-Driver/src/utils/addStartupBody.ts","CQL-Driver/src/utils/getStartupMessage.ts","CQL-Driver/src/functions/Handshake.ts","components/TerminalHistory.tsx","components/Input.tsx","components/Terminal.tsx","App.tsx","index.tsx"],"names":["format","require","numberToInt","value","int","bigIntToBuffer","numberToShort","short","numberToByte","byte","bufferToShort","buf","slice","bufferToInt","bufferToOption","id","stringLen","idVal","size","bufferToString","fst","snd","keyspace","udt","n","udtList","Array","from","length","i","name","option","optionList","len","Number","BigInt","string","bufferToBytes","bytes","bufferToStringList","parsed","result","newItem","push","stringList","Buffer","alloc","Frame","setVersion","version","setLength","copy","getMessageCode","messageType","setOpcode","addQueryBody","buffer","queryBody","consistency","flag","extraData","body","concat","PageSizeFlagValue","NextPageFlagValue","getQueryMessage","driver","setLastQuery","pagingState","getConsistency","getPaging","pageSize","pagingEnabled","flagValue","consistencyCode","useStyles","makeStyles","theme","lineContainer","display","flexDirection","alignItems","justifyContent","inputContainer","width","backgroundColor","color","outlineWidth","border","fontSize","terminalSign","ServerResponse","websocket","response","setResponse","tableResponse","setTableResponse","sendMsg","classes","useEffect","current","WebSocket","console","log","addEventListener","event","data","arrayBuffer","then","getResponse","className","headers","cellTable","height","padding","cellTh","cellTd","textAlign","tableLabel","tableButton","textTransform","textDecoration","background","fontWeight","borderRadius","transition","borderColor","TableDisplayer","header","map","ele","content","row","rowId","cellSpacing","colSpan","onClick","previousPageQuery","getPreviousPageQuery","nextPageQuery","getNextPageQuery","CQLDriver","handshake","handshakeMessage","bind","this","query","clearPagingStates","wantedIndex","getNumberOfLoadedPages","index","isFirstPage","getExpectedIndex","getExpectingNewQuery","setPageNumber","page","setConsistency","s","received","compare","getLastQuery","getKeyspace","getConsistencyName","getPageNumber","addPagingState","nextPagingState","setPaging","mode","toUpperCase","getQueryResult","getLength","getOpcodeName","num","getOpcode","ASCII","validationError","asciiText","entries","pair","String","fromCharCode","BIGINT","readBigInt64BE","BLOB","Blob","Uint8Array","BOOLEAN","COUNTER","DECIMAL","scale","unscaled","DOUBLE","readDoubleBE","FLOAT","readFloatBE","INT","readInt32BE","toString","LIST","list","getTypeFrom","MAP","container","firstVal","secondVal","dataPart","resultString","key","replace","SET","TUPLE","tuple","tupleValue","UUID","stringify","VARCHAR","type","setKeyspace","code","globalTableSpecPresent","hasMorePages","metaDataFlags","keySpaceName","tableName","columnCount","columnVars","columnName","columnType","rowCount","rows","j","receivedType","getRowsResult","keyspaceName","getSetKeyspaceResult","changeType","target","object","fun","args","getSchemaChangeResult","addStartupBody","getStartupMessage","TerminalHistory","history","e","Input","changeValue","onChange","terminalContainer","line","marginTop","Terminal","useState","command","setCommand","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","serverResponse","setServerResponse","editMode","setEditMode","webSocket","useRef","msg","send","receivedHistory","window","localStorage","getItem","receivedConsistency","sessionStorage","parsedReceivedHistory","JSON","parse","setItem","listener","tokenizedCommand","split","toLowerCase","trim","prevState","mock_table","coder","TextEncoder","encode","sendHandshake","document","removeEventListener","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.cfdd4567.chunk.js","sourcesContent":["import { Buffer } from 'buffer';\nimport {Byte, Int, Long, Short, String, StringList, Option, Bytes} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const numberToLong = (value: bigint) : Long => {\n    return {long: bigIntToBuffer(value, 8)}\n}\n\nexport const numberToInt = (value : bigint) : Int => {\n    return {int: bigIntToBuffer(value, 4)}\n}\n\nexport const numberToShort = (value : bigint) : Short => {\n    return {short: bigIntToBuffer(value, 2)}\n}\n\nexport const numberToByte = (value : bigint) : Byte => {\n    return {byte: bigIntToBuffer(value, 1)}\n}\n\nexport const bufferToShort = (buf : Buffer) : Short => {\n    return {short : buf.slice(0, 2)}\n}\n\nexport const bufferToInt = (buf : Buffer) : Int => {\n    return {int : buf.slice(0, 4)}\n}\n\nexport const bufferToOption = (buf : Buffer) : Option  =>  {\n    const id = bufferToShort(buf);\n    let stringLen = 2\n    const idVal = format(id.short)\n    let size = 0\n    let value = null\n\n    if (idVal == 0) {\n        value = bufferToString(buf.slice(stringLen))\n    } else if (idVal == 32 || idVal == 34) {\n        value = bufferToOption(buf.slice(stringLen))\n        size += value.size + 2\n    } else if (idVal == 33) {\n        const fst = bufferToOption(buf.slice(stringLen))\n        stringLen += fst.size\n        const snd = (bufferToOption(buf.slice(stringLen)))\n        size += fst.size + snd.size + 4\n        value = [fst, snd]\n\n    } else if (idVal == 48) {\n        const keyspace = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const udt = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n\n        stringLen += 2\n\n        let udtList : any[] = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            udtList[i].name =  bufferToString(buf.slice(stringLen));\n            stringLen += format(udtList[i].name.length)\n            udtList[i].option = bufferToOption(buf.slice(stringLen))\n            stringLen += udtList[i].option.size\n        }\n\n        value = [keyspace, udt, udtList]\n\n    } else if (idVal == 49) {\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n    \n        stringLen += 2\n        size += 2\n\n        let optionList : any[] = Array.from({length: n})\n       \n        for (let i = 0; i < n; ++i ) {\n            optionList[i] = bufferToOption(buf.slice(stringLen))\n            stringLen += optionList[i].size + 2\n            size += optionList[i].size + 2\n        }\n        value = optionList\n    }\n    \n    return {id: id, value : value, size: size}\n}\n\nexport const bufferToString = (buf : Buffer) : String => {\n    const len = Number(format(buf.slice(0, 2)))\n  \n    return {length: numberToShort(BigInt(len)), string: buf.slice(2, len + 2)}\n}\n\nexport const bufferToBytes = (buf : Buffer) : Bytes | null => {\n    const len = Number(format(buf.slice(0, 4)))\n    if (len < 0) {\n        return null;\n    }\n    return {length: numberToInt(BigInt(len)), bytes: buf.slice(4, len + 4)}\n}\n\nexport const optionToReadableString = (id : Short, byt: Bytes) : string => {\n    console.log(id)\n    const idVal = format(id.short)\n\n    let result = \"\";\n    let buf = byt.bytes\n\n    // Ascii\n    if (idVal == 1) {\n        for (let i = 0; i < format(buf.length); ++i) {\n            if (buf[i] > 127) {\n                // Some error handling\n            } else {\n                result += buf[i].toString()\n            }\n        }\n        return result;\n    }\n    // Bigint\n    else if (idVal == 2) {\n        return buf.readBigInt64BE(0).toString();\n    }\n    // Blob\n    else if (idVal == 3) {\n        return buf.toString()\n    }\n    // Boolean\n    else if (idVal == 4) {\n        if (buf[0] == 0) {\n            return \"False\"\n        } else {\n            return \"True\"\n        }\n    }\n    // Date\n    else if (idVal == 5) {\n\n    }\n    // Decimal\n    else if (idVal == 6) {\n        return buf.readFloatLE(0).toString();\n    }\n    // Double\n    else if (idVal == 7) {\n        return buf.readDoubleBE(0).toString();\n    }\n    // Float\n    else if (idVal == 8) {\n\n    }\n    // Int\n    else if (idVal == 12) {\n        return buf.toString()\n    }\n    return \"\"\n}\n\nexport const bufferToStringList = (buf : Buffer) : StringList => {\n    const len = format(buf.slice(0, 2))\n    let parsed = 2\n    let result : String[] = []\n    for (let i = 0; i < len; ++i) {\n        const newItem = bufferToString(buf.slice(parsed))\n        parsed += format(newItem.length) + 2\n        result.push(newItem)\n    }\n    return  {length: numberToShort(len), stringList: result}\n}\n\nconst bigIntToBuffer = (value : bigint, size : number) : Buffer => {\n    let buf = Buffer.alloc(size);\n    for (let i = size - 1; i >= 0; --i) {\n        buf[i] = Number(value & BigInt(0xff));\n        value >>= 8n;\n    }\n    return buf;\n}\n","import {Buffer} from 'buffer';\n\nconst Frame= () : Buffer => {\n    return Buffer.alloc(9);\n}\nexport default Frame;","import { Buffer } from 'buffer';\n\nconst setVersion = (buf : Buffer, version: number) : Buffer => {\n    // Version is at position 0 in the frame\n    buf[0] = version;\n    return buf;\n}\nexport default setVersion;","import { Buffer } from 'buffer';\nimport {numberToInt} from \"./conversions\";\n\nconst setLength = (buf : Buffer, length: bigint) : Buffer => {\n    const bodySize = numberToInt(length);\n    bodySize.int.copy(buf, 5, 0, 4);\n    return buf;\n}\nexport default setLength;","const getMessageCode = (messageType: String) : number => {\n    switch (messageType) {\n        case \"ERROR\": {\n            return 0;\n        }\n        case \"STARTUP\": {\n            return 1;\n        }\n        case \"READY\": {\n            return 2;\n        }\n        case \"AUTHENTICATE\": {\n            return 3;\n        }\n        case \"OPTIONS\": {\n            return 5;\n        }\n        case \"SUPPORTED\": {\n            return 6;\n        }\n        case \"QUERY\": {\n            return 7;\n        }\n        case \"RESULT\": {\n            return 8;\n        }\n        case \"PREPARE\": {\n            return 9;\n        }\n        case \"EXECUTE\": {\n            return 10;\n        }\n        case \"REGISTER\": {\n            return 11;\n        }\n        case \"EVENT\": {\n            return 12;\n        }\n        case \"BATCH\": {\n            return 13;\n        }\n        case \"AUTH_CHALLENGE\": {\n            return 14;\n        }\n        case \"AUTH_RESPONSE\": {\n            return 15;\n        }\n        case \"AUTH_SUCCESS\": {\n            return 16;\n        }\n    }\n    return -1;\n}\nexport default getMessageCode;","import { Buffer } from 'buffer';\nimport getMessageCode from \"./getMessageCode\";\n\nconst setOpcode = (buf : Buffer, messageType: String) : void => {\n    // Opcode is at position 4 in the frame\n    buf[4] = getMessageCode(messageType);\n}\nexport default setOpcode;","import {Buffer} from \"buffer\";\nimport {numberToInt, numberToShort} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addQueryBody = (buffer: Buffer, queryBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const querySize = numberToInt(BigInt(queryBody.length));\n    querySize.int.copy(body, 0, 0, 4);\n   \n    queryBody.copy(body, 4, 0, queryBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, queryBody.length + 4, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, queryBody.length + 6, 0, 1);\n    extraData.copy(body, queryBody.length + 7, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addQueryBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport {Bytes, Consistency} from \"./types\";\nimport setLength from \"./setLength\";\nimport addQueryBody from \"./addQueryBody\";\nimport {numberToByte, numberToInt} from \"./conversions\";\nimport { CQLDriver } from \"../Driver\";\n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getQueryMessage = (driver: CQLDriver, body: string, setLastQuery : any, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(body)\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n    setOpcode(buffer, \"QUERY\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n    \n    // Basic query - long string(int) + consistency(short) + flag(byte) + possible data    \n    const queryBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(queryBody.length + 7 + extraData.length)\n    setLength(buffer, length)\n    buffer = addQueryBody(buffer, queryBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    return buffer;\n}\n\n\n\nexport default getQueryMessage;","import {Consistency} from \"../utils/types\";\nimport {numberToShort} from \"../utils/conversions\";\n\nconst getConsistency = (value : string) : Consistency => {\n    let consistencyCode = -1\n\n    switch (value) {\n        case \"ANY\": {\n            consistencyCode = 1;\n            break;\n        }\n        case \"ONE\": {\n            consistencyCode = 2;\n            break;\n        }\n        case \"TWO\": {\n            consistencyCode = 3;\n            break;\n        }\n        case \"THREE\": {\n            consistencyCode = 4;\n            break;\n        }\n        case \"QUORUM\": {\n            consistencyCode = 5;\n            break;\n        }\n        case \"ALL\": {\n            consistencyCode = 6;\n            break;\n        }\n        case \"LOCAL_QUORUM\": {\n            consistencyCode = 7;\n            break;\n        }\n        case \"EACH_QUORUM\": {\n            consistencyCode = 8;\n            break;\n        }\n        case \"LOCAL_SERIAL\": {\n            consistencyCode = 9;\n            break;\n        }\n        case \"LOCAL_ONE\": {\n            consistencyCode = 10;\n            break;\n        }\n    }\n\n    return {\n        name: value,\n        consistency : numberToShort(BigInt(consistencyCode))\n    };\n}\n\nexport default getConsistency;","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TableDisplayer from \"./TableDisplayer\";\n\ninterface ServerResponseProps {\n    driver: any;\n    websocket: any;\n    response: string;\n    setResponse: (s: string) => void;\n    tableResponse: string[][];\n    setTableResponse: (s: string[][]) => void;\n    sendMsg: (s : Buffer) => void; \n}\n\nconst ServerResponse = ({driver, websocket, response, setResponse, tableResponse, setTableResponse, sendMsg} : ServerResponseProps) => {\n    const classes = useStyles();\n\n    useEffect(() => {\n        // Create WebSocket connection.\n        websocket.current = new WebSocket('ws://localhost:8222', \"cql\");\n        console.log(websocket.current)\n\n        // Connection opened\n        websocket.current.addEventListener('open', function (event : any) {\n            console.log('Connected to the WS Server!')\n        });\n\n        // Connection closed\n        websocket.current.addEventListener('close', function (event: any) {\n            console.log('Disconnected from the WS Server!')\n        });\n\n        // Listen for messages\n        websocket.current.addEventListener('message', function (event: any) {\n\n            event.data.arrayBuffer().then((response: any) => {\n                response = driver.getResponse(Buffer.from(response))\n                if (typeof response == \"string\") {\n                    setResponse(response)\n                } else {\n                    setTableResponse(response)\n                }\n            })\n\n            // TODO: Parsing response for table or just string and then executing respective setState.\n\n           // console.log('Message from server ', Buffer.from(event.data.arrayBuffer()));\n           //console.log('Message from server ', event.data.json());\n        });\n    }, []);\n\n    return (\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Response\n            </div>\n            {tableResponse && tableResponse.length && tableResponse[0] && tableResponse[0].length ?\n                <TableDisplayer\n                    driver = {driver}\n                    headers = {tableResponse[0]}\n                    data = {tableResponse.slice(1)}\n                    sendMsg ={sendMsg}\n                />\n            :   \n            (<div className={classes.lineContainer}>\n                    <div className={classes.terminalSign}>\n                        {'>'}\n                    </div>\n                    <div className={classes.inputContainer}>\n                        {response}\n                    </div>\n                </div>)}\n            <hr/>\n        </div>\n    )\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport  default  ServerResponse;\n","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { CQLDriver } from \"../CQL-Driver/src/Driver\";\nimport Terminal from \"./Terminal\";\n\ninterface TableProps {\n    driver : CQLDriver;\n    headers: string[]; \n    data: string[][];\n    sendMsg: any;\n}\n\nfunction TableDisplayer({driver, headers, data, sendMsg} : TableProps)\n{\n    const classes = useStyles();\n\n    const page = 107; // mock page number\n    const header = headers.map((ele, i) => {\n        return <th className={classes.cellTh} key = {i}>{ele}</th>\n    })\n\n    let content =data.map((row, rowId) => {\n        return <tr key = {rowId}>\n            {row.map((ele, id) => {\n                return <td className={classes.cellTd} key={id}>{ele}</td>\n            })}\n        </tr>\n    })\n\n    const onBack = () => {\n        const previousPageQuery = driver.getPreviousPageQuery();\n        if (previousPageQuery != null) {\n            sendMsg (previousPageQuery)\n        }\n    }    \n    const onNext = () => {        \n        const nextPageQuery = driver.getNextPageQuery();\n        if (nextPageQuery != null) {\n            sendMsg (nextPageQuery)\n        }\n    }\n\n    return (\n        <table\n            cellSpacing={\"0\"}\n            className={classes.cellTable} \n        >\n            <thead>\n                <tr>\n                    {header}\n                </tr>\n            </thead>\n            <tbody>\n                {content}\n            </tbody>\n            <tfoot>\n                <td colSpan={headers.length} className={classes.cellTd} >\n                    <button className={classes.tableButton} onClick={onBack}>\n                        Back\n                    </button>\n                    <label className={classes.tableLabel}>{page}</label>\n                    <button className={classes.tableButton} onClick={onNext}>\n                        Next\n                    </button>\n                </td>\n            </tfoot>\n        </table>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    cellTable:  {\n        width: \"auto\",\n        height: \"auto\",\n        padding: \"10px\"\n    },\n\n    cellTh:  {\n        border: \"1px solid lightblue;\"\n    },\n\n    cellTd:  {\n        border: \"1px solid lightblue;\",\n        textAlign: \"center\"\n    },\n\n    tableLabel: {\n        padding: \"0 15px\"\n    },\n\n    tableButton: {\n        color: \"#494949\",\n        textTransform: \"uppercase\",\n        textDecoration: \"none\",\n        background: \"#ffffff\",\n        padding: \"5px\",\n        fontSize: \"15px\",\n        fontWeight: 'bold',\n        borderRadius: \"5px\",\n        border: \"3px solid lightblue\",\n        display: \"inline-block\",\n        transition: \"all 0.4s ease 0s\",\n\n        '&:hover': {\n            color: \"navy\",\n            background: \"#f6b93b\",\n            borderColor: \"#f6b93b\",\n            transition: \"all 0.4s ease 0s\",\n        }\n    },\n\n}));\n\nexport default TableDisplayer;\n","import handshakeMessage from \"./functions/Handshake\"\nimport {Bytes, Consistency} from \"./utils/types\";\nimport getConsistency from \"./functions/Consistency\";\nimport {numberToShort} from \"./utils/conversions\";\nimport getQueryMessage from \"./utils/getQueryMessage\";\nimport getQueryResult from \"./utils/getQueryResult\";\n\nclass CQLDriver {\n    #consistency: Consistency\n    #keyspace : string\n    #pageSize: number\n    #pagingEnabled : boolean\n    #pagingStates : Array<Bytes>\n    #pagingIndex : number\n    #lastQuery: string\n    #expectedIndex : number\n    #expectingNewQuery : boolean\n\n    constructor() {\n        this.#consistency = getConsistency(\"ONE\");\n        this.#keyspace = \"\"\n        this.#pageSize = 2\n        this.#pagingEnabled = true\n        this.#pagingStates = []\n        this.#pagingIndex = -1\n        this.#expectedIndex = 0\n        this.#lastQuery = \"\"\n        this.#expectingNewQuery = true\n    }\n\n    handshake = handshakeMessage.bind(this)\n\n    query = (body : string, pagingState? : Bytes) : Buffer => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        return getQueryMessage(this, body, this.#setLastQuery, pagingState);\n    }\n\n    getNextPageQuery = () : Buffer | null => {\n        const wantedIndex = this.#pagingIndex + 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    getNumberOfLoadedPages = () : number => {\n        return this.#pagingStates.length + 1\n    }\n\n    getPreviousPageQuery = () : Buffer | null => {\n        const wantedIndex = this.#pagingIndex - 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    #getQueryPageAt = (index: number) : Buffer | null => {\n        const [isFirstPage, pagingState] = this.#getPagingState(index)\n        this.#expectedIndex = index\n\n        if (isFirstPage && pagingState == null) {\n            return getQueryMessage(this, this.#lastQuery, this.#setLastQuery);\n        } else if (pagingState == null) {\n            return null\n        }\n\n        return getQueryMessage(this, this.#lastQuery, this.#setLastQuery, pagingState);\n    }\n\n    getExpectedIndex = () : number => {\n        return this.#expectedIndex\n    }\n\n    getExpectingNewQuery = () : boolean => {\n        return this.#expectingNewQuery\n    }\n\n    setPageNumber = (page: number) : void => {\n        this.#pagingIndex = page\n    }\n\n    setConsistency = (s : string) => {\n        const received = getConsistency(s);\n        if (Buffer.compare(received.consistency.short, numberToShort(BigInt(-1)).short) != 0) {\n            this.#consistency = received;\n            return 0\n        }\n        return -1\n    }\n\n    #setKeyspace = (keyspace : string) => {\n        this.#keyspace = keyspace\n    }\n\n    #setLastQuery = (query : string) : void => {\n        this.#lastQuery = query;\n    }\n\n    getLastQuery = () : string => {\n        return this.#lastQuery\n    }\n\n    getKeyspace = () : string => {\n        return this.#keyspace\n    }\n\n    getConsistencyName = () : string => {\n        return this.#consistency.name\n    }\n\n    getConsistency = () : Consistency => {\n        return this.#consistency\n    }\n\n    #getPagingState = (index: number) :  [boolean, Bytes | null]  => {\n       \n        if (index == 0) {\n            return [true, null]\n        } else if (index < 0 || index - 1 >= this.#pagingStates.length) {\n            return [false, null]\n        }\n\n        return [false, this.#pagingStates[index - 1]]\n    }\n\n    getPageNumber = () : number => {\n        return this.#pagingIndex\n    }\n\n    clearPagingStates = () : void => {\n        this.#pagingStates = []\n    }\n\n    addPagingState = (nextPagingState : Bytes) : void => {\n        this.#pagingStates.push(nextPagingState)\n    }\n\n    setPaging = (mode : string, size? : number) => {\n        if (size) {\n            this.#pageSize = size;\n        }\n        \n        if (mode.toUpperCase() == \"ON\") {\n            this.#pagingEnabled = true\n        } else if (mode.toUpperCase() == \"OFF\") {\n            this.#pagingEnabled = false\n        } \n    }\n\n    getPaging = () : [number, boolean] => {\n        return [this.#pageSize, this.#pagingEnabled]\n    }\n\n    getResponse = (buf: Buffer) => {\n        return getQueryResult(this, buf, this.#setKeyspace)\n    }\n}\n\nexport {CQLDriver}","import { Buffer } from 'buffer';\nconst format = require(\"biguint-format\");\n\nconst getLength = (buf : Buffer) : bigint => {\n    return BigInt(format(buf.slice(5, 9)));\n}\nexport default getLength;","import { Buffer } from 'buffer';\n\nexport const getOpcode = (buf : Buffer) : number => {\n    // Opcode is at position 4 in the frame\n    return buf[4]\n}\n\nexport const getOpcodeName = (buf : Buffer) : string => {\n    // Opcode is at position 4 in the frame\n    var num = getOpcode(buf)\n\n    switch (num) {\n        case 0: {\n            return \"ERROR\";\n        }\n        case 1: {\n            return \"STARTUP\";\n        }\n        case 2: {\n            return \"READY\";\n        }\n        case 3: {\n            return \"AUTHENTICATE\";\n        }\n        case 5: {\n            return \"OPTIONS\";\n        }\n        case 6: {\n            return \"SUPPORTED\";\n        }\n        case 7: {\n            return \"QUERY\";\n        }\n        case 8: {\n            return \"RESULT\";\n        }\n        case 9: {\n            return \"PREPARE\";\n        }\n        case 10: {\n            return \"EXECUTE\";\n        }\n        case 11: {\n            return \"REGISTER\";\n        }\n        case 12: {\n            return \"EVENT\";\n        }\n        case 13: {\n            return \"BATCH\";\n        }\n        case 14: {\n            return \"AUTH_CHALLENGE\";\n        }\n        case 15: {\n            return \"AUTH_RESPONSE\";\n        }\n        case 16: {\n            return \"AUTH_SUCCESS\";\n        }\n    }\n    return \"INVALID\";\n}","import {Blob, Buffer} from 'buffer';\nimport {bufferToBytes, bufferToInt, numberToInt} from \"../utils/conversions\";\nimport {getTypeFrom} from \"./typeFactory\";\nconst format = require(\"biguint-format\");\nimport {stringify} from 'uuid'\n\nexport interface type {\n    toString() : string;\n}\n\nexport class ASCII implements type {\n    validationError : boolean = false;\n    asciiText : string = \"\"\n\n    constructor(data: Buffer) {\n        for (let pair of data.entries()) {\n            if (pair[1] > 127) {\n                this.validationError = true;\n                break;\n            }\n            this.asciiText += String.fromCharCode(pair[1])\n        }\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// 8 Byte signed long\nexport class BIGINT implements type {\n    value : bigint = 0n\n\n    constructor(data: Buffer) {\n        this.value = data.readBigInt64BE();\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// Blob is just a sequence of bytes\nexport class BLOB implements type {\n    value: Blob = new Blob([\"\"]);\n     \n    constructor(data : Buffer) {\n        this.value =  new Blob([new Uint8Array(data)])\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class BOOLEAN implements type {\n    value : boolean = false\n    constructor(data: Buffer) {\n        if (data.length && data[0] > 0) {\n            this.value = true;\n        }\n    }\n\n    toString() {\n        return this.value ? \"True\" : \"False\"\n    }\n}\n\nexport class COUNTER implements type {\n    constructor(data: Buffer) {\n\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// Number represented as unscaled * 10 ^ scale\nexport class DECIMAL implements type {\n    scale = 0n\n    unscaled = 0n\n    constructor(data: Buffer) {\n        this.scale = BigInt(format(data.slice(0, 4)))\n        this.unscaled = BigInt(format(data.slice(4)))\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class DOUBLE implements type {\n    value : number\n    constructor(data: Buffer) {\n        this.value = data.readDoubleBE(0)\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class FLOAT implements type {\n    value : number\n    constructor(data: Buffer) {\n        this.value = data.readFloatBE(0)\n    }\n\n    toString() {\n        return \"\"\n    }\n}\nexport class INET implements type {\n    address : Buffer = Buffer.from(\"\")\n\n    constructor(data: Buffer) {\n        this.address = data\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class INT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt32BE(0)\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n}\n\nexport class LIST implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = data.readInt32BE(0)\n        data = data.slice(4)\n        this.list = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                this.list[i] = getTypeFrom(value, bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n}\n\nexport class MAP implements type {\n    container : Array<[type | null, type | null]> = new Array<[type | null, type | null]>()\n\n    constructor(data: Buffer, value : any) {\n        const [firstVal, secondVal] = value\n        //console.log(firstVal, secondVal)\n        const n = data.readInt32BE(0)\n        let dataPart = data.slice(4)\n        this.container = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            this.container[i] = [null, dataPart]\n            let bytes = bufferToBytes(dataPart);\n        \n            if (bytes != null) {\n                this.container[i][0] = getTypeFrom(firstVal, bytes.bytes);\n                dataPart = dataPart.slice(bytes.bytes.length + 4)\n \n            }\n            \n            bytes = bufferToBytes(dataPart);\n            if (bytes != null) {\n                this.container[i][1] = getTypeFrom(secondVal, bytes.bytes);\n                dataPart = dataPart.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"{\"\n        for (let i = 0; i < this.container.length; ++i) {\n            const [key, value] = this.container[i]\n            //if (key != null) {console.log(key.toString())}\n            const keyString = key != null ? key.toString() : \"null\"\n            const valueString =value != null ? value.toString() : \"null\"\n            resultString += keyString + \" : \" + valueString + \", \"\n        }\n        resultString = resultString.replace(/..$/,\"}\")\n        return resultString\n    }\n}\n\nexport class SET implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = data.readInt32BE(0)\n        data = data.slice(4)\n        this.list = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                this.list[i] = getTypeFrom(value, bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n}\n\nexport class SMALLINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt16BE()\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nclass TEXT implements type {\n   #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = data.toString('utf8')\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nclass TIME implements type {\n    toString() {\n        return \"\"\n    }\n}\n\nclass TIMESTAMP implements type {\n    toString() {\n        return \"\"\n    }\n}\n\nclass TINYINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt8()\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class TUPLE implements type {\n    tuple : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = value.length\n        this.tuple = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                //console.log(value[i])\n                this.tuple[i] = getTypeFrom(value[i], bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"(\"\n        for (let i = 0; i < this.tuple.length; ++i) {\n            const tupleValue = this.tuple[i]\n            const stringValue = tupleValue != null ? tupleValue.toString() : \"null\"\n           \n            resultString += stringValue + \", \"\n        }\n        resultString = resultString.replace(/..$/,\")\")\n        return resultString\n    }\n}\n\nexport class UUID implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = stringify(data)\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nexport class VARCHAR implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = data.toString('utf8')\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nexport class VARINT implements type {\n    toString() {\n        return \"\"\n    }\n}","import { updateNonNullExpression } from \"typescript\";\nimport {ASCII, BIGINT, BLOB, BOOLEAN, COUNTER, DECIMAL, DOUBLE, FLOAT,\n        SET, INT, type, LIST, MAP, VARCHAR, UUID, TUPLE} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const getTypeFrom = (type: any, data: Buffer) : type | null =>  {\n    const id = Number(format(type.id.short))\n    const value = type.value\n\n    switch (id) {\n        case 1: {\n            return new ASCII(data);\n        }\n        case 2: {\n            return new BIGINT(data);\n        }\n        case 3: {\n            return new BLOB(data);\n        }\n        case 4: {\n            return new BOOLEAN(data)\n        }\n        case 5: {\n            return new COUNTER(data)\n        }\n        case 6: {\n            return new DECIMAL(data)\n        }\n        case 7: {\n            return new DOUBLE(data)\n        }\n        case 8: {\n            return new FLOAT(data)\n        }\n        case 9: {\n            return new INT(data)\n        }\n        case 12: {\n            return new UUID(data)\n        }\n        case 13: {\n            return new VARCHAR(data)\n        }\n        case 32 : {\n            return new LIST(data, value)\n        }\n        case 33: {\n            return new MAP(data, value)\n        }\n        case 34: {\n            return new SET(data, value)\n        }\n        case 49: {\n            return new TUPLE(data, value)\n        }\n    }\n    return null;\n}","import {Buffer} from \"buffer\";\nimport {\n    bufferToBytes,\n    bufferToInt,\n    bufferToOption,\n    bufferToString,\n    bufferToStringList,\n    optionToReadableString\n} from \"./conversions\";\nimport getLength from \"./getLength\";\nimport { getOpcodeName } from \"./getOpcode\";\nimport {type} from \"../cql-types/types\";\nimport { getTypeFrom } from \"../cql-types/typeFactory\";\nimport { CQLDriver } from \"../Driver\";\nconst format = require(\"biguint-format\");\n\nconst getVoidResult = () : string => {\n    return \"\"\n}\n\nclass RowTable {\n    columns: number = 0\n    rows: number = 0\n\n    content : Array<Array<type | null>> = []\n\n    constructor(col: number, rows : number, con : Array<Array<type | null>>) {\n        this.columns = col;\n        this.rows = rows;\n        this.content = con;\n    }\n}\n\nconst getRowsResult = (driver : CQLDriver, buf : Buffer) : string  | Array<Array<string>> => {\n    let stringLen = 0\n    let globalTableSpecPresent = false\n    let hasMorePages = false\n    let noMetaData = false\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    if (metaDataFlags & 2) {\n        hasMorePages = true\n    }\n    if (metaDataFlags & 4) {\n        noMetaData = true\n    }\n    stringLen += 4\n    const columnCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    stringLen += 4\n    \n    if (hasMorePages) {\n        const pagingState = bufferToBytes(buf.slice(stringLen))\n        if (pagingState != null) {\n            stringLen += pagingState.bytes.length + 4;\n            if (driver.getExpectedIndex() == driver.getNumberOfLoadedPages() - 1) {\n                driver.addPagingState(pagingState)\n            }\n            driver.setPageNumber(driver.getExpectedIndex())\n        } else {\n            stringLen += 4\n        }\n    } else {\n       driver.setPageNumber(driver.getExpectedIndex())\n    }\n\n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(keySpaceName.length))\n        tableName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(tableName.length))\n    }\n    \n\n    let columnVars : any = Array.from({length: columnCount})\n\n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(keySpaceName.length.short)) + 2\n            tableName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(tableName.length.short)) + 2\n        }\n        \n        let columnName = bufferToString(buf.slice(stringLen))\n        //console.log(columnName.string.toString())\n        stringLen += Number(format(columnName.length.short)) + 2\n        let columnType = bufferToOption(buf.slice(stringLen))\n        //console.log(format(columnType.id.short))\n        columnVars[i] = {name: columnName, type: columnType}\n        //console.log(columnType)\n        stringLen += columnType.size + 2\n    }\n    \n    const rowCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    //console.log(rowCount)\n    stringLen += 4\n    let rows : any[] = Array.from({length: rowCount})\n    for (let i = 0; i < rowCount; ++i) {\n        let row : any = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            row[j] = bufferToBytes(buf.slice(stringLen))\n            //console.log(row[j])\n            stringLen += 4\n            if (row[j] != null) {\n                stringLen += Number(format(row[j].length.int))\n            }\n        }\n        rows[i] = row\n    }\n   \n    let content : Array<Array<string>> = Array.from({length: rowCount + 1})\n  \n    content[0] = Array.from({length: columnCount})\n    for (let j = 0; j < columnCount; ++j) {\n        content[0][j] = columnVars[j].name.string.toString()\n    }\n    \n    //console.log(rowCount, columnCount)\n    for (let i = 1; i <= rowCount; ++i) {\n        content[i] = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            //console.log(format(columnVars[j].type.id.short))\n            //console.log(rows[i - 1][j].bytes)\n            const receivedType = getTypeFrom(columnVars[j].type, rows[i - 1][j].bytes)\n            //content[i] = \n            if (receivedType != null) {\n                content[i][j] = receivedType.toString()\n            } else {\n                content[i][j] = \"null\"\n            }\n        }\n    }\n\n    return content\n}\n\nconst getSetKeyspaceResult = (buf : Buffer, setKeyspace : (arg0: string) => void) : string => {\n    const keyspaceName =  bufferToString(buf).string.toString()\n    setKeyspace(keyspaceName)\n    const response = \"Changed keyspace to \" + keyspaceName\n    return response\n}\n\nconst getPreparedResult = () => {\n\n}\n\nconst getSchemaChangeResult = (buf : Buffer) : string => {\n    let stringLen = 0\n    const changeType = bufferToString(buf).string.toString()\n    stringLen += changeType.length + 2\n    const target = bufferToString(buf.slice(stringLen)).string.toString()\n    stringLen += target.length + 2\n    let option = \"\"\n\n    if (target == \"KEYSPACE\") {\n        option = bufferToString(buf.slice(stringLen)).string.toString()\n    } else if (target == \"TABLE\" || target == \"TYPE\") {\n        const object = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += object.length + 2\n        const name = bufferToString(buf.slice(stringLen)).string.toString()\n        option = object + \" \" + name\n    } else if (target == \"FUNCTION\" || target == \"AGGREGATE\") {\n        const keyspace = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const fun = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const args = bufferToStringList(buf.slice(stringLen))\n        option = keyspace + \" \" + fun\n        for (let i = 0; i < format(args.length.short); ++i) {\n            option += \" \" + args.stringList[i].string.toString()\n        }\n    }\n\n    return changeType + \" \" + target + \" \" + option\n}\n\nconst getQueryResult = (driver : any, buffer: Buffer, setKeyspace: any) : string | Array<Array<string>> => {\n\n    //console.log(buffer)\n    const length = getLength(buffer)\n    //console.log(length)\n    const body = buffer.slice(9, 9 + Number(length));\n\n    let code = Number(format(body.slice(0, 4)))\n    if (getOpcodeName(buffer) == \"RESULT\") {\n        switch (code) {\n            case 1: {\n                return getVoidResult();\n            }\n            case 2: {\n                //return \"Rows\";\n                return getRowsResult(driver, body.slice(4, Number(length)))\n            }\n            case 3: {\n                return getSetKeyspaceResult(body.slice(4, Number(length)), setKeyspace);\n            }\n            case 4: {\n                return \"Prepared\";\n            }\n            case 5: {\n                //return \"ScehmaChange\";\n                return getSchemaChangeResult(body.slice(4, Number(length)));\n            }\n        }\n\n        return \"Invalid body code\" + body.toString()\n    } else {\n        return getOpcodeName(buffer) + body.toString();\n    }\n}\n\nexport default getQueryResult;","import {Buffer} from \"buffer\";\n\nconst addStartupBody = (buffer: Buffer) : Buffer => {\n    const body = Buffer.alloc(2);\n    buffer = Buffer.concat([buffer, body], buffer.length + 2);\n    return buffer\n}\n\nexport default addStartupBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport addStartupBody from \"./addStartupBody\";\nimport setLength from \"./setLength\";\n\nconst getStartupMessage = () : Buffer => {\n    let buffer = Frame();\n    setOpcode(buffer, \"STARTUP\");\n    setVersion(buffer, 4);\n    console.log(buffer)\n    setLength(buffer, 2n)\n    buffer = addStartupBody(buffer);\n    console.log(buffer)\n    return buffer;\n}\n\nexport default  getStartupMessage;","import getStartupMessage from \"../utils/getStartupMessage\";\n\n\nconst handshakeMessage = () : string => {\n    return getStartupMessage().toString();\n}\n\nexport default handshakeMessage;","import {makeStyles} from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ninterface TerminalHistoryProp {\n  history: string[];\n}\n\nconst TerminalHistory = ({ history } : TerminalHistoryProp) : JSX.Element =>\n{\n    const classes = useStyles();\n    const list = history.map((e, i) => e ?\n        <div>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <div className={classes.inputContainer}>{e}</div>\n            </div>\n        </div> :\n        <div className={classes.inputContainer} key = {i}>\n            {'> '}\n        </div>)\n\n    return (\n        <div>\n            <div className={classes.lineContainer}>\n                History\n            </div>\n            {list.slice(-10)}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport default TerminalHistory","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ninterface InputProps {\n    value: string;\n    keyspaceName: string;\n    changeValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst Input = ({value, keyspaceName, changeValue}: InputProps) => {\n    const classes = useStyles();\n\n    return(\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Input: ~/{keyspaceName}{keyspaceName ? \"/\" : \"\"}\n            </div>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <textarea\n                    className={classes.inputContainer}\n                    value={value}\n                    onChange={changeValue}\n                    id={\"inputTextArea\"}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\nexport default Input;","import React, {useEffect, useState, useRef} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\n\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Input from \"./Input\";\nimport ServerResponse from \"./ServerResponse\";\nimport {CQLDriver} from \"../CQL-Driver/src/Driver\";\n\nconst Terminal = () => {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n    const [serverResponse, setServerResponse] = useState<string>(\"\");\n    const [tableResponse, setTableResponse] = useState<Array<Array<string>>>([[]]);\n    const [editMode, setEditMode] = useState(false);\n\n    const webSocket:any = useRef();\n    const [driver, setDriver] = useState(new CQLDriver());\n    const classes = useStyles();\n\n    const changeCommand = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommand(event.target.value);\n    }\n\n    // Send a msg to the websocket\n    const sendMsg = (msg : Buffer) => {\n        webSocket.current.send(msg);\n    }\n\n    const sendHandshake = () => {\n        const coder = new TextEncoder()\n        webSocket.current.send(coder.encode(driver.handshake()));\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n        let receivedConsistency = window.sessionStorage.getItem('consistency');\n\n        if (typeof receivedConsistency === \"string\") {\n            driver.setConsistency(receivedConsistency)\n        }\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n        window.sessionStorage.setItem('consistency', driver.getConsistencyName())\n    }, [commandHistory, driver]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    const tokenizedCommand = command.split(' ')\n\n                    if (command.toLowerCase().trim() == \"long\")\n                    {\n                        setEditMode(true)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    else if (command.toLowerCase().trim() == \"short\")\n                    {\n                        setEditMode(false)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1)\n                    }\n                    else if (command.toLowerCase().trim() == \"mock\") // Mock data\n                    {\n\n                        // TODO Temporary mock table with data\n                        const mock_table = [\n                            [\"id\", \"Imię\" , \"Urodzony\",\t\"Zmarł\", \"Początek panowania\", \"Koniec panowania\"],\n                            [\"0\", \"Bolesław I Chrobry\", \"967\", \"17 czerwca 1025\", \"18 kwietnia 1025\", \"17 czerwca 1025\"],\n                            [\"1\", \"Jan Matejko\", \"14 października 1257\", \"8 lutego 1296\", \"26 czerwca 1295\",\t\"8 lutego 1296\"],\n                            [\"2\", \"August III Sus\", \"17 października 1696\", \"5 października 1763\", \"5 października 1733\", \"5 października 1763\"],\n                            [\"3\", \"August II Mocny\", \"2 maja 1670\", \"1 lutego 1733\", \"15 września 1697\", \"1 lutego 1733\"],\n                            [\"4\", \"Bolesław Drugi\", \"967\", \"17 czerwca 1025\", \"18 kwietnia 1025\", \"17 czerwca 1025\"],\n                            [\"5\", \"Jan Drugi\", \"14 października 1257\", \"8 lutego 1296\", \"26 czerwca 1295\",\t\"8 lutego 1296\"],\n                            [\"6\", \"August 2.0\", \"17 października 1696\", \"5 października 1763\", \"5 października 1733\", \"5 października 1763\"],\n                            [\"7\", \"August 3.0\", \"2 maja 1670\", \"1 lutego 1733\", \"15 września 1697\", \"1 lutego 1733\"],\n                        ]\n                        console.log(\"Using mock table\", mock_table)\n\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setPositionInHistory(commandHistory.length + 1)\n                        setServerResponse(\"\")\n                        setTableResponse(mock_table)\n                    }\n                    else if (command.toLowerCase().trim() == \"clear\")\n                    {\n                        setCommand(\"\");\n                        setServerResponse(\"\");\n                        setPositionInHistory(0);\n                        setCommandHistory([]);\n                        setCommandResult(\"\");\n                        setTableResponse([]);\n                    } else if (command.toLowerCase().trim() == \"handshake\") {\n                        setServerResponse(\"\")\n                        sendHandshake();\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 1 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(\"Current consistency level is \" + driver.getConsistency() + \".\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 2 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(driver.setConsistency(tokenizedCommand[1]) == 0 ?\n                            \"Successfully changed consistency level to \" + tokenizedCommand[1] + \".\" :\n                            \"Invalid consistency level\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (command && command.length)\n                    {\n                        if (editMode && command.trim().slice(-1) !== ';') // Commands are to end with semicolon\n                            break;\n\n                        setServerResponse(\"\")\n                        sendMsg(driver.query(command));\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setCommand(\"\");\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length && !editMode) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            setCommand(\"\")\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0 && !editMode) {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory, driver]);\n\n    return (\n        <div className={classes.terminalContainer}>\n            <TerminalHistory\n                history={commandHistory}\n            />\n            <Input value={command} keyspaceName={driver.getKeyspace()} changeValue={changeCommand}/>\n             <ServerResponse\n                websocket={webSocket}\n                response={serverResponse}\n                setResponse={setServerResponse}\n                tableResponse={tableResponse}\n                setTableResponse={setTableResponse}\n                driver={driver}\n                sendMsg={sendMsg}\n            />\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    terminalContainer: {\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        fontSize: \"24px\",\n    },\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n    line : {\n        marginTop: 0,\n    }\n}));\n\nexport default Terminal;\n","import Terminal from \"./components/Terminal\";\nimport './index.css';\nfunction App() {\n\n    return (\n        <Terminal/>\n    );\n}\n\nexport default App;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}