{"version":3,"sources":["CQL-Driver/src/utils/conversions.ts","CQL-Driver/src/utils/FrameTemplate.ts","CQL-Driver/src/utils/setVersion.ts","CQL-Driver/src/utils/setLength.ts","CQL-Driver/src/utils/getMessageCode.ts","CQL-Driver/src/utils/setOpcode.ts","CQL-Driver/src/utils/addQueryBody.ts","CQL-Driver/src/utils/getQueryMessage.ts","CQL-Driver/src/utils/addExecuteBody.ts","CQL-Driver/src/utils/getExecuteMessage.ts","CQL-Driver/src/functions/Consistency.ts","components/ServerResponse.tsx","components/TableDisplayer.tsx","CQL-Driver/src/Driver.ts","CQL-Driver/src/utils/getLength.ts","CQL-Driver/src/utils/getOpcode.ts","CQL-Driver/src/cql-types/types.ts","CQL-Driver/src/cql-types/typeFactory.ts","CQL-Driver/src/utils/getQueryResult.ts","CQL-Driver/src/utils/addStartupBody.ts","CQL-Driver/src/utils/getStartupMessage.ts","CQL-Driver/src/functions/Handshake.ts","CQL-Driver/src/utils/addPrepareBody.ts","CQL-Driver/src/utils/getPrepareMessage.ts","components/TerminalHistory.tsx","components/Input.tsx","components/Terminal.tsx","consts.js","App.tsx","index.tsx"],"names":["format","require","numberToInt","value","int","bigIntToBuffer","numberToShort","short","numberToByte","byte","bufferToShort","buf","slice","bufferToInt","bufferToOption","id","stringLen","idVal","size","bufferToString","fst","snd","keyspace","udt","n","udtList","Array","from","length","i","name","option","optionList","len","Number","BigInt","string","bufferToBytes","bytes","bufferToShortBytes","shortBytes","bufferToStringList","parsed","result","newItem","push","stringList","Buffer","alloc","console","log","tempSize","mul","Frame","setVersion","version","setLength","copy","getMessageCode","messageType","setOpcode","addQueryBody","buffer","queryBody","consistency","flag","extraData","body","concat","PageSizeFlagValue","NextPageFlagValue","getQueryMessage","driver","setLastQuery","pagingState","getConsistency","getPaging","pageSize","pagingEnabled","flagValue","addExecuteBody","executeBody","getExecuteMessage","queryId","consistencyCode","useStyles","makeStyles","theme","lineContainer","display","flexDirection","alignItems","justifyContent","inputContainer","width","backgroundColor","color","outlineWidth","border","fontSize","terminalSign","ServerResponse","websocket","response","setResponse","tableResponse","setTableResponse","sendMsg","classes","useEffect","current","WebSocket","addEventListener","event","data","arrayBuffer","then","toString","getResponse","className","headers","cellTable","height","padding","cellTh","cellTd","textAlign","tableLabel","tableButton","textTransform","textDecoration","background","fontWeight","borderRadius","transition","borderColor","TableDisplayer","header","map","ele","content","row","rowId","cellSpacing","colSpan","onClick","previousPageQuery","getPreviousPageQuery","nextPageQuery","getNextPageQuery","CQLDriver","handshake","handshakeMessage","bind","this","query","clearPagingStates","prepare","getPrepareMessage","execute","wantedIndex","getNumberOfLoadedPages","index","isFirstPage","getExpectedIndex","getExpectingNewQuery","setPageNumber","page","setConsistency","s","received","compare","getLastQuery","getKeyspace","getConsistencyName","getPageNumber","addPagingState","nextPagingState","setPaging","mode","toUpperCase","getQueryResult","getLength","getOpcodeName","num","getOpcode","ASCII","validationError","asciiText","entries","pair","String","fromCharCode","BIGINT","readBigInt64BE","BLOB","Blob","Uint8Array","BOOLEAN","COUNTER","DECIMAL","scale","unscaled","DOUBLE","readDoubleBE","FLOAT","readFloatBE","INT","readInt32BE","LIST","list","getTypeFrom","MAP","container","firstVal","secondVal","dataPart","resultString","key","replace","SET","TUPLE","tuple","tupleValue","UUID","stringify","VARCHAR","type","setKeyspace","code","globalTableSpecPresent","hasMorePages","metaDataFlags","keySpaceName","tableName","columnCount","columnVars","columnName","columnType","rowCount","rows","j","receivedType","getRowsResult","keyspaceName","getSetKeyspaceResult","changeType","target","object","fun","args","getSchemaChangeResult","addStartupBody","getStartupMessage","addPrepareBody","prepareBody","TerminalHistory","history","e","Input","forwardRef","ref","changeValue","defaultValue","onChange","terminalContainer","line","marginTop","Terminal","useState","command","setCommand","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","serverResponse","setServerResponse","editMode","setEditMode","pagingValue","setPagingValue","textAreaRef","useRef","webSocket","clearInput","selectionStart","selectionEnd","setSelectionRange","focus","msg","send","receivedHistory","window","localStorage","getItem","receivedConsistency","sessionStorage","parsedReceivedHistory","JSON","parse","setItem","listener","tokenizedCommand","split","toLowerCase","trim","prevState","mock_table","coder","TextEncoder","encode","sendHandshake","newPagingValue","parseInt","prepareArg","executeArgs","document","removeEventListener","App","ReactDOM","getElementById"],"mappings":"8HAAA,+VAEMA,EAASC,EAAQ,IAMVC,EAAc,SAACC,GACxB,MAAO,CAACC,IAAKC,EAAeF,EAAO,KAG1BG,EAAgB,SAACH,GAC1B,MAAO,CAACI,MAAOF,EAAeF,EAAO,KAG5BK,EAAe,SAACL,GACzB,MAAO,CAACM,KAAMJ,EAAeF,EAAO,KAG3BO,EAAgB,SAACC,GAC1B,MAAO,CAACJ,MAAQI,EAAIC,MAAM,EAAG,KAGpBC,EAAc,SAACF,GACxB,MAAO,CAACP,IAAMO,EAAIC,MAAM,EAAG,KAGlBE,EAAiB,SAAjBA,EAAkBH,GAC3B,IAAMI,EAAKL,EAAcC,GACrBK,EAAY,EACVC,EAAQjB,EAAOe,EAAGR,OACpBW,EAAO,EACPf,EAAQ,KAEZ,GAAa,GAATc,EACAd,EAAQgB,EAAeR,EAAIC,MAAMI,SAC9B,GAAa,IAATC,GAAwB,IAATA,EAEtBC,IADAf,EAAQW,EAAeH,EAAIC,MAAMI,KACnBE,KAAO,OAClB,GAAa,IAATD,EAAa,CACpB,IAAMG,EAAMN,EAAeH,EAAIC,MAAMI,IACrCA,GAAaI,EAAIF,KACjB,IAAMG,EAAOP,EAAeH,EAAIC,MAAMI,IACtCE,GAAQE,EAAIF,KAAOG,EAAIH,KAAO,EAC9Bf,EAAQ,CAACiB,EAAKC,QAEX,GAAa,IAATJ,EAAa,CACpB,IAAMK,EAAWH,EAAeR,EAAIC,MAAMI,IAC1CA,GAAa,EACb,IAAMO,EAAMJ,EAAeR,EAAIC,MAAMI,IACrCA,GAAa,EACb,IAAMQ,EAAIxB,EAAOU,EAAcC,EAAIC,MAAMI,IAAYT,OAErDS,GAAa,EAGb,IADA,IAAIS,EAAkBC,MAAMC,KAAK,CAACC,OAAQJ,IACjCK,EAAI,EAAGA,EAAIL,IAAKK,EACrBJ,EAAQI,GAAGC,KAAQX,EAAeR,EAAIC,MAAMI,IAC5CA,GAAahB,EAAOyB,EAAQI,GAAGC,KAAKF,QACpCH,EAAQI,GAAGE,OAASjB,EAAeH,EAAIC,MAAMI,IAC7CA,GAAaS,EAAQI,GAAGE,OAAOb,KAGnCf,EAAQ,CAACmB,EAAUC,EAAKE,QAErB,GAAa,IAATR,EAAa,CACpB,IAAMO,EAAIxB,EAAOU,EAAcC,EAAIC,MAAMI,IAAYT,OAErDS,GAAa,EACbE,GAAQ,EAIR,IAFA,IAAIc,EAAqBN,MAAMC,KAAK,CAACC,OAAQJ,IAEpCK,EAAI,EAAGA,EAAIL,IAAKK,EACrBG,EAAWH,GAAKf,EAAeH,EAAIC,MAAMI,IACzCA,GAAagB,EAAWH,GAAGX,KAAO,EAClCA,GAAQc,EAAWH,GAAGX,KAAO,EAEjCf,EAAQ6B,EAGZ,MAAO,CAACjB,GAAIA,EAAIZ,MAAQA,EAAOe,KAAMA,IAG5BC,EAAiB,SAACR,GAC3B,IAAMsB,EAAMC,OAAOlC,EAAOW,EAAIC,MAAM,EAAG,KAEvC,MAAO,CAACgB,OAAQtB,EAAc6B,OAAOF,IAAOG,OAAQzB,EAAIC,MAAM,EAAGqB,EAAM,KAG9DI,EAAgB,SAAC1B,GAC1B,IAAMsB,EAAMC,OAAOlC,EAAOW,EAAIC,MAAM,EAAG,KACvC,OAAIqB,EAAM,EACC,KAEJ,CAACL,OAAQ1B,EAAYiC,OAAOF,IAAOK,MAAO3B,EAAIC,MAAM,EAAGqB,EAAM,KAG3DM,EAAqB,SAAC5B,GAC/B,IAAIsB,EAAMC,OAAOlC,EAAOW,EAAIC,MAAM,EAAG,KAIrC,OAHIqB,EAAM,IACNA,EAAM,GAEH,CAACL,OAAQtB,EAAc6B,OAAOF,IAAOO,WAAY7B,EAAIC,MAAM,EAAGqB,EAAM,KA4DlEQ,EAAqB,SAAC9B,GAI/B,IAHA,IAAMsB,EAAMjC,EAAOW,EAAIC,MAAM,EAAG,IAC5B8B,EAAS,EACTC,EAAoB,GACfd,EAAI,EAAGA,EAAII,IAAOJ,EAAG,CAC1B,IAAMe,EAAUzB,EAAeR,EAAIC,MAAM8B,IACzCA,GAAU1C,EAAO4C,EAAQhB,QAAU,EACnCe,EAAOE,KAAKD,GAEhB,MAAQ,CAAChB,OAAQtB,EAAc2B,GAAMa,WAAYH,IAGxCtC,EAAiB,SAACF,EAAgBe,GAC3C,GAAKA,EAgBE,CAEH,IADA,IAAIP,EAAMoC,SAAOC,MAAM9B,GACdW,EAAIX,EAAO,EAAGW,GAAK,IAAKA,EAC7BlB,EAAIkB,GAAKK,OAAO/B,EAAQgC,OAAO,MAC/BhC,IAAU,GAEd,OAAOQ,EArBPsC,QAAQC,IAAI/C,GAEZ,IADA,IAAIgD,EAAW,EAAGC,EAAM,KACjBjD,GAASiD,GACZA,GAAO,KACPD,GAAY,EAEhBjC,EAAOiC,EACPF,QAAQC,IAAIhC,GAEZ,IADA,IAAIP,EAAMoC,SAAOC,MAAM9B,GACdW,EAAIX,EAAO,EAAGW,GAAK,IAAKA,EAC7BlB,EAAIkB,GAAKK,OAAO/B,EAAQgC,OAAO,MAC/BhC,IAAU,GAGd,OADA8C,QAAQC,IAAIvC,EAAKA,EAAIiB,QACdjB,I,qCChMf,WAKe0C,IAHF,WACT,OAAON,SAAOC,MAAM,K,6BCITM,IALI,SAAC3C,EAAc4C,GAG9B,OADA5C,EAAI,GAAK4C,EACF5C,I,6BCJX,WAOe6C,IALG,SAAC7C,EAAciB,GAG7B,OAFiB1B,YAAY0B,GACpBxB,IAAIqD,KAAK9C,EAAK,EAAG,EAAG,GACtBA,I,6BCNX,IAqDe+C,EArDQ,SAACC,GACpB,OAAQA,GACJ,IAAK,QACD,OAAO,EAEX,IAAK,UACD,OAAO,EAEX,IAAK,QACD,OAAO,EAEX,IAAK,eACD,OAAO,EAEX,IAAK,UACD,OAAO,EAEX,IAAK,YACD,OAAO,EAEX,IAAK,QACD,OAAO,EAEX,IAAK,SACD,OAAO,EAEX,IAAK,UACD,OAAO,EAEX,IAAK,UACD,OAAO,GAEX,IAAK,WACD,OAAO,GAEX,IAAK,QACD,OAAO,GAEX,IAAK,QACD,OAAO,GAEX,IAAK,iBACD,OAAO,GAEX,IAAK,gBACD,OAAO,GAEX,IAAK,eACD,OAAO,GAGf,OAAQ,GC5CGC,IAJG,SAACjD,EAAcgD,GAE7BhD,EAAI,GAAK+C,EAAeC,K,0FCgBbE,EAjBM,SAACC,EAAgBC,EAAmBC,EAA0BC,EAAarC,EAAiBsC,GAC7G,IAAMC,EAAOpB,SAAOC,MAAMpB,GAa1B,OAXkB1B,YAAYiC,OAAO4B,EAAUnC,SACrCxB,IAAIqD,KAAKU,EAAM,EAAG,EAAG,GAE/BJ,EAAUN,KAAKU,EAAM,EAAG,EAAGJ,EAAUnC,QACboC,EAAYA,YAAYzD,MAChCkD,KAAKU,EAAMJ,EAAUnC,OAAS,EAAG,EAAG,GACnCqC,EAAKxD,KACbgD,KAAKU,EAAMJ,EAAUnC,OAAS,EAAG,EAAG,GAC7CsC,EAAUT,KAAKU,EAAMJ,EAAUnC,OAAS,EAAG,EAAGsC,EAAUtC,QAExDkC,EAASf,SAAOqB,OAAO,CAACN,EAAQK,KCP9BE,EAA6B,GAC7BC,EAA6B,GAqCpBC,IAnCS,SAACC,EAAmBL,EAAcM,EAAoBC,GAC1E,IAAIZ,EAAST,cAEboB,EAAaN,GACb,IAAMH,EAAcQ,EAAOG,iBAC3B,EAAkCH,EAAOI,YAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACAlB,YAAUE,EAAQ,SAClBR,YAAWQ,EAAQ,GAEnB,IAAIiB,EAAqB,GACrBb,EAAqBnB,SAAOC,MAAM,GAGlC8B,IACAC,GAAaV,EACbH,EAAYnB,SAAOqB,OAAO,CAACF,EAAWhE,YAAYiC,OAAO0C,IAAWzE,OAGpEsE,IACAK,GAAaT,EAEbJ,EAAYnB,SAAOqB,OAAO,CAACF,EAAUhE,YAAYiC,OAAOuC,EAAYpC,MAAMV,OAAS,IAAIxB,IAAKsE,EAAYpC,SAI5G,IAAMyB,EAAYhB,SAAOpB,KAAKwC,EAAM,SAC9BvC,EAASO,OAAO4B,EAAUnC,OAAS,EAAIsC,EAAUtC,QAIvD,OAHA4B,YAAUM,EAAQlC,GAClBkC,EAASD,EAAaC,EAAQC,EAAWC,EAAcxD,YAAauE,GAAY7C,OAAON,GAASsC,GAChGjB,QAAQC,IAAIY,GACLA,I,sFCzBIkB,EAdQ,SAAClB,EAAgBmB,EAAqBjB,EAA0BC,EAAarC,EAAiBsC,GACjH,IAAMC,EAAOpB,SAAOC,MAAMpB,GAU1B,OARAqD,EAAYxB,KAAKU,EAAM,EAAG,EAAGc,EAAYrD,QACjBoC,EAAYA,YAAYzD,MAChCkD,KAAKU,EAAMc,EAAYrD,OAAQ,EAAG,GACjCqC,EAAKxD,KACbgD,KAAKU,EAAMc,EAAYrD,OAAS,EAAG,EAAG,GAC/CsC,EAAUT,KAAKU,EAAMc,EAAYrD,OAAS,EAAG,EAAGsC,EAAUtC,QAE1DkC,EAASf,SAAOqB,OAAO,CAACN,EAAQK,KCF9BE,GAHSpE,EAAQ,IAGY,IAC7BqE,EAA6B,GAyCpBY,IAvCW,SAACV,EAAoBW,EAAiBV,EAAoBC,GAChF,IAAIZ,EAAST,cAEboB,EAAaU,GAEb,IAAMnB,EAAcQ,EAAOG,iBAC3B,EAAkCH,EAAOI,YAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAlB,YAAUE,EAAQ,WAClBR,YAAWQ,EAAQ,GAEnB,IAAIiB,EAAqB,GACrBb,EAAqBnB,SAAOC,MAAM,GAGlC8B,IACAC,GAAaV,EACbH,EAAYnB,SAAOqB,OAAO,CAACF,EAAWhE,YAAYiC,OAAO0C,IAAWzE,OAGpEsE,IACAK,GAAaT,EACbJ,EAAYnB,SAAOqB,OAAO,CAACF,EAAUhE,YAAYiC,OAAOuC,EAAYpC,MAAMV,SAASxB,IAAKsE,EAAYpC,SAKxG,IAAMnC,EAAQE,YAAe8B,OAAOgD,IACpClC,QAAQC,IAAI/C,GACZ,IAAM8E,EAAclC,SAAOqB,OAAO,CAAC9D,YAAc6B,OAAOhC,EAAMyB,SAASrB,MAAOJ,IACxEyB,EAASO,OAAO8C,EAAYrD,OAAS,EAAIsC,EAAUtC,QAIzD,OAHA4B,YAAUM,EAAQlC,GAClBkC,EAASkB,EAAelB,EAAQmB,EAAajB,EAAcxD,YAAauE,GAAY7C,OAAON,GAASsC,GACpGjB,QAAQC,IAAIY,GACLA,I,8BChDX,WAsDea,IApDQ,SAACxE,GACpB,IAAIiF,GAAmB,EAEvB,OAAQjF,GACJ,IAAK,MACDiF,EAAkB,EAClB,MAEJ,IAAK,MACDA,EAAkB,EAClB,MAEJ,IAAK,MACDA,EAAkB,EAClB,MAEJ,IAAK,QACDA,EAAkB,EAClB,MAEJ,IAAK,SACDA,EAAkB,EAClB,MAEJ,IAAK,MACDA,EAAkB,EAClB,MAEJ,IAAK,eACDA,EAAkB,EAClB,MAEJ,IAAK,cACDA,EAAkB,EAClB,MAEJ,IAAK,eACDA,EAAkB,EAClB,MAEJ,IAAK,YACDA,EAAkB,EAK1B,MAAO,CACHtD,KAAM3B,EACN6D,YAAc1D,YAAc6B,OAAOiD,O,kDCnD3C,8CAkFMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,cAAgB,CACZC,QAAS,OACTC,cAAe,MACfC,WAAY,aACZC,eAAgB,cAEpBC,eAAgB,CACZC,MAAO,MACPC,gBAAiB,QACjBC,MAAO,YACPC,aAAc,EACdC,OAAQ,OACRC,SAAU,QAEdC,aAAc,CACVN,MAAO,UAKEO,IAzFM,SAAC,GAAgH,IAA/G7B,EAA8G,EAA9GA,OAAQ8B,EAAsG,EAAtGA,UAAWC,EAA2F,EAA3FA,SAAUC,EAAiF,EAAjFA,YAAaC,EAAoE,EAApEA,cAAeC,EAAqD,EAArDA,iBAAkBC,EAAmC,EAAnCA,QAC1FC,EAAUvB,IAuChB,OArCAwB,qBAAU,WAENP,EAAUQ,QAAU,IAAIC,UAAU,sBAAuB,QACzD9D,QAAQC,IAAIoD,EAAUQ,SAGtBR,EAAUQ,QAAQE,iBAAiB,QAAQ,SAAUC,GACjDhE,QAAQC,IAAI,kCAIhBoD,EAAUQ,QAAQE,iBAAiB,SAAS,SAAUC,GAClDhE,QAAQC,IAAI,uCAIhBoD,EAAUQ,QAAQE,iBAAiB,WAAW,SAAUC,GAEpDhE,QAAQC,IAAI+D,GAEZA,EAAMC,KAAKC,cAAcC,MAAK,SAACb,GAC3BtD,QAAQC,IAAIH,EAAOpB,KAAK4E,GAAUc,YAEX,iBADvBd,EAAW/B,EAAO8C,YAAYvE,EAAOpB,KAAK4E,KAEtCC,EAAYD,GAEZG,EAAiBH,WAS9B,IAGC,gCACI,uBACA,qBAAKgB,UAAWX,EAAQpB,cAAxB,sBAGCiB,GAAiBA,EAAc7E,QAAU6E,EAAc,IAAMA,EAAc,GAAG7E,OAC3E,cAAC,IAAD,CACI4C,OAAUA,EACVgD,QAAWf,EAAc,GACzBS,KAAQT,EAAc7F,MAAM,GAC5B+F,QAAUA,IAGjB,sBAAKY,UAAWX,EAAQpB,cAAxB,UACO,qBAAK+B,UAAWX,EAAQR,aAAxB,SACK,MAEL,qBAAKmB,UAAWX,EAAQf,eAAxB,SACKU,OAGb,6B,qDC5EZ,wBAsEA,IAAMlB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCkC,UAAY,CACR3B,MAAO,OACP4B,OAAQ,OACRC,QAAS,QAGbC,OAAS,CACL1B,OAAQ,wBAGZ2B,OAAS,CACL3B,OAAQ,uBACR4B,UAAW,UAGfC,WAAY,CACRJ,QAAS,UAGbK,YAAa,CACThC,MAAO,UACPiC,cAAe,YACfC,eAAgB,OAChBC,WAAY,UACZR,QAAS,MACTxB,SAAU,OACViC,WAAY,OACZC,aAAc,MACdnC,OAAQ,sBACRT,QAAS,eACT6C,WAAY,mBAEZ,UAAW,CACPtC,MAAO,OACPmC,WAAY,UACZI,YAAa,UACbD,WAAY,yBAMTE,IArGf,YACC,IADwBhE,EACzB,EADyBA,OAAQgD,EACjC,EADiCA,QAASN,EAC1C,EAD0CA,KAAMP,EAChD,EADgDA,QAEtCC,EAAUvB,IAGVoD,EAASjB,EAAQkB,KAAI,SAACC,EAAK9G,GAC7B,OAAO,oBAAI0F,UAAWX,EAAQgB,OAAvB,SAA0Ce,GAAJ9G,MAG7C+G,EAAS1B,EAAKwB,KAAI,SAACG,EAAKC,GACxB,OAAO,6BACFD,EAAIH,KAAI,SAACC,EAAK5H,GACX,OAAO,oBAAIwG,UAAWX,EAAQiB,OAAvB,SAAyCc,GAAL5H,OAFjC+H,MAoBtB,OACI,wBACIC,YAAa,IACbxB,UAAWX,EAAQa,UAFvB,UAII,gCACI,6BACKgB,MAGT,gCACKG,IAEL,gCACI,qBAAII,QAASxB,EAAQ5F,OAAQ2F,UAAWX,EAAQiB,OAAhD,UACI,wBAAQN,UAAWX,EAAQoB,YAAaiB,QA5BzC,WACX,IAAMC,EAAoB1E,EAAO2E,uBACR,MAArBD,GACAvC,EAASuC,IAyBD,kBAGA,uBAAO3B,UAAWX,EAAQmB,WAA1B,SA5CH,MA6CG,wBAAQR,UAAWX,EAAQoB,YAAaiB,QA1BzC,WACX,IAAMG,EAAgB5E,EAAO6E,mBACR,MAAjBD,GACAzC,EAASyC,IAuBD,4B,qkBCpDdE,EAYF,aAAe,IAAD,0lBAadC,UAAYC,IAAiBC,KAAKC,MAbpB,KAedC,MAAQ,SAACxF,EAAeO,GAIpB,OAHA,cAAI,GAAJ,GAAsB,EACtB,EAAKkF,oBACL,cAAI,GAAJ,GAAsB,QACfrF,YAAgB,EAAMJ,EAAP,YAAa,EAAb,MAAiCO,IAnB7C,KAsBdmF,QAAU,SAAC1F,GACP,OAAO2F,YAAkB3F,IAvBf,KA0Bd4F,QAAU,SAAC5F,GAIP,OAHA,cAAI,GAAJ,GAAsB,EACtB,EAAKyF,oBACL,cAAI,GAAJ,GAAsB,UACf1E,YAAkB,EAAMf,EAAP,YAAa,EAAb,QA9Bd,KAiCdkF,iBAAmB,WACfpG,QAAQC,IAAR,YAAY,EAAZ,OACA,IAAM8G,EAAc,cAAI,GAAJ,GAAoB,EACxC,OAAO,cAAP,MAA4BA,IApClB,KAuCdC,uBAAyB,WACrB,OAAO,cAAI,GAAJ,GAAmBrI,OAAS,GAxCzB,KA2CduH,qBAAuB,WACnB,IAAMa,EAAc,cAAI,GAAJ,GAAoB,EACxC,OAAO,cAAP,MAA4BA,IA7ClB,gDAgDI,SAACE,GACf,kBAAmC,EAAnC,MAAwDA,GAAxD,mBAAOC,EAAP,KAAoBzF,EAApB,KAGA,OAFA,cAAI,GAAJ,GAAsBwF,EAElBC,GAA8B,MAAfzF,EACY,WAAvB,cAAI,GAAJ,GACOQ,YAAkB,EAAD,YAAO,EAAP,kBAAwB,EAAxB,OAEjBX,YAAgB,EAAD,YAAO,EAAP,kBAAwB,EAAxB,OAEJ,MAAfG,EACA,KAEgB,WAAvB,cAAI,GAAJ,GACOQ,YAAkB,EAAD,YAAO,EAAP,kBAAwB,EAAxB,MAA4CR,GAE7DH,YAAgB,EAAD,YAAO,EAAP,kBAAwB,EAAxB,MAA4CG,MAhE5D,KAoEd0F,iBAAmB,WACf,OAAO,cAAP,OArEU,KAwEdC,qBAAuB,WACnB,OAAO,cAAP,OAzEU,KA4EdC,cAAgB,SAACC,GACb,cAAI,GAAJ,GAAoBA,GA7EV,KAgFdC,eAAiB,SAACC,GACd,IAAMC,EAAW/F,YAAe8F,GAChC,OAAmF,GAA/E1H,EAAO4H,QAAQD,EAAS1G,YAAYzD,MAAOD,YAAc6B,QAAQ,IAAI5B,QACrE,cAAI,GAAJ,GAAoBmK,EACb,IAEH,GAtFE,gDAyFC,SAACpJ,GACZ,cAAI,GAAJ,GAAiBA,KA1FP,gDA6FE,SAACqI,GACb,cAAI,GAAJ,GAAkBA,KA9FR,KAiGdiB,aAAe,WACX,OAAO,cAAP,OAlGU,KAqGdC,YAAc,WACV,OAAO,cAAP,OAtGU,KAyGdC,mBAAqB,WACjB,OAAO,cAAI,GAAJ,GAAkBhJ,MA1Gf,KA6Gd6C,eAAiB,WACb,OAAO,cAAP,OA9GU,gDAiHI,SAACuF,GAEf,OAAa,GAATA,EACO,EAAC,EAAM,MACPA,EAAQ,GAAKA,EAAQ,GAAK,cAAI,GAAJ,GAAmBtI,OAC7C,EAAC,EAAO,MAGZ,EAAC,EAAO,cAAI,GAAJ,GAAmBsI,EAAQ,OAzHhC,KA4Hda,cAAgB,WACZ,OAAO,cAAP,OA7HU,KAgIdnB,kBAAoB,WAChB,cAAI,GAAJ,GAAqB,IAjIX,KAoIdoB,eAAiB,SAACC,GACd,cAAI,GAAJ,GAAmBpI,KAAKoI,IArId,KAwIdC,UAAY,SAACC,EAAejK,GACpBA,IACA,cAAI,GAAJ,GAAiBA,GAGK,MAAtBiK,EAAKC,cACL,cAAI,GAAJ,IAAsB,EACO,OAAtBD,EAAKC,gBACZ,cAAI,GAAJ,IAAsB,IAhJhB,KAoJdxG,UAAY,WACR,MAAO,CAAC,cAAD,kBAAiB,EAAjB,QArJG,KAwJd0C,YAAc,SAAC3G,GACX,OAAO0K,YAAe,EAAM1K,EAAP,YAAY,EAAZ,QAxJrB,YAAA+I,KAAA,MAAoB/E,YAAe,OACnC,YAAA+E,KAAA,MAAiB,GACjB,YAAAA,KAAA,MAAiB,EACjB,YAAAA,KAAA,OAAsB,EACtB,YAAAA,KAAA,MAAqB,GACrB,YAAAA,KAAA,OAAqB,EACrB,YAAAA,KAAA,MAAsB,EACtB,YAAAA,KAAA,MAAkB,GAClB,YAAAA,KAAA,MAAsB,QACtB,YAAAA,KAAA,OAA0B,K,iEC9B5B1J,EAASC,EAAQ,IAKRqL,EAHG,SAAC3K,GACf,OAAOwB,OAAOnC,EAAOW,EAAIC,MAAM,EAAG,MCGzB2K,EAAgB,SAAC5K,GAE1B,IAAI6K,EAPiB,SAAC7K,GAEtB,OAAOA,EAAI,GAKD8K,CAAU9K,GAEpB,OAAQ6K,GACJ,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,UAEX,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,eAEX,KAAK,EACD,MAAO,UAEX,KAAK,EACD,MAAO,YAEX,KAAK,EACD,MAAO,QAEX,KAAK,EACD,MAAO,SAEX,KAAK,EACD,MAAO,UAEX,KAAK,GACD,MAAO,UAEX,KAAK,GACD,MAAO,WAEX,KAAK,GACD,MAAO,QAEX,KAAK,GACD,MAAO,QAEX,KAAK,GACD,MAAO,iBAEX,KAAK,GACD,MAAO,gBAEX,KAAK,GACD,MAAO,eAGf,MAAO,W,0DC1DLxL,EAASC,EAAQ,IAOVyL,EAAb,WAII,WAAYxE,GAAe,yBAH3ByE,iBAA4B,EAGF,KAF1BC,UAAqB,GAEK,oBACL1E,EAAK2E,WADA,IACtB,2BAAiC,CAAC,IAAzBC,EAAwB,QAC7B,GAAIA,EAAK,GAAK,IAAK,CACfpC,KAAKiC,iBAAkB,EACvB,MAEJjC,KAAKkC,WAAaG,OAAOC,aAAaF,EAAK,KANzB,+BAJ9B,4CAcI,WACI,MAAO,OAff,KAoBaG,EAAb,WAGI,WAAY/E,GAAe,yBAF3B/G,MAAiB,GAGbuJ,KAAKvJ,MAAQ+G,EAAKgF,iBAJ1B,4CAOI,WACI,MAAO,OARf,KAaaC,EAAb,WAGI,WAAYjF,GAAgB,yBAF5B/G,MAAc,IAAIiM,OAAK,CAAC,KAGpB1C,KAAKvJ,MAAS,IAAIiM,OAAK,CAAC,IAAIC,WAAWnF,KAJ/C,4CAOI,WACI,MAAO,OARf,KAYaoF,EAAb,WAEI,WAAYpF,GAAe,yBAD3B/G,OAAkB,EAEV+G,EAAKtF,QAAUsF,EAAK,GAAK,IACzBwC,KAAKvJ,OAAQ,GAJzB,4CAQI,WACI,OAAOuJ,KAAKvJ,MAAQ,OAAS,YATrC,KAaaoM,EAAb,WACI,WAAYrF,GAAe,oBAD/B,4CAKI,WACI,MAAO,OANf,KAWasF,EAAb,WAGI,WAAYtF,GAAe,yBAF3BuF,MAAQ,GAEkB,KAD1BC,SAAW,GAEPhD,KAAK+C,MAAQtK,OAAOnC,EAAOkH,EAAKtG,MAAM,EAAG,KACzC8I,KAAKgD,SAAWvK,OAAOnC,EAAOkH,EAAKtG,MAAM,KALjD,4CAQI,WACI,MAAO,OATf,KAaa+L,EAAb,WAEI,WAAYzF,GAAe,yBAD3B/G,WAC0B,EACtBuJ,KAAKvJ,MAAQ+G,EAAK0F,aAAa,GAHvC,4CAMI,WACI,MAAO,OAPf,KAWaC,EAAb,WAEI,WAAY3F,GAAe,yBAD3B/G,WAC0B,EACtBuJ,KAAKvJ,MAAQ+G,EAAK4F,YAAY,GAHtC,4CAMI,WACI,MAAO,OAPf,KAsBaC,EAAb,WAGI,WAAY7F,GAAe,yBAF3B/G,MAAiB,EAGbuJ,KAAKvJ,MAAQ+G,EAAK8F,YAAY,GAJtC,4CAOI,WACI,OAAOtD,KAAKvJ,MAAMkH,eAR1B,KAYa4F,EAAb,WAGI,WAAY/F,EAAc/G,GAAc,yBAFxC+M,KAA4B,IAAIxL,MAG5B,IAAMF,EAAI0F,EAAK8F,YAAY,GAC3B9F,EAAOA,EAAKtG,MAAM,GAClB8I,KAAKwD,KAAOxL,MAAMC,KAAK,CAACC,OAAQJ,IAChC,IAAK,IAAIK,EAAI,EAAGA,EAAIL,IAAKK,EAAG,CACxB,IAAIS,EAAQD,YAAc6E,GACb,MAAT5E,IACAoH,KAAKwD,KAAKrL,GAAKsL,EAAYhN,EAAOmC,EAAMA,OACxC4E,EAAOA,EAAKtG,MAAM0B,EAAMA,MAAMV,OAAS,KAXvD,4CAgBI,WACI,OAAO8H,KAAKwD,KAAK7F,eAjBzB,KAqBa+F,EAAb,WAGI,WAAYlG,EAAc/G,GAAc,yBAFxCkN,UAAgD,IAAI3L,MAGhD,kBAA8BvB,EAA9B,GAAOmN,EAAP,KAAiBC,EAAjB,KAEM/L,EAAI0F,EAAK8F,YAAY,GACvBQ,EAAWtG,EAAKtG,MAAM,GAC1B8I,KAAK2D,UAAY3L,MAAMC,KAAK,CAACC,OAAQJ,IACrC,IAAK,IAAIK,EAAI,EAAGA,EAAIL,IAAKK,EAAG,CACxB6H,KAAK2D,UAAUxL,GAAK,CAAC,KAAM2L,GAC3B,IAAIlL,EAAQD,YAAcmL,GAEb,MAATlL,IACAoH,KAAK2D,UAAUxL,GAAG,GAAKsL,EAAYG,EAAUhL,EAAMA,OACnDkL,EAAWA,EAAS5M,MAAM0B,EAAMA,MAAMV,OAAS,IAKtC,OADbU,EAAQD,YAAcmL,MAElB9D,KAAK2D,UAAUxL,GAAG,GAAKsL,EAAYI,EAAWjL,EAAMA,OACpDkL,EAAWA,EAAS5M,MAAM0B,EAAMA,MAAMV,OAAS,KAtB/D,4CA2BI,WAEI,IADA,IAAI6L,EAAe,IACV5L,EAAI,EAAGA,EAAI6H,KAAK2D,UAAUzL,SAAUC,EAAG,CAC5C,kBAAqB6H,KAAK2D,UAAUxL,GAApC,GAAO6L,EAAP,KAAYvN,EAAZ,KAIAsN,IAFyB,MAAPC,EAAcA,EAAIrG,WAAa,QAErB,OADA,MAATlH,EAAgBA,EAAMkH,WAAa,QACJ,KAGtD,OADAoG,EAAeA,EAAaE,QAAQ,MAAM,SApClD,KAyCaC,EAAb,WAGI,WAAY1G,EAAc/G,GAAc,yBAFxC+M,KAA4B,IAAIxL,MAG5B,IAAMF,EAAI0F,EAAK8F,YAAY,GAC3B9F,EAAOA,EAAKtG,MAAM,GAClB8I,KAAKwD,KAAOxL,MAAMC,KAAK,CAACC,OAAQJ,IAChC,IAAK,IAAIK,EAAI,EAAGA,EAAIL,IAAKK,EAAG,CACxB,IAAIS,EAAQD,YAAc6E,GACb,MAAT5E,IACAoH,KAAKwD,KAAKrL,GAAKsL,EAAYhN,EAAOmC,EAAMA,OACxC4E,EAAOA,EAAKtG,MAAM0B,EAAMA,MAAMV,OAAS,KAXvD,4CAgBI,WACI,OAAO8H,KAAKwD,KAAK7F,eAjBzB,KAqEawG,EAAb,WAGI,WAAY3G,EAAc/G,GAAc,yBAFxC2N,MAA6B,IAAIpM,MAG7B,IAAMF,EAAIrB,EAAMyB,OAChB8H,KAAKoE,MAAQpM,MAAMC,KAAK,CAACC,OAAQJ,IACjC,IAAK,IAAIK,EAAI,EAAGA,EAAIL,IAAKK,EAAG,CACxB,IAAIS,EAAQD,YAAc6E,GACb,MAAT5E,IAEAoH,KAAKoE,MAAMjM,GAAKsL,EAAYhN,EAAM0B,GAAIS,EAAMA,OAC5C4E,EAAOA,EAAKtG,MAAM0B,EAAMA,MAAMV,OAAS,KAXvD,4CAgBI,WAEI,IADA,IAAI6L,EAAe,IACV5L,EAAI,EAAGA,EAAI6H,KAAKoE,MAAMlM,SAAUC,EAAG,CACxC,IAAMkM,EAAarE,KAAKoE,MAAMjM,GAG9B4L,IAFkC,MAAdM,EAAqBA,EAAW1G,WAAa,QAEnC,KAGlC,OADAoG,EAAeA,EAAaE,QAAQ,MAAM,SAxBlD,K,uBA6BaK,EAAb,WAGI,WAAY9G,GAAe,oEAFT,KAGd,YAAAwC,KAAA,MAAcuE,YAAU/G,GAJhC,4CAOI,WACI,OAAO,YAAAwC,KAAP,UARR,K,uBAYawE,EAAb,WAGI,WAAYhH,GAAe,oEAFT,KAGd,YAAAwC,KAAA,MAAcxC,EAAKG,SAAS,QAJpC,4CAOI,WACI,OAAO,YAAAqC,KAAP,UARR,KClTM1J,EAASC,EAAQ,IAEVkN,EAAc,SAACgB,EAAWjH,GACnC,IAAMnG,EAAKmB,OAAOlC,EAAOmO,EAAKpN,GAAGR,QAC3BJ,EAAQgO,EAAKhO,MAEnB,OAAQY,GACJ,KAAK,EACD,OAAO,IAAI2K,EAAMxE,GAErB,KAAK,EACD,OAAO,IAAI+E,EAAO/E,GAEtB,KAAK,EACD,OAAO,IAAIiF,EAAKjF,GAEpB,KAAK,EACD,OAAO,IAAIoF,EAAQpF,GAEvB,KAAK,EACD,OAAO,IAAIqF,EAAQrF,GAEvB,KAAK,EACD,OAAO,IAAIsF,EAAQtF,GAEvB,KAAK,EACD,OAAO,IAAIyF,EAAOzF,GAEtB,KAAK,EACD,OAAO,IAAI2F,EAAM3F,GAErB,KAAK,EACD,OAAO,IAAI6F,EAAI7F,GAEnB,KAAK,GACD,OAAO,IAAI8G,EAAK9G,GAEpB,KAAK,GACD,OAAO,IAAIgH,EAAQhH,GAEvB,KAAK,GACD,OAAO,IAAI+F,EAAK/F,EAAM/G,GAE1B,KAAK,GACD,OAAO,IAAIiN,EAAIlG,EAAM/G,GAEzB,KAAK,GACD,OAAO,IAAIyN,EAAI1G,EAAM/G,GAEzB,KAAK,GACD,OAAO,IAAI0N,EAAM3G,EAAM/G,GAG/B,OAAO,MCzCLH,EAASC,EAAQ,IAgMRoL,IAlCQ,SAAC7G,EAAcV,EAAgBsK,GAGlD,IAtCuBzN,EAsCjBiB,EAAS0J,EAAUxH,GAEnBK,EAAOL,EAAOlD,MAAM,EAAG,EAAIsB,OAAON,IAEpCyM,EAAOnM,OAAOlC,EAAOmE,EAAKvD,MAAM,EAAG,KACvC,GAA6B,UAAzB2K,EAAczH,GAAqB,CACnC,OAAQuK,GACJ,KAAK,EACD,MAtKL,GAwKC,KAAK,EAED,OAvKM,SAAC7J,EAAoB7D,GACvC,IAAIK,EAAY,EACZsN,GAAyB,EACzBC,GAAe,EAEbC,EAAgBtM,OAAOlC,EAAOa,YAAYF,GAAKP,MAEjC,EAAhBoO,IACAF,GAAyB,GAET,EAAhBE,IACAD,GAAe,EACftL,QAAQC,IAAI,kBAKhBlC,GAAa,EACb,IAoBIyN,EAAcC,EApBZC,EAAczM,OAAOlC,EAAOa,YAAYF,EAAIC,MAAMI,IAAYZ,MAGpE,GAFAY,GAAa,EAETuN,EAAc,CACd,IAAM7J,EAAcrC,YAAc1B,EAAIC,MAAMI,IACzB,MAAf0D,GACA1D,GAAa0D,EAAYpC,MAAMV,OAAS,EACpC4C,EAAO4F,oBAAsB5F,EAAOyF,yBAA2B,GAC/DzF,EAAOwG,eAAetG,GAE1BF,EAAO8F,cAAc9F,EAAO4F,qBAE5BpJ,GAAa,EAEjBiC,QAAQC,IAAIwB,QAEbzB,QAAQC,IAAIvC,GACZ6D,EAAO8F,cAAc9F,EAAO4F,oBAI3BkE,IACAG,EAAetN,YAAeR,EAAIC,MAAMI,IACxCA,GAAakB,OAAOlC,EAAOyO,EAAa7M,SACxC8M,EAAYvN,YAAeR,EAAIC,MAAMI,IACrCA,GAAakB,OAAOlC,EAAO0O,EAAU9M,UAIzC,IAAIgN,EAAmBlN,MAAMC,KAAK,CAACC,OAAQ+M,IAC3C1L,QAAQC,IAAIyL,GACZ,IAAK,IAAI9M,EAAI,EAAGA,EAAI8M,IAAe9M,EAAG,CAC7ByM,IACDG,EAAetN,YAAeR,EAAIC,MAAMI,IACxCA,GAAakB,OAAOlC,EAAOyO,EAAa7M,OAAOrB,QAAU,EACzDmO,EAAYvN,YAAeR,EAAIC,MAAMI,IACrCA,GAAakB,OAAOlC,EAAO0O,EAAU9M,OAAOrB,QAAU,GAG1D,IAAIsO,EAAa1N,YAAeR,EAAIC,MAAMI,IAE1CA,GAAakB,OAAOlC,EAAO6O,EAAWjN,OAAOrB,QAAU,EACvD,IAAIuO,EAAahO,YAAeH,EAAIC,MAAMI,IAE1C4N,EAAW/M,GAAK,CAACC,KAAM+M,EAAYV,KAAMW,GAEzC9N,GAAa8N,EAAW5N,KAAO,EAGnC,IAAM6N,EAAW7M,OAAOlC,EAAOa,YAAYF,EAAIC,MAAMI,IAAYZ,MACjE6C,QAAQC,IAAI6L,GACZ/N,GAAa,EAEb,IADA,IAAIgO,EAAetN,MAAMC,KAAK,CAACC,OAAQmN,IAC9BlN,EAAI,EAAGA,EAAIkN,IAAYlN,EAAG,CAE/B,IADA,IAAIgH,EAAYnH,MAAMC,KAAK,CAACC,OAAQ+M,IAC3BM,EAAI,EAAGA,EAAIN,IAAeM,EAC/BpG,EAAIoG,GAAK5M,YAAc1B,EAAIC,MAAMI,IAEjCA,GAAa,EACC,MAAV6H,EAAIoG,KACJjO,GAAakB,OAAOlC,EAAO6I,EAAIoG,GAAGrN,OAAOxB,OAGjD4O,EAAKnN,GAAKgH,EAGd,IAAID,EAAiClH,MAAMC,KAAK,CAACC,OAAQmN,EAAW,IAEpEnG,EAAQ,GAAKlH,MAAMC,KAAK,CAACC,OAAQ+M,IACjC,IAAK,IAAIM,EAAI,EAAGA,EAAIN,IAAeM,EAC/BrG,EAAQ,GAAGqG,GAAKL,EAAWK,GAAGnN,KAAKM,OAAOiF,WAI9C,IAAK,IAAIxF,EAAI,EAAGA,GAAKkN,IAAYlN,EAAG,CAChC+G,EAAQ/G,GAAKH,MAAMC,KAAK,CAACC,OAAQ+M,IACjC,IAAK,IAAIM,EAAI,EAAGA,EAAIN,IAAeM,EAAG,CAGlC,IAAMC,EAAe/B,EAAYyB,EAAWK,GAAGd,KAAMa,EAAKnN,EAAI,GAAGoN,GAAG3M,OAGhEsG,EAAQ/G,GAAGoN,GADK,MAAhBC,EACgBA,EAAa7H,WAEb,QAK5B,OAAOuB,EA4DYuG,CAAc3K,EAAQL,EAAKvD,MAAM,EAAGsB,OAAON,KAEtD,KAAK,EACD,OA5Da,SAACjB,EAAcyN,GACxC,IAAMgB,EAAgBjO,YAAeR,GAAKyB,OAAOiF,WAGjD,OAFA+G,EAAYgB,GACK,uBAAyBA,EAyDvBC,CAAqBlL,EAAKvD,MAAM,EAAGsB,OAAON,IAAUwM,GAE/D,KAAK,EACD,OAxDWzN,EAwDcwD,EAAKvD,MAAM,EAAGsB,OAAON,IAvD1DqB,QAAQC,IAAIvC,GACLwB,OAAOnC,EAAOuC,YAAmB5B,GAAK6B,aAAa6E,WAwDlD,KAAK,EACD,OAtDc,SAAC1G,GAC3B,IAAIK,EAAY,EACVsO,EAAanO,YAAeR,GAAKyB,OAAOiF,WAC9CrG,GAAasO,EAAW1N,OAAS,EACjC,IAAM2N,EAASpO,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,WAC3DrG,GAAauO,EAAO3N,OAAS,EAC7B,IAAIG,EAAS,GAEb,GAAc,YAAVwN,EACAxN,EAASZ,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,gBAClD,GAAc,SAAVkI,GAA+B,QAAVA,EAAkB,CAC9C,IAAMC,EAASrO,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,WAC3DrG,GAAawO,EAAO5N,OAAS,EAE7BG,EAASyN,EAAS,IADLrO,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,gBAEtD,GAAc,YAAVkI,GAAkC,aAAVA,EAAuB,CACtD,IAAMjO,EAAWH,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,WAC7DrG,GAAaM,EAASM,OAAS,EAC/B,IAAM6N,EAAMtO,YAAeR,EAAIC,MAAMI,IAAYoB,OAAOiF,WACxDrG,GAAaM,EAASM,OAAS,EAC/B,IAAM8N,EAAOjN,YAAmB9B,EAAIC,MAAMI,IAC1Ce,EAAST,EAAW,IAAMmO,EAC1B,IAAK,IAAI5N,EAAI,EAAGA,EAAI7B,EAAO0P,EAAK9N,OAAOrB,SAAUsB,EAC7CE,GAAU,IAAM2N,EAAK5M,WAAWjB,GAAGO,OAAOiF,WAIlD,OAAOiI,EAAa,IAAMC,EAAS,IAAMxN,EA2BtB4N,CAAsBxL,EAAKvD,MAAM,EAAGsB,OAAON,KAI1D,MAAO,oBAAsBuC,EAAKkD,WAElC,OAAOkE,EAAczH,GAAUK,EAAKkD,a,gECnM7BuI,EANQ,SAAC9L,GACpB,IAAMK,EAAOpB,SAAOC,MAAM,GAE1B,OADAc,EAASf,SAAOqB,OAAO,CAACN,EAAQK,GAAOL,EAAOlC,OAAS,I,QCc3CiO,EAXU,WACtB,IAAI/L,EAAST,cAOb,OANAO,YAAUE,EAAQ,WAClBR,YAAWQ,EAAQ,GACnBb,QAAQC,IAAIY,GACZN,YAAUM,EAAQ,IAClBA,EAAS8L,EAAe9L,GACxBb,QAAQC,IAAIY,GACLA,GCRI0F,IAJU,WACrB,OAAOqG,IAAoBxI,a,+ECWhByI,EAZQ,SAAChM,EAAgBiM,EAAqBnO,GACzD,IAAMuC,EAAOpB,SAAOC,MAAMpB,GAQ1B,OANoB1B,YAAYiC,OAAO4N,EAAYnO,SACvCxB,IAAIqD,KAAKU,EAAM,EAAG,EAAG,GAEjC4L,EAAYtM,KAAKU,EAAM,EAAG,EAAG4L,EAAYnO,QAEzCkC,EAASf,SAAOqB,OAAO,CAACN,EAAQK,KCYrB2F,IAhBW,SAAC3F,GACvB,IAAIL,EAAST,cAEbO,YAAUE,EAAQ,WAClBR,YAAWQ,EAAQ,GAGnB,IAAMiM,EAAchN,SAAOpB,KAAKwC,EAAM,SAChCvC,EAASO,OAAO4N,EAAYnO,OAAS,GAG3C,OAFA4B,YAAUM,EAAQlC,GAClBkC,EAASgM,EAAehM,EAAQiM,EAAa7N,OAAON,M,wGCgBlDyD,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,cAAgB,CACZC,QAAS,OACTC,cAAe,MACfC,WAAY,aACZC,eAAgB,cAEpBC,eAAgB,CACZC,MAAO,MACPC,gBAAiB,QACjBC,MAAO,YACPC,aAAc,EACdC,OAAQ,OACRC,SAAU,QAEdC,aAAc,CACVN,MAAO,UAKAkK,EA/CS,SAAC,GACxB,IAD0BC,EAC3B,EAD2BA,QAEjBrJ,EAAUvB,IACV6H,EAAO+C,EAAQvH,KAAI,SAACwH,EAAGrO,GAAJ,OAAUqO,EAC/B,8BACI,sBAAK3I,UAAWX,EAAQpB,cAAxB,UACI,qBAAK+B,UAAWX,EAAQR,aAAxB,SACK,MAEL,qBAAKmB,UAAWX,EAAQf,eAAxB,SAAyCqK,QALvC,iBAAmBrO,GAQ7B,qBAAK0F,UAAWX,EAAQf,eAAxB,SACK,MADwC,iBAAmBhE,MAIpE,OACI,gCACI,qBAAK0F,UAAWX,EAAQpB,cAAxB,qBAGC0H,EAAKtM,OAAO,QCnBnBuP,EAAQC,sBAA4C,WAAqCC,GAAS,IAA5ClQ,EAA2C,EAA3CA,MAAOiP,EAAoC,EAApCA,aAAckB,EAAsB,EAAtBA,YAEvE1J,EAAUvB,IAEhB,OACI,gCACI,uBACA,sBAAKkC,UAAWX,EAAQpB,cAAxB,sBACc4J,EAAcA,EAAe,IAAM,MAEjD,sBAAK7H,UAAWX,EAAQpB,cAAxB,UACI,qBAAK+B,UAAWX,EAAQR,aAAxB,SACK,MAEL,0BACImB,UAAWX,EAAQf,eACnB0K,aAAa,GACbpQ,MAAOA,EACPqQ,SAAUF,EACVD,IAAKA,EACLtP,GAAG,2BAOjBsE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,cAAgB,CACZC,QAAS,OACTC,cAAe,MACfC,WAAY,aACZC,eAAgB,cAEpBC,eAAgB,CACZC,MAAO,MACPC,gBAAiB,QACjBC,MAAO,YACPC,aAAc,EACdC,OAAQ,OACRC,SAAU,QAEdC,aAAc,CACVN,MAAO,UAIAqK,I,gBC8NT9K,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCkL,kBAAmB,CACf/I,OAAQ,QACR5B,MAAO,OACPC,gBAAiB,QACjBC,MAAO,YACPG,SAAU,QAEdX,cAAgB,CACZC,QAAS,OACTC,cAAe,MACfC,WAAY,aACZC,eAAgB,cAEpBC,eAAgB,CACZC,MAAO,MACPC,gBAAiB,QACjBC,MAAO,YACPC,aAAc,EACdC,OAAQ,OACRC,SAAU,QAEdC,aAAc,CACVN,MAAO,MAEX4K,KAAO,CACHC,UAAW,OAIJC,EA3SE,WACb,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,IAAnD,mBAAsBG,GAAtB,WACA,EAA4CH,mBAAwB,IAApE,mBAAOI,EAAP,KAAuBC,EAAvB,KACA,EAAkDL,mBAAS,GAA3D,mBAAOM,EAAP,KAA0BC,EAA1B,KACA,EAA4CP,mBAAiB,IAA7D,mBAAOQ,EAAP,KAAuBC,EAAvB,KACA,EAA0CT,mBAA+B,CAAC,KAA1E,mBAAOpK,EAAP,KAAsBC,EAAtB,KACA,EAAgCmK,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KACA,EAAsCX,mBAAiB,GAAvD,mBAAOY,EAAP,KAAoBC,EAApB,KAEMC,EAAcC,iBAA4B,MAE1CC,EAAgBD,mBACtB,EAA4Bf,mBAAS,IAAIvH,KAAzC,mBAAO9E,EAAP,KACMoC,GADN,KACgBvB,KAOVyM,EAAa,WACff,EAAW,IAEPY,GAAeA,EAAY7K,SAAW6K,EAAY7K,QAAQiL,gBACvDJ,EAAY7K,QAAQkL,eAEvBL,EAAY7K,QAAQiL,eAAiB,EACrCJ,EAAY7K,QAAQkL,aAAe,EACnCL,EAAY7K,QAAQmL,kBAAkB,EAAG,GACzCN,EAAY7K,QAAQoL,UAKtBvL,EAAU,SAACwL,GACbN,EAAU/K,QAAQsL,KAAKD,IAiN3B,OAxMAtL,qBAAU,WACN,IAAIwL,EAAkBC,OAAOC,aAAaC,QAAQ,kBAC9CC,EAAsBH,OAAOI,eAAeF,QAAQ,eAMxD,GAJmC,kBAAxBC,GACPjO,EAAOgG,eAAeiI,GAGK,kBAApBJ,EAA8B,CACrC,IAAIM,EAAwBC,KAAKC,MAAMR,GACvCnB,EAAkByB,GAClBvB,EAAqBuB,EAAsB/Q,aAE3CsP,EAAkB,IAClBE,EAAqB,KAE1B,IAGHvK,qBAAU,WACNyL,OAAOC,aAAaO,QAAQ,iBAAkBF,KAAK3E,UAAUgD,IAC7DqB,OAAOI,eAAeI,QAAQ,cAAetO,EAAOsG,wBACrD,CAACmG,EAAgBzM,IAGpBqC,qBAAU,WACN,IAAMkM,EAAW,SAAC9L,GACd,OAAQA,EAAMoH,MAEV,IAAK,QACD2C,EAAiBF,GACjB,IAAMkC,EAAmBlC,EAAQmC,MAAM,KAEvC,GAAoC,QAAhCnC,EAAQoC,cAAcC,OAEtB3B,GAAY,GACZN,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAE5C,GAAoC,SAAhCkP,EAAQoC,cAAcC,OAE3B3B,GAAY,GACZN,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAE5C,GAAoC,QAAhCkP,EAAQoC,cAAcC,OAC/B,CAGI,IAAME,EAAa,CACf,CAAC,KAAM,YAAS,WAAY,aAAS,0BAAsB,oBAC3D,CAAC,IAAK,0BAAsB,MAAO,kBAAmB,mBAAoB,mBAC1E,CAAC,IAAK,cAAe,4BAAwB,gBAAiB,kBAAmB,iBACjF,CAAC,IAAK,iBAAkB,4BAAwB,2BAAuB,2BAAuB,4BAC9F,CAAC,IAAK,kBAAmB,cAAe,gBAAiB,wBAAoB,iBAC7E,CAAC,IAAK,sBAAkB,MAAO,kBAAmB,mBAAoB,mBACtE,CAAC,IAAK,YAAa,4BAAwB,gBAAiB,kBAAmB,iBAC/E,CAAC,IAAK,aAAc,4BAAwB,2BAAuB,2BAAuB,4BAC1F,CAAC,IAAK,aAAc,cAAe,gBAAiB,wBAAoB,kBAE5EpQ,QAAQC,IAAI,mBAAoBmQ,GAEhCnC,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACAV,EAAqBH,EAAerP,OAAS,GAC7C0P,EAAkB,IAClB5K,EAAiB2M,QAEhB,GAAoC,SAAhCvC,EAAQoC,cAAcC,OAE3BrB,IACAR,EAAkB,IAClBF,EAAqB,GACrBF,EAAkB,IAClBF,EAAiB,IACjBtK,EAAiB,SACd,GAAoC,aAAhCoK,EAAQoC,cAAcC,OAC7B7B,EAAkB,IAvFhB,WAClB,IAAMgC,EAAQ,IAAIC,YAClB1B,EAAU/K,QAAQsL,KAAKkB,EAAME,OAAOhP,EAAO+E,cAsF3BkK,GACAvC,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAAIoR,EAAiBpR,OAAS,GAA4B,UAAvBoR,EAAiB,GAAgB,CAGvE/P,QAAQC,IAAI,wBAAyBuO,EAAauB,GAElD,IAAMU,EAAiBV,EAAiB,GAAGG,OACpB,QAAnBO,EAEAhC,EAAe,GAES,OAAnBgC,GAA2C,IAAhBjC,EAEhCC,ECxJQ,ID0JHD,EAAc,GAAKkC,SAASD,GAAkB,GAEnDhC,EAAeiC,SAASD,IAG5BxC,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DQ,EAAkB,IAClBQ,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAAIoR,EAAiBpR,OAAS,GAA4B,WAAvBoR,EAAiB,GAAiB,CAExE,IAAMY,EAAa9C,EAAQlQ,MAAMoS,EAAiB,GAAGpR,QAAQuR,OAC7DlQ,QAAQC,IAAI,aAAc0Q,GAM1BjN,EAAQnC,EAAOqF,QAAQ+J,IACvB1C,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACAR,EAAkB,IAClB5K,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAAIoR,EAAiBpR,OAAS,GAA4B,WAAvBoR,EAAiB,GAAiB,CAExE,IAAMa,EAAcb,EAAiBpS,MAAM,GAC3CqC,QAAQC,IAAI,aAAc2Q,GAM1BlN,EAAQnC,EAAOuF,QAAQ8J,EAAY,KACnC3C,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACAR,EAAkB,IAClB5K,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAA+B,GAA3BoR,EAAiBpR,QAAsC,eAAvBoR,EAAiB,GACxD1B,EAAkB,gCAAkC9M,EAAOG,iBAAmB,KAC9EuM,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAA+B,GAA3BoR,EAAiBpR,QAAsC,eAAvBoR,EAAiB,GACxD1B,EAAgE,GAA9C9M,EAAOgG,eAAewI,EAAiB,IACrD,6CAA+CA,EAAiB,GAAK,IACrE,6BACJ9B,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,QAC1C,GAAIkP,GAAWA,EAAQlP,OAC9B,CACI,GAAI2P,GAAyC,MAA7BT,EAAQqC,OAAOvS,OAAO,GAClC,MAEJ0Q,EAAkB,IAClB3K,EAAQnC,EAAOmF,MAAMmH,IACrBI,GAAkB,SAACkC,GAAD,4BAAkCA,GAAlC,CAA6CtC,OAC/DgB,IACApL,EAAiB,IACjB0K,EAAqBH,EAAerP,OAAS,GAEjD,MAGJ,IAAK,YACGuP,EAAoBF,EAAerP,SAAW2P,IAC9CH,GAAqB,SAAAgC,GAAS,OAAIA,EAAY,KAG1CjC,EAAoB,GAAKF,EAAerP,OACxCkQ,IAEAf,EAAWE,EAAeE,EAAoB,KAGtD,MAGJ,IAAK,UACGA,EAAoB,IAAMI,IAC1BH,GAAqB,SAAAgC,GAAS,OAAIA,EAAY,KAC9CrC,EAAWE,EAAeE,EAAoB,OAQ9D,OAHA2C,SAAS9M,iBAAiB,UAAW+L,GAG9B,WACHe,SAASC,oBAAoB,UAAWhB,MAE7C,CAACjC,EAASG,EAAgBE,EAAmB3M,IAG5C,sBAAK+C,UAAWX,EAAQ6J,kBAAxB,UACI,cAAC,EAAD,CACIR,QAASgB,IAEb,cAAC,EAAD,CACI9Q,MAAO2Q,EACP1B,aAAc5K,EAAOqG,cACrByF,YA7OU,SAACrJ,GACnB8J,EAAW9J,EAAMsI,OAAOpP,MAAMyB,QAA2C,KAAjCqF,EAAMsI,OAAOpP,MAAM,GAAGgT,OAC1DlM,EAAMsI,OAAOpP,MAAMS,MAAM,GAAKqG,EAAMsI,OAAOpP,QA4OvCkQ,IAAKsB,IAER,cAACtL,EAAA,EAAD,CACGC,UAAWuL,EACXtL,SAAU8K,EACV7K,YAAa8K,EACb7K,cAAeA,EACfC,iBAAkBA,EAClBlC,OAAQA,EACRmC,QAASA,QEvQVqN,MAPf,WAEI,OACI,cAAC,EAAD,KCARC,SACI,8BACI,cAAC,EAAD,MAEJH,SAASI,eAAe,W","file":"static/js/main.0d066761.chunk.js","sourcesContent":["import { Buffer } from 'buffer';\nimport {Byte, Int, Long, Short, String, StringList, Option, Bytes, ShortBytes} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const numberToLong = (value: bigint) : Long => {\n    return {long: bigIntToBuffer(value, 8)}\n}\n\nexport const numberToInt = (value : bigint) : Int => {\n    return {int: bigIntToBuffer(value, 4)}\n}\n\nexport const numberToShort = (value : bigint) : Short => {\n    return {short: bigIntToBuffer(value, 2)}\n}\n\nexport const numberToByte = (value : bigint) : Byte => {\n    return {byte: bigIntToBuffer(value, 1)}\n}\n\nexport const bufferToShort = (buf : Buffer) : Short => {\n    return {short : buf.slice(0, 2)}\n}\n\nexport const bufferToInt = (buf : Buffer) : Int => {\n    return {int : buf.slice(0, 4)}\n}\n\nexport const bufferToOption = (buf : Buffer) : Option  =>  {\n    const id = bufferToShort(buf);\n    let stringLen = 2\n    const idVal = format(id.short)\n    let size = 0\n    let value = null\n\n    if (idVal == 0) {\n        value = bufferToString(buf.slice(stringLen))\n    } else if (idVal == 32 || idVal == 34) {\n        value = bufferToOption(buf.slice(stringLen))\n        size += value.size + 2\n    } else if (idVal == 33) {\n        const fst = bufferToOption(buf.slice(stringLen))\n        stringLen += fst.size\n        const snd = (bufferToOption(buf.slice(stringLen)))\n        size += fst.size + snd.size + 4\n        value = [fst, snd]\n\n    } else if (idVal == 48) {\n        const keyspace = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const udt = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n\n        stringLen += 2\n\n        let udtList : any[] = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            udtList[i].name =  bufferToString(buf.slice(stringLen));\n            stringLen += format(udtList[i].name.length)\n            udtList[i].option = bufferToOption(buf.slice(stringLen))\n            stringLen += udtList[i].option.size\n        }\n\n        value = [keyspace, udt, udtList]\n\n    } else if (idVal == 49) {\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n    \n        stringLen += 2\n        size += 2\n\n        let optionList : any[] = Array.from({length: n})\n       \n        for (let i = 0; i < n; ++i ) {\n            optionList[i] = bufferToOption(buf.slice(stringLen))\n            stringLen += optionList[i].size + 2\n            size += optionList[i].size + 2\n        }\n        value = optionList\n    }\n    \n    return {id: id, value : value, size: size}\n}\n\nexport const bufferToString = (buf : Buffer) : String => {\n    const len = Number(format(buf.slice(0, 2)))\n  \n    return {length: numberToShort(BigInt(len)), string: buf.slice(2, len + 2)}\n}\n\nexport const bufferToBytes = (buf : Buffer) : Bytes | null => {\n    const len = Number(format(buf.slice(0, 4)))\n    if (len < 0) {\n        return null;\n    }\n    return {length: numberToInt(BigInt(len)), bytes: buf.slice(4, len + 4)}\n}\n\nexport const bufferToShortBytes = (buf : Buffer) : ShortBytes => {\n    let len = Number(format(buf.slice(0, 2)))\n    if (len < 0) {\n        len = 0\n    }\n    return {length: numberToShort(BigInt(len)), shortBytes: buf.slice(2, len + 2)}\n}\n\nexport const optionToReadableString = (id : Short, byt: Bytes) : string => {\n    console.log(id)\n    const idVal = format(id.short)\n\n    let result = \"\";\n    let buf = byt.bytes\n\n    // Ascii\n    if (idVal == 1) {\n        for (let i = 0; i < format(buf.length); ++i) {\n            if (buf[i] > 127) {\n                // Some error handling\n            } else {\n                result += buf[i].toString()\n            }\n        }\n        return result;\n    }\n    // Bigint\n    else if (idVal == 2) {\n        return buf.readBigInt64BE(0).toString();\n    }\n    // Blob\n    else if (idVal == 3) {\n        return buf.toString()\n    }\n    // Boolean\n    else if (idVal == 4) {\n        if (buf[0] == 0) {\n            return \"False\"\n        } else {\n            return \"True\"\n        }\n    }\n    // Date\n    else if (idVal == 5) {\n\n    }\n    // Decimal\n    else if (idVal == 6) {\n        return buf.readFloatLE(0).toString();\n    }\n    // Double\n    else if (idVal == 7) {\n        return buf.readDoubleBE(0).toString();\n    }\n    // Float\n    else if (idVal == 8) {\n\n    }\n    // Int\n    else if (idVal == 12) {\n        return buf.toString()\n    }\n    return \"\"\n}\n\nexport const bufferToStringList = (buf : Buffer) : StringList => {\n    const len = format(buf.slice(0, 2))\n    let parsed = 2\n    let result : String[] = []\n    for (let i = 0; i < len; ++i) {\n        const newItem = bufferToString(buf.slice(parsed))\n        parsed += format(newItem.length) + 2\n        result.push(newItem)\n    }\n    return  {length: numberToShort(len), stringList: result}\n}\n\nexport const bigIntToBuffer = (value : bigint, size? : number) : Buffer => {\n    if (!size) {\n        console.log(value)\n        let tempSize = 1, mul = 256n\n        while (value >= mul) {\n            mul *= 256n\n            tempSize += 1\n        }\n        size = tempSize\n        console.log(size)\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        console.log(buf, buf.length)\n        return buf;\n    } else {\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        return buf;\n    }\n}\n","import {Buffer} from 'buffer';\n\nconst Frame= () : Buffer => {\n    return Buffer.alloc(9);\n}\nexport default Frame;","import { Buffer } from 'buffer';\n\nconst setVersion = (buf : Buffer, version: number) : Buffer => {\n    // Version is at position 0 in the frame\n    buf[0] = version;\n    return buf;\n}\nexport default setVersion;","import { Buffer } from 'buffer';\nimport {numberToInt} from \"./conversions\";\n\nconst setLength = (buf : Buffer, length: bigint) : Buffer => {\n    const bodySize = numberToInt(length);\n    bodySize.int.copy(buf, 5, 0, 4);\n    return buf;\n}\nexport default setLength;","const getMessageCode = (messageType: String) : number => {\n    switch (messageType) {\n        case \"ERROR\": {\n            return 0;\n        }\n        case \"STARTUP\": {\n            return 1;\n        }\n        case \"READY\": {\n            return 2;\n        }\n        case \"AUTHENTICATE\": {\n            return 3;\n        }\n        case \"OPTIONS\": {\n            return 5;\n        }\n        case \"SUPPORTED\": {\n            return 6;\n        }\n        case \"QUERY\": {\n            return 7;\n        }\n        case \"RESULT\": {\n            return 8;\n        }\n        case \"PREPARE\": {\n            return 9;\n        }\n        case \"EXECUTE\": {\n            return 10;\n        }\n        case \"REGISTER\": {\n            return 11;\n        }\n        case \"EVENT\": {\n            return 12;\n        }\n        case \"BATCH\": {\n            return 13;\n        }\n        case \"AUTH_CHALLENGE\": {\n            return 14;\n        }\n        case \"AUTH_RESPONSE\": {\n            return 15;\n        }\n        case \"AUTH_SUCCESS\": {\n            return 16;\n        }\n    }\n    return -1;\n}\nexport default getMessageCode;","import { Buffer } from 'buffer';\nimport getMessageCode from \"./getMessageCode\";\n\nconst setOpcode = (buf : Buffer, messageType: String) : void => {\n    // Opcode is at position 4 in the frame\n    buf[4] = getMessageCode(messageType);\n}\nexport default setOpcode;","import {Buffer} from \"buffer\";\nimport {numberToInt, numberToShort} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addQueryBody = (buffer: Buffer, queryBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const querySize = numberToInt(BigInt(queryBody.length));\n    querySize.int.copy(body, 0, 0, 4);\n   \n    queryBody.copy(body, 4, 0, queryBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, queryBody.length + 4, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, queryBody.length + 6, 0, 1);\n    extraData.copy(body, queryBody.length + 7, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addQueryBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport {Bytes, Consistency} from \"./types\";\nimport setLength from \"./setLength\";\nimport addQueryBody from \"./addQueryBody\";\nimport {numberToByte, numberToInt} from \"./conversions\";\nimport { CQLDriver } from \"../Driver\";\n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getQueryMessage = (driver: CQLDriver, body: string, setLastQuery : any, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(body)\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n    setOpcode(buffer, \"QUERY\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        \n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length - 1)).int, pagingState.bytes])\n    }\n    \n    // Basic query - long string(int) + consistency(short) + flag(byte) + possible data    \n    const queryBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(queryBody.length + 7 + extraData.length)\n    setLength(buffer, length)\n    buffer = addQueryBody(buffer, queryBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    console.log(buffer)\n    return buffer;\n}\n\n\n\nexport default getQueryMessage;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addExecuteBody = (buffer: Buffer, executeBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n   \n    executeBody.copy(body, 0, 0, executeBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, executeBody.length, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, executeBody.length + 2, 0, 1);\n    extraData.copy(body, executeBody.length + 3, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addExecuteBody;\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport {bigIntToBuffer, numberToByte, numberToInt, numberToShort} from \"./conversions\";\nimport addExecuteBody from \"./addExecuteBody\";\nimport { CQLDriver } from \"../Driver\";\nimport { Bytes } from \"./types\";\nconst format = require(\"biguint-format\");\n\n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getExecuteMessage = (driver : CQLDriver, queryId: string, setLastQuery : any, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(queryId)\n\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n\n    setOpcode(buffer, \"EXECUTE\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n\n    // Execute message + short bytes(short)*/\n    \n    const value = bigIntToBuffer(BigInt(queryId))\n    console.log(value)\n    const executeBody = Buffer.concat([numberToShort(BigInt(value.length)).short, value])\n    const length = BigInt(executeBody.length + 3 + extraData.length)\n    setLength(buffer, length)\n    buffer = addExecuteBody(buffer, executeBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    console.log(buffer)\n    return buffer;\n}\n\n\n\nexport default getExecuteMessage;","import {Consistency} from \"../utils/types\";\nimport {numberToShort} from \"../utils/conversions\";\n\nconst getConsistency = (value : string) : Consistency => {\n    let consistencyCode = -1\n\n    switch (value) {\n        case \"ANY\": {\n            consistencyCode = 0;\n            break;\n        }\n        case \"ONE\": {\n            consistencyCode = 1;\n            break;\n        }\n        case \"TWO\": {\n            consistencyCode = 2;\n            break;\n        }\n        case \"THREE\": {\n            consistencyCode = 3;\n            break;\n        }\n        case \"QUORUM\": {\n            consistencyCode = 4;\n            break;\n        }\n        case \"ALL\": {\n            consistencyCode = 5;\n            break;\n        }\n        case \"LOCAL_QUORUM\": {\n            consistencyCode = 6;\n            break;\n        }\n        case \"EACH_QUORUM\": {\n            consistencyCode = 7;\n            break;\n        }\n        case \"LOCAL_SERIAL\": {\n            consistencyCode = 8;\n            break;\n        }\n        case \"LOCAL_ONE\": {\n            consistencyCode = 9;\n            break;\n        }\n    }\n\n    return {\n        name: value,\n        consistency : numberToShort(BigInt(consistencyCode))\n    };\n}\n\nexport default getConsistency;","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TableDisplayer from \"./TableDisplayer\";\n\ninterface ServerResponseProps {\n    driver: any;\n    websocket: any;\n    response: string;\n    setResponse: (s: string) => void;\n    tableResponse: string[][];\n    setTableResponse: (s: string[][]) => void;\n    sendMsg: (s : Buffer) => void; \n}\n\nconst ServerResponse = ({driver, websocket, response, setResponse, tableResponse, setTableResponse, sendMsg} : ServerResponseProps) => {\n    const classes = useStyles();\n\n    useEffect(() => {\n        // Create WebSocket connection.\n        websocket.current = new WebSocket('ws://localhost:8222', \"echo\");\n        console.log(websocket.current)\n\n        // Connection opened\n        websocket.current.addEventListener('open', function (event : any) {\n            console.log('Connected to the WS Server!')\n        });\n\n        // Connection closed\n        websocket.current.addEventListener('close', function (event: any) {\n            console.log('Disconnected from the WS Server!')\n        });\n\n        // Listen for messages\n        websocket.current.addEventListener('message', function (event: any) {\n\n            console.log(event)\n          \n            event.data.arrayBuffer().then((response: any) => {\n                console.log(Buffer.from(response).toString())\n                response = driver.getResponse(Buffer.from(response))\n                if (typeof response == \"string\") {\n                    setResponse(response)\n                } else {\n                    setTableResponse(response)\n                }\n            })\n\n            // TODO: Parsing response for table or just string and then executing respective setState.\n\n           // console.log('Message from server ', Buffer.from(event.data.arrayBuffer()));\n           //console.log('Message from server ', event.data.json());\n        });\n    }, []);\n\n    return (\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Response\n            </div>\n            {tableResponse && tableResponse.length && tableResponse[0] && tableResponse[0].length ?\n                <TableDisplayer\n                    driver = {driver}\n                    headers = {tableResponse[0]}\n                    data = {tableResponse.slice(1)}\n                    sendMsg ={sendMsg}\n                />\n            :   \n            (<div className={classes.lineContainer}>\n                    <div className={classes.terminalSign}>\n                        {'>'}\n                    </div>\n                    <div className={classes.inputContainer}>\n                        {response}\n                    </div>\n                </div>)}\n            <hr/>\n        </div>\n    )\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport  default  ServerResponse;","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { CQLDriver } from \"../CQL-Driver/src/Driver\";\nimport Terminal from \"./Terminal\";\n\ninterface TableProps {\n    driver : CQLDriver;\n    headers: string[]; \n    data: string[][];\n    sendMsg: any;\n}\n\nfunction TableDisplayer({driver, headers, data, sendMsg} : TableProps)\n{\n    const classes = useStyles();\n\n    const page = 107; // mock page number\n    const header = headers.map((ele, i) => {\n        return <th className={classes.cellTh} key = {i}>{ele}</th>\n    })\n\n    let content =data.map((row, rowId) => {\n        return <tr key = {rowId}>\n            {row.map((ele, id) => {\n                return <td className={classes.cellTd} key={id}>{ele}</td>\n            })}\n        </tr>\n    })\n\n    const onBack = () => {\n        const previousPageQuery = driver.getPreviousPageQuery();\n        if (previousPageQuery != null) {\n            sendMsg (previousPageQuery)\n        }\n    }    \n    const onNext = () => {        \n        const nextPageQuery = driver.getNextPageQuery();\n        if (nextPageQuery != null) {\n            sendMsg (nextPageQuery)\n        }\n    }\n\n    return (\n        <table\n            cellSpacing={\"0\"}\n            className={classes.cellTable} \n        >\n            <thead>\n                <tr>\n                    {header}\n                </tr>\n            </thead>\n            <tbody>\n                {content}\n            </tbody>\n            <tfoot>\n                <td colSpan={headers.length} className={classes.cellTd} >\n                    <button className={classes.tableButton} onClick={onBack}>\n                        Back\n                    </button>\n                    <label className={classes.tableLabel}>{page}</label>\n                    <button className={classes.tableButton} onClick={onNext}>\n                        Next\n                    </button>\n                </td>\n            </tfoot>\n        </table>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    cellTable:  {\n        width: \"auto\",\n        height: \"auto\",\n        padding: \"10px\"\n    },\n\n    cellTh:  {\n        border: \"1px solid lightblue;\"\n    },\n\n    cellTd:  {\n        border: \"1px solid lightblue;\",\n        textAlign: \"center\"\n    },\n\n    tableLabel: {\n        padding: \"0 15px\"\n    },\n\n    tableButton: {\n        color: \"#494949\",\n        textTransform: \"uppercase\",\n        textDecoration: \"none\",\n        background: \"#ffffff\",\n        padding: \"5px\",\n        fontSize: \"15px\",\n        fontWeight: 'bold',\n        borderRadius: \"5px\",\n        border: \"3px solid lightblue\",\n        display: \"inline-block\",\n        transition: \"all 0.4s ease 0s\",\n\n        '&:hover': {\n            color: \"navy\",\n            background: \"#f6b93b\",\n            borderColor: \"#f6b93b\",\n            transition: \"all 0.4s ease 0s\",\n        }\n    },\n\n}));\n\nexport default TableDisplayer;\n","import handshakeMessage from \"./functions/Handshake\"\nimport {Bytes, Consistency} from \"./utils/types\";\nimport getConsistency from \"./functions/Consistency\";\nimport {numberToShort} from \"./utils/conversions\";\nimport getQueryMessage from \"./utils/getQueryMessage\";\nimport getQueryResult from \"./utils/getQueryResult\";\nimport getPrepareMessage from \"./utils/getPrepareMessage\";\nimport getExecuteMessage from \"./utils/getExecuteMessage\";\n\nclass CQLDriver {\n    #consistency: Consistency\n    #keyspace : string\n    #pageSize: number\n    #pagingEnabled : boolean\n    #pagingStates : Array<Bytes>\n    #pagingIndex : number\n    #lastQuery: string\n    #lastQueryType : string\n    #expectedIndex : number\n    #expectingNewQuery : boolean\n\n    constructor() {\n        this.#consistency = getConsistency(\"ONE\");\n        this.#keyspace = \"\"\n        this.#pageSize = 6\n        this.#pagingEnabled = true\n        this.#pagingStates = []\n        this.#pagingIndex = -1\n        this.#expectedIndex = 0\n        this.#lastQuery = \"\"\n        this.#lastQueryType = \"QUERY\"\n        this.#expectingNewQuery = true\n    }\n\n    handshake = handshakeMessage.bind(this)\n\n    query = (body : string, pagingState? : Bytes) : Buffer => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"QUERY\"\n        return getQueryMessage(this, body, this.#setLastQuery, pagingState);\n    }\n\n    prepare = (body : string) : Buffer => {\n        return getPrepareMessage(body)\n    }\n\n    execute = (body : string) : Buffer => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"EXECUTE\"\n        return getExecuteMessage(this, body, this.#setLastQuery);\n    }\n\n    getNextPageQuery = () : Buffer | null => {\n        console.log(this.#pagingStates)\n        const wantedIndex = this.#pagingIndex + 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    getNumberOfLoadedPages = () : number => {\n        return this.#pagingStates.length + 1\n    }\n\n    getPreviousPageQuery = () : Buffer | null => {\n        const wantedIndex = this.#pagingIndex - 1\n        return this.#getQueryPageAt(wantedIndex)\n    }\n\n    #getQueryPageAt = (index: number) : Buffer | null => {\n        const [isFirstPage, pagingState] = this.#getPagingState(index)\n        this.#expectedIndex = index\n\n        if (isFirstPage && pagingState == null) {\n            if (this.#lastQueryType == \"EXECUTE\") {\n                return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery);\n            } else {\n                return getQueryMessage(this, this.#lastQuery, this.#setLastQuery);\n            }\n        } else if (pagingState == null) {\n            return null\n        }\n        if (this.#lastQueryType == \"EXECUTE\") {\n            return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery, pagingState);\n        } else {\n            return getQueryMessage(this, this.#lastQuery, this.#setLastQuery, pagingState);\n        }\n    }\n\n    getExpectedIndex = () : number => {\n        return this.#expectedIndex\n    }\n\n    getExpectingNewQuery = () : boolean => {\n        return this.#expectingNewQuery\n    }\n\n    setPageNumber = (page: number) : void => {\n        this.#pagingIndex = page\n    }\n\n    setConsistency = (s : string) => {\n        const received = getConsistency(s);\n        if (Buffer.compare(received.consistency.short, numberToShort(BigInt(-1)).short) != 0) {\n            this.#consistency = received;\n            return 0\n        }\n        return -1\n    }\n\n    #setKeyspace = (keyspace : string) => {\n        this.#keyspace = keyspace\n    }\n\n    #setLastQuery = (query : string) : void => {\n        this.#lastQuery = query;\n    }\n\n    getLastQuery = () : string => {\n        return this.#lastQuery\n    }\n\n    getKeyspace = () : string => {\n        return this.#keyspace\n    }\n\n    getConsistencyName = () : string => {\n        return this.#consistency.name\n    }\n\n    getConsistency = () : Consistency => {\n        return this.#consistency\n    }\n\n    #getPagingState = (index: number) :  [boolean, Bytes | null]  => {\n       \n        if (index == 0) {\n            return [true, null]\n        } else if (index < 0 || index - 1 >= this.#pagingStates.length) {\n            return [false, null]\n        }\n\n        return [false, this.#pagingStates[index - 1]]\n    }\n\n    getPageNumber = () : number => {\n        return this.#pagingIndex\n    }\n\n    clearPagingStates = () : void => {\n        this.#pagingStates = []\n    }\n\n    addPagingState = (nextPagingState : Bytes) : void => {\n        this.#pagingStates.push(nextPagingState)\n    }\n\n    setPaging = (mode : string, size? : number) => {\n        if (size) {\n            this.#pageSize = size;\n        }\n        \n        if (mode.toUpperCase() == \"ON\") {\n            this.#pagingEnabled = true\n        } else if (mode.toUpperCase() == \"OFF\") {\n            this.#pagingEnabled = false\n        } \n    }\n\n    getPaging = () : [number, boolean] => {\n        return [this.#pageSize, this.#pagingEnabled]\n    }\n\n    getResponse = (buf: Buffer) => {\n        return getQueryResult(this, buf, this.#setKeyspace)\n    }\n}\n\nexport {CQLDriver}","import { Buffer } from 'buffer';\nconst format = require(\"biguint-format\");\n\nconst getLength = (buf : Buffer) : bigint => {\n    return BigInt(format(buf.slice(5, 9)));\n}\nexport default getLength;","import { Buffer } from 'buffer';\n\nexport const getOpcode = (buf : Buffer) : number => {\n    // Opcode is at position 4 in the frame\n    return buf[4]\n}\n\nexport const getOpcodeName = (buf : Buffer) : string => {\n    // Opcode is at position 4 in the frame\n    var num = getOpcode(buf)\n\n    switch (num) {\n        case 0: {\n            return \"ERROR\";\n        }\n        case 1: {\n            return \"STARTUP\";\n        }\n        case 2: {\n            return \"READY\";\n        }\n        case 3: {\n            return \"AUTHENTICATE\";\n        }\n        case 5: {\n            return \"OPTIONS\";\n        }\n        case 6: {\n            return \"SUPPORTED\";\n        }\n        case 7: {\n            return \"QUERY\";\n        }\n        case 8: {\n            return \"RESULT\";\n        }\n        case 9: {\n            return \"PREPARE\";\n        }\n        case 10: {\n            return \"EXECUTE\";\n        }\n        case 11: {\n            return \"REGISTER\";\n        }\n        case 12: {\n            return \"EVENT\";\n        }\n        case 13: {\n            return \"BATCH\";\n        }\n        case 14: {\n            return \"AUTH_CHALLENGE\";\n        }\n        case 15: {\n            return \"AUTH_RESPONSE\";\n        }\n        case 16: {\n            return \"AUTH_SUCCESS\";\n        }\n    }\n    return \"INVALID\";\n}","import {Blob, Buffer} from 'buffer';\nimport {bufferToBytes, bufferToInt, numberToInt} from \"../utils/conversions\";\nimport {getTypeFrom} from \"./typeFactory\";\nconst format = require(\"biguint-format\");\nimport {stringify} from 'uuid'\n\nexport interface type {\n    toString() : string;\n}\n\nexport class ASCII implements type {\n    validationError : boolean = false;\n    asciiText : string = \"\"\n\n    constructor(data: Buffer) {\n        for (let pair of data.entries()) {\n            if (pair[1] > 127) {\n                this.validationError = true;\n                break;\n            }\n            this.asciiText += String.fromCharCode(pair[1])\n        }\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// 8 Byte signed long\nexport class BIGINT implements type {\n    value : bigint = 0n\n\n    constructor(data: Buffer) {\n        this.value = data.readBigInt64BE();\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// Blob is just a sequence of bytes\nexport class BLOB implements type {\n    value: Blob = new Blob([\"\"]);\n     \n    constructor(data : Buffer) {\n        this.value =  new Blob([new Uint8Array(data)])\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class BOOLEAN implements type {\n    value : boolean = false\n    constructor(data: Buffer) {\n        if (data.length && data[0] > 0) {\n            this.value = true;\n        }\n    }\n\n    toString() {\n        return this.value ? \"True\" : \"False\"\n    }\n}\n\nexport class COUNTER implements type {\n    constructor(data: Buffer) {\n\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\n// Number represented as unscaled * 10 ^ scale\nexport class DECIMAL implements type {\n    scale = 0n\n    unscaled = 0n\n    constructor(data: Buffer) {\n        this.scale = BigInt(format(data.slice(0, 4)))\n        this.unscaled = BigInt(format(data.slice(4)))\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class DOUBLE implements type {\n    value : number\n    constructor(data: Buffer) {\n        this.value = data.readDoubleBE(0)\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class FLOAT implements type {\n    value : number\n    constructor(data: Buffer) {\n        this.value = data.readFloatBE(0)\n    }\n\n    toString() {\n        return \"\"\n    }\n}\nexport class INET implements type {\n    address : Buffer = Buffer.from(\"\")\n\n    constructor(data: Buffer) {\n        this.address = data\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class INT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt32BE(0)\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n}\n\nexport class LIST implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = data.readInt32BE(0)\n        data = data.slice(4)\n        this.list = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                this.list[i] = getTypeFrom(value, bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n}\n\nexport class MAP implements type {\n    container : Array<[type | null, type | null]> = new Array<[type | null, type | null]>()\n\n    constructor(data: Buffer, value : any) {\n        const [firstVal, secondVal] = value\n        //console.log(firstVal, secondVal)\n        const n = data.readInt32BE(0)\n        let dataPart = data.slice(4)\n        this.container = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            this.container[i] = [null, dataPart]\n            let bytes = bufferToBytes(dataPart);\n        \n            if (bytes != null) {\n                this.container[i][0] = getTypeFrom(firstVal, bytes.bytes);\n                dataPart = dataPart.slice(bytes.bytes.length + 4)\n \n            }\n            \n            bytes = bufferToBytes(dataPart);\n            if (bytes != null) {\n                this.container[i][1] = getTypeFrom(secondVal, bytes.bytes);\n                dataPart = dataPart.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"{\"\n        for (let i = 0; i < this.container.length; ++i) {\n            const [key, value] = this.container[i]\n            //if (key != null) {console.log(key.toString())}\n            const keyString = key != null ? key.toString() : \"null\"\n            const valueString =value != null ? value.toString() : \"null\"\n            resultString += keyString + \" : \" + valueString + \", \"\n        }\n        resultString = resultString.replace(/..$/,\"}\")\n        return resultString\n    }\n}\n\nexport class SET implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = data.readInt32BE(0)\n        data = data.slice(4)\n        this.list = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                this.list[i] = getTypeFrom(value, bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n}\n\nexport class SMALLINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt16BE()\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nclass TEXT implements type {\n   #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = data.toString('utf8')\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nclass TIME implements type {\n    toString() {\n        return \"\"\n    }\n}\n\nclass TIMESTAMP implements type {\n    toString() {\n        return \"\"\n    }\n}\n\nclass TINYINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer) {\n        this.value = data.readInt8()\n    }\n\n    toString() {\n        return \"\"\n    }\n}\n\nexport class TUPLE implements type {\n    tuple : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer, value : any) {\n        const n = value.length\n        this.tuple = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            let bytes = bufferToBytes(data);\n            if (bytes != null) {\n                //console.log(value[i])\n                this.tuple[i] = getTypeFrom(value[i], bytes.bytes);\n                data = data.slice(bytes.bytes.length + 4)\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"(\"\n        for (let i = 0; i < this.tuple.length; ++i) {\n            const tupleValue = this.tuple[i]\n            const stringValue = tupleValue != null ? tupleValue.toString() : \"null\"\n           \n            resultString += stringValue + \", \"\n        }\n        resultString = resultString.replace(/..$/,\")\")\n        return resultString\n    }\n}\n\nexport class UUID implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = stringify(data)\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nexport class VARCHAR implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer) {\n        this.#value = data.toString('utf8')\n    }\n\n    toString() {\n        return this.#value\n    }\n}\n\nexport class VARINT implements type {\n    toString() {\n        return \"\"\n    }\n}","import { updateNonNullExpression } from \"typescript\";\nimport {ASCII, BIGINT, BLOB, BOOLEAN, COUNTER, DECIMAL, DOUBLE, FLOAT,\n        SET, INT, type, LIST, MAP, VARCHAR, UUID, TUPLE} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const getTypeFrom = (type: any, data: Buffer) : type | null =>  {\n    const id = Number(format(type.id.short))\n    const value = type.value\n\n    switch (id) {\n        case 1: {\n            return new ASCII(data);\n        }\n        case 2: {\n            return new BIGINT(data);\n        }\n        case 3: {\n            return new BLOB(data);\n        }\n        case 4: {\n            return new BOOLEAN(data)\n        }\n        case 5: {\n            return new COUNTER(data)\n        }\n        case 6: {\n            return new DECIMAL(data)\n        }\n        case 7: {\n            return new DOUBLE(data)\n        }\n        case 8: {\n            return new FLOAT(data)\n        }\n        case 9: {\n            return new INT(data)\n        }\n        case 12: {\n            return new UUID(data)\n        }\n        case 13: {\n            return new VARCHAR(data)\n        }\n        case 32 : {\n            return new LIST(data, value)\n        }\n        case 33: {\n            return new MAP(data, value)\n        }\n        case 34: {\n            return new SET(data, value)\n        }\n        case 49: {\n            return new TUPLE(data, value)\n        }\n    }\n    return null;\n}","import {Buffer} from \"buffer\";\nimport {\n    bufferToBytes,\n    bufferToInt,\n    bufferToOption,\n    bufferToShortBytes,\n    bufferToString,\n    bufferToStringList,\n    optionToReadableString\n} from \"./conversions\";\nimport getLength from \"./getLength\";\nimport { getOpcodeName } from \"./getOpcode\";\nimport {type} from \"../cql-types/types\";\nimport { getTypeFrom } from \"../cql-types/typeFactory\";\nimport { CQLDriver } from \"../Driver\";\nconst format = require(\"biguint-format\");\n\nconst getVoidResult = () : string => {\n    return \"\"\n}\n\nconst getRowsResult = (driver : CQLDriver, buf : Buffer) : string  | Array<Array<string>> => {\n    let stringLen = 0\n    let globalTableSpecPresent = false\n    let hasMorePages = false\n    let noMetaData = false\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    if (metaDataFlags & 2) {\n        hasMorePages = true\n        console.log(\"wincej page'y\")\n    }\n    if (metaDataFlags & 4) {\n        noMetaData = true\n    }\n    stringLen += 4\n    const columnCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    stringLen += 4\n\n    if (hasMorePages) {\n        const pagingState = bufferToBytes(buf.slice(stringLen))\n        if (pagingState != null) {\n            stringLen += pagingState.bytes.length + 4;\n            if (driver.getExpectedIndex() == driver.getNumberOfLoadedPages() - 1) {\n                driver.addPagingState(pagingState)\n            }\n            driver.setPageNumber(driver.getExpectedIndex())\n        } else {\n            stringLen += 4\n        }\n        console.log(pagingState)\n    } else {\n       console.log(buf)\n       driver.setPageNumber(driver.getExpectedIndex())\n    }\n\n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(keySpaceName.length))\n        tableName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(tableName.length))\n    }\n    \n\n    let columnVars : any = Array.from({length: columnCount})\n    console.log(columnCount)\n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(keySpaceName.length.short)) + 2\n            tableName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(tableName.length.short)) + 2\n        }\n        \n        let columnName = bufferToString(buf.slice(stringLen))\n        //console.log(columnName.string.toString())\n        stringLen += Number(format(columnName.length.short)) + 2\n        let columnType = bufferToOption(buf.slice(stringLen))\n        //console.log(format(columnType.id.short))\n        columnVars[i] = {name: columnName, type: columnType}\n        //console.log(columnType)\n        stringLen += columnType.size + 2\n    }\n    \n    const rowCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    console.log(rowCount)\n    stringLen += 4\n    let rows : any[] = Array.from({length: rowCount})\n    for (let i = 0; i < rowCount; ++i) {\n        let row : any = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            row[j] = bufferToBytes(buf.slice(stringLen))\n            //console.log(row[j])\n            stringLen += 4\n            if (row[j] != null) {\n                stringLen += Number(format(row[j].length.int))\n            }\n        }\n        rows[i] = row\n    }\n   \n    let content : Array<Array<string>> = Array.from({length: rowCount + 1})\n  \n    content[0] = Array.from({length: columnCount})\n    for (let j = 0; j < columnCount; ++j) {\n        content[0][j] = columnVars[j].name.string.toString()\n    }\n    \n    //console.log(rowCount, columnCount)\n    for (let i = 1; i <= rowCount; ++i) {\n        content[i] = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            //console.log(format(columnVars[j].type.id.short))\n            //console.log(rows[i - 1][j].bytes)\n            const receivedType = getTypeFrom(columnVars[j].type, rows[i - 1][j].bytes)\n            //content[i] = \n            if (receivedType != null) {\n                content[i][j] = receivedType.toString()\n            } else {\n                content[i][j] = \"null\"\n            }\n        }\n    }\n\n    return content\n}\n\nconst getSetKeyspaceResult = (buf : Buffer, setKeyspace : (arg0: string) => void) : string => {\n    const keyspaceName =  bufferToString(buf).string.toString()\n    setKeyspace(keyspaceName)\n    const response = \"Changed keyspace to \" + keyspaceName\n    return response\n}\n\nconst getPreparedResult = (buf : Buffer) : string => {\n    console.log(buf)\n    return BigInt(format(bufferToShortBytes(buf).shortBytes)).toString()\n}\n\nconst getSchemaChangeResult = (buf : Buffer) : string => {\n    let stringLen = 0\n    const changeType = bufferToString(buf).string.toString()\n    stringLen += changeType.length + 2\n    const target = bufferToString(buf.slice(stringLen)).string.toString()\n    stringLen += target.length + 2\n    let option = \"\"\n\n    if (target == \"KEYSPACE\") {\n        option = bufferToString(buf.slice(stringLen)).string.toString()\n    } else if (target == \"TABLE\" || target == \"TYPE\") {\n        const object = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += object.length + 2\n        const name = bufferToString(buf.slice(stringLen)).string.toString()\n        option = object + \" \" + name\n    } else if (target == \"FUNCTION\" || target == \"AGGREGATE\") {\n        const keyspace = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const fun = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const args = bufferToStringList(buf.slice(stringLen))\n        option = keyspace + \" \" + fun\n        for (let i = 0; i < format(args.length.short); ++i) {\n            option += \" \" + args.stringList[i].string.toString()\n        }\n    }\n\n    return changeType + \" \" + target + \" \" + option\n}\n\nconst getQueryResult = (driver : any, buffer: Buffer, setKeyspace: any) : string | Array<Array<string>> => {\n\n    //console.log(buffer)\n    const length = getLength(buffer)\n    //console.log(length)\n    const body = buffer.slice(9, 9 + Number(length));\n\n    let code = Number(format(body.slice(0, 4)))\n    if (getOpcodeName(buffer) == \"RESULT\") {\n        switch (code) {\n            case 1: {\n                return getVoidResult();\n            }\n            case 2: {\n                //return \"Rows\";\n                return getRowsResult(driver, body.slice(4, Number(length)))\n            }\n            case 3: {\n                return getSetKeyspaceResult(body.slice(4, Number(length)), setKeyspace);\n            }\n            case 4: {\n                return getPreparedResult(body.slice(4, Number(length)));\n            }\n            case 5: {\n                return getSchemaChangeResult(body.slice(4, Number(length)));\n            }\n        }\n\n        return \"Invalid body code\" + body.toString()\n    } else {\n        return getOpcodeName(buffer) + body.toString();\n    }\n}\n\nexport default getQueryResult;","import {Buffer} from \"buffer\";\n\nconst addStartupBody = (buffer: Buffer) : Buffer => {\n    const body = Buffer.alloc(2);\n    buffer = Buffer.concat([buffer, body], buffer.length + 2);\n    return buffer\n}\n\nexport default addStartupBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport addStartupBody from \"./addStartupBody\";\nimport setLength from \"./setLength\";\n\nconst getStartupMessage = () : Buffer => {\n    let buffer = Frame();\n    setOpcode(buffer, \"STARTUP\");\n    setVersion(buffer, 4);\n    console.log(buffer)\n    setLength(buffer, 2n)\n    buffer = addStartupBody(buffer);\n    console.log(buffer)\n    return buffer;\n}\n\nexport default  getStartupMessage;","import getStartupMessage from \"../utils/getStartupMessage\";\n\n\nconst handshakeMessage = () : string => {\n    return getStartupMessage().toString();\n}\n\nexport default handshakeMessage;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\n\nconst addPrepareBody = (buffer: Buffer, prepareBody: Buffer, length : number) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const prepareSize = numberToInt(BigInt(prepareBody.length));\n    prepareSize.int.copy(body, 0, 0, 4);\n   \n    prepareBody.copy(body, 4, 0, prepareBody.length);\n  \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addPrepareBody;","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport addPrepareBody from \"./addPrepareBody\";\n\nconst getPrepareMessage = (body: string) : Buffer => {\n    let buffer = Frame();\n\n    setOpcode(buffer, \"PREPARE\");\n    setVersion(buffer, 4);\n\n    // Prepare message + long string(int)  \n    const prepareBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(prepareBody.length + 4)\n    setLength(buffer, length)\n    buffer = addPrepareBody(buffer, prepareBody, Number(length))\n    return buffer;\n}\n\n\n\nexport default getPrepareMessage;","import {makeStyles} from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ninterface TerminalHistoryProp {\n  history: string[];\n}\n\nconst TerminalHistory = ({ history } : TerminalHistoryProp) : JSX.Element =>\n{\n    const classes = useStyles();\n    const list = history.map((e, i) => e ?\n        <div key={\"history-upper-\" + i}>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <div className={classes.inputContainer}>{e}</div>\n            </div>\n        </div> :\n        <div className={classes.inputContainer} key={\"history-lower-\" + i}>\n            {'> '}\n        </div>)\n\n    return (\n        <div>\n            <div className={classes.lineContainer}>\n                History\n            </div>\n            {list.slice(-10)}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport default TerminalHistory","import React, { forwardRef } from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ninterface InputProps {\n    value: string;\n    keyspaceName: string;\n    changeValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst Input = forwardRef<HTMLTextAreaElement, InputProps>(({value, keyspaceName, changeValue}, ref) => {\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Input: ~/{keyspaceName}{keyspaceName ? \"/\" : \"\"}\n            </div>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <textarea\n                    className={classes.inputContainer}\n                    defaultValue=\"\"\n                    value={value}\n                    onChange={changeValue}\n                    ref={ref}\n                    id=\"inputTextArea\"\n                />\n            </div>\n        </div>\n    );\n});\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\nexport default Input;","import React, {useEffect, useState, useRef} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\n\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Input from \"./Input\";\nimport ServerResponse from \"./ServerResponse\";\nimport {CQLDriver} from \"../CQL-Driver/src/Driver\";\nimport {DEFAULT_PAGING_VALUE} from \"../consts\"\n\nconst Terminal = () => {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n    const [serverResponse, setServerResponse] = useState<string>(\"\");\n    const [tableResponse, setTableResponse] = useState<Array<Array<string>>>([[]]);\n    const [editMode, setEditMode] = useState(false);\n    const [pagingValue, setPagingValue] = useState<Number>(0); // 0 = OFF , Positive value > ON, assuming 40 or smth as default value for paging on\n\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n    const webSocket:any = useRef();\n    const [driver, setDriver] = useState(new CQLDriver());\n    const classes = useStyles();\n\n    const changeCommand = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommand(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    } \n\n    const clearInput = () => {\n        setCommand(\"\");\n\n        if (textAreaRef && textAreaRef.current && textAreaRef.current.selectionStart \n            && textAreaRef.current.selectionEnd)\n        {\n            textAreaRef.current.selectionStart = 0;\n            textAreaRef.current.selectionEnd = 0;\n            textAreaRef.current.setSelectionRange(0, 0)\n            textAreaRef.current.focus();\n        }\n    }\n\n    // Send a msg to the websocket\n    const sendMsg = (msg : Buffer) => {\n        webSocket.current.send(msg);\n    }\n\n    const sendHandshake = () => {\n        const coder = new TextEncoder()\n        webSocket.current.send(coder.encode(driver.handshake()));\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n        let receivedConsistency = window.sessionStorage.getItem('consistency');\n\n        if (typeof receivedConsistency === \"string\") {\n            driver.setConsistency(receivedConsistency)\n        }\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n        window.sessionStorage.setItem('consistency', driver.getConsistencyName())\n    }, [commandHistory, driver]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    const tokenizedCommand = command.split(' ')\n\n                    if (command.toLowerCase().trim() == \"long\")\n                    {\n                        setEditMode(true)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    else if (command.toLowerCase().trim() == \"short\")\n                    {\n                        setEditMode(false)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1)\n                    }\n                    else if (command.toLowerCase().trim() == \"mock\") // Mock data\n                    {\n\n                        // TODO Temporary mock table with data\n                        const mock_table = [\n                            [\"id\", \"Imię\" , \"Urodzony\",\t\"Zmarł\", \"Początek panowania\", \"Koniec panowania\"],\n                            [\"0\", \"Bolesław I Chrobry\", \"967\", \"17 czerwca 1025\", \"18 kwietnia 1025\", \"17 czerwca 1025\"],\n                            [\"1\", \"Jan Matejko\", \"14 października 1257\", \"8 lutego 1296\", \"26 czerwca 1295\",\t\"8 lutego 1296\"],\n                            [\"2\", \"August III Sus\", \"17 października 1696\", \"5 października 1763\", \"5 października 1733\", \"5 października 1763\"],\n                            [\"3\", \"August II Mocny\", \"2 maja 1670\", \"1 lutego 1733\", \"15 września 1697\", \"1 lutego 1733\"],\n                            [\"4\", \"Bolesław Drugi\", \"967\", \"17 czerwca 1025\", \"18 kwietnia 1025\", \"17 czerwca 1025\"],\n                            [\"5\", \"Jan Drugi\", \"14 października 1257\", \"8 lutego 1296\", \"26 czerwca 1295\",\t\"8 lutego 1296\"],\n                            [\"6\", \"August 2.0\", \"17 października 1696\", \"5 października 1763\", \"5 października 1733\", \"5 października 1763\"],\n                            [\"7\", \"August 3.0\", \"2 maja 1670\", \"1 lutego 1733\", \"15 września 1697\", \"1 lutego 1733\"],\n                        ]\n                        console.log(\"Using mock table\", mock_table)\n\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setPositionInHistory(commandHistory.length + 1)\n                        setServerResponse(\"\")\n                        setTableResponse(mock_table)\n                    }\n                    else if (command.toLowerCase().trim() == \"clear\")\n                    {\n                        clearInput();\n                        setServerResponse(\"\");\n                        setPositionInHistory(0);\n                        setCommandHistory([]);\n                        setCommandResult(\"\");\n                        setTableResponse([]);\n                    } else if (command.toLowerCase().trim() == \"handshake\") {\n                        setServerResponse(\"\")\n                        sendHandshake();\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PAGING\") {\n                        // Rest of arguments are ignored - we can change it for required precise 2 arguemnts\n\n                        console.log(\"Setting paging from: \", pagingValue, tokenizedCommand)\n\n                        const newPagingValue = tokenizedCommand[1].trim();\n                        if (newPagingValue === \"OFF\")\n                        {\n                            setPagingValue(0)\n                        }\n                        else if (newPagingValue === \"ON\" && pagingValue === 0)\n                        {\n                            setPagingValue(DEFAULT_PAGING_VALUE)\n                        }\n                        else if (pagingValue > 0 && parseInt(newPagingValue) > 0)\n                        {\n                            setPagingValue(parseInt(newPagingValue))\n                        }\n\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setServerResponse(\"\")\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PREPARE\") {\n\n                        const prepareArg = command.slice(tokenizedCommand[0].length).trim()\n                        console.log(\"Preparing \", prepareArg)\n\n                        // Tu jakies wysłanie tego\n\n\n                        // Tu jakis odbiór\n                        sendMsg(driver.prepare(prepareArg))\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse(\"\")\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"EXECUTE\") {\n                        \n                        const executeArgs = tokenizedCommand.slice(1);\n                        console.log(\"Executing \", executeArgs)\n\n                        // Tu jakies wysłanie tego\n\n\n                        // Tu jakis odbiór\n                        sendMsg(driver.execute(executeArgs[0]))\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse(\"\")\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 1 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(\"Current consistency level is \" + driver.getConsistency() + \".\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 2 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse(driver.setConsistency(tokenizedCommand[1]) == 0 ?\n                            \"Successfully changed consistency level to \" + tokenizedCommand[1] + \".\" :\n                            \"Invalid consistency level\")\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (command && command.length)\n                    {\n                        if (editMode && command.trim().slice(-1) !== ';') // Commands are to end with semicolon\n                            break;\n\n                        setServerResponse(\"\")\n                        sendMsg(driver.query(command));\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length && !editMode) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            clearInput();\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0 && !editMode) {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory, driver]);\n\n    return (\n        <div className={classes.terminalContainer}>\n            <TerminalHistory\n                history={commandHistory}\n            />\n            <Input \n                value={command} \n                keyspaceName={driver.getKeyspace()} \n                changeValue={changeCommand}\n                ref={textAreaRef}\n            />\n             <ServerResponse\n                websocket={webSocket}\n                response={serverResponse}\n                setResponse={setServerResponse}\n                tableResponse={tableResponse}\n                setTableResponse={setTableResponse}\n                driver={driver}\n                sendMsg={sendMsg}\n            />\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    terminalContainer: {\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        fontSize: \"24px\",\n    },\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"black\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n    line : {\n        marginTop: 0,\n    }\n}));\n\nexport default Terminal;\n","\nexport const DEFAULT_PAGING_VALUE = 40;\n","import Terminal from \"./components/Terminal\";\nimport './index.css';\nfunction App() {\n\n    return (\n        <Terminal/>\n    );\n}\n\nexport default App;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}