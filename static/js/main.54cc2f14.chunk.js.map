{"version":3,"sources":["CQL-Driver/src/utils/conversions.ts","CQL-Driver/src/utils/setLength.ts","CQL-Driver/src/utils/FrameTemplate.ts","CQL-Driver/src/utils/setVersion.ts","CQL-Driver/src/utils/getMessageCode.ts","CQL-Driver/src/utils/setOpcode.ts","CQL-Driver/src/utils/getLength.ts","CQL-Driver/src/cql-types/types.ts","CQL-Driver/src/cql-types/typeFactory.ts","CQL-Driver/src/utils/addQueryBody.ts","CQL-Driver/src/utils/getQueryMessage.ts","CQL-Driver/src/utils/addExecuteBody.ts","CQL-Driver/src/utils/getExecuteMessage.ts","CQL-Driver/src/functions/Consistency.ts","CQL-Driver/src/utils/getOpcode.ts","CQL-Driver/src/utils/getConsistencyName.ts","CQL-Driver/src/utils/extractErrorMessage.ts","CQL-Driver/src/utils/getQueryResult.ts","CQL-Driver/src/Driver.ts","CQL-Driver/src/utils/getAuthenticationMessage.ts","CQL-Driver/src/utils/addStartupBody.ts","CQL-Driver/src/utils/getStartupMessage.ts","CQL-Driver/src/functions/Handshake.ts","CQL-Driver/src/utils/addPrepareBody.ts","CQL-Driver/src/utils/getPrepareMessage.ts","assets/logo.webp","components/TerminalHistory.tsx","consts.js","components/LaunchForm.tsx","components/Input.tsx","components/TableDisplayer.tsx","components/ServerResponse.tsx","components/Terminal.tsx","App.tsx","index.tsx"],"names":["format","require","numberToInt","value","int","bigIntToBuffer","numberToShort","short","numberToByte","byte","bufferToShort","buf","slice","bufferToInt","bufferToOption","id","stringLen","idVal","size","bufferToString","fst","snd","keyspace","udt","n","udtList","Array","from","length","i","name","option","optionList","len","Number","BigInt","string","bufferToBytes","readInt32BE","bytes","bufferToShortBytes","shortBytes","bufferToStringList","parsed","result","newItem","push","stringList","stringToValue","textValue","Buffer","typeVal","type","getTypeFrom","toCQL","console","log","concat","tokensToValues","types","values","results","alloc","tempSize","mul","setLength","copy","Frame","setVersion","version","getMessageCode","messageType","setOpcode","getLength","ASCII","data","validationError","asciiText","entries","pair","this","String","fromCharCode","BIGINT","readBigInt64BE","toString","BLOB","BOOLEAN","DECIMAL","scale","unscaled","parts","split","DOUBLE","readDoubleBE","writeDoubleBE","FLOAT","readFloatBE","writeFloatBE","INET","address","join","INT","parseInt","writeInt32BE","LIST","list","el","MAP","container","firstVal","secondVal","dataPart","resultString","key","replace","el1","el2","SET","SMALLINT","readInt16BE","writeInt16BE","TIME","Math","pow","DATE","Date","readUInt32BE","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","writeUInt32BE","TIMESTAMP","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","floor","TINYINT","readInt8","writeInt8","TUPLE","tuple","tupleValue","UUID","stringify","parse","VARCHAR","addQueryBody","buffer","queryBody","consistency","flag","extraData","body","PageSizeFlagValue","NextPageFlagValue","getQueryMessage","driver","setLastQuery","pagingState","getConsistency","getPaging","pageSize","pagingEnabled","flagValue","addExecuteBody","executeBody","ValuesFlag","getExecuteMessage","queryId","bindValues","bindTypes","consistencyCode","getOpcodeName","num","getOpcode","getConsistencyName","consistencyName","getUnavialableExceptionMessage","errorBody","required","alive","extractErrorMessage","messageBody","errorCode","getProtocolErrorMessage","getAuthenticationErrorMessage","getOverloadedMessage","getIsBootstrappingMessage","getTruncateErrorMessage","position","received","blockFor","writeType","message","getWriteTimeoutMessage","dataPresent","getReadTimeoutMessage","numFailures","getReadFailureMessage","fun","argTypes","getFunctionFailureMessage","getWriteFailureMessage","getSyntaxErrorMessage","getUnautorizedMessage","getInvalidMessage","getConfigErrorMessage","table","getAlreadyExistsMessage","getUnpreparedMessage","getQueryResult","setKeyspace","addPreparedStatement","setLastBody","setLastHeader","code","globalTableSpecPresent","hasMorePages","metaDataFlags","keySpaceName","tableName","columnCount","getExpectedIndex","getNumberOfLoadedPages","addPagingState","setPageNumber","columnVars","columnName","columnType","rowCount","rows","row","j","content","receivedType","getRowsResult","keyspaceName","getSetKeyspaceResult","idBuffer","pkCount","columnValues","getPreparedResult","changeType","target","object","args","getSchemaChangeResult","CQLDriver","handshake","handshakeMessage","bind","authenticate","login","passwd","getAuthenticationMessage","set","recreate","adress","port","close","isBrowser","WebSocket","WWebSocket","waitForFlag","condition","a","Promise","resolve","reject","interval","setInterval","clearInterval","setTimeout","isWebReady","readyState","getResponse","ws","msg","send","connect","setResponse","setTableResponse","user","addEventListener","event","coder","TextEncoder","isBuffer","Blob","arrayBuffer","then","response","encode","isReady","endWebsocket","query","clearPagingStates","prepare","getPrepareMessage","execute","get","undefined","getNextPageQuery","wantedIndex","queryPage","hasPreviousPage","getPageNumber","hasNextPage","getPreviousPageQuery","index","isFirstPage","getExpectingNewQuery","page","setConsistency","s","compare","getLastQuery","getKeyspace","nextPagingState","setPaging","mode","toUpperCase","Map","username","password","usr","pwd","writeInt32LE","addStartupBody","getStartupMessage","addPrepareBody","prepareBody","useStyles","makeStyles","theme","lineContainer","display","flexDirection","alignItems","justifyContent","inputContainer","width","color","outlineWidth","border","fontSize","terminalSign","TerminalHistory","history","classes","map","e","className","DEFUALT_ADDRESS","DEFAULT_PORT","blurredBackground","height","backgroundSize","backgroundColor","opacity","margin","marginTop","padding","borderRadius","paddingBottom","element","marginBottom","styledInput","launchPadButton","errorDisplayer","LaunchForm","setAddress","setPort","setLogin","setPassword","setFormPassed","connectUser","reauthorisationMode","authorise","loadingMode","errorMsg","setErrorMsg","speed","strokeWidth","onSubmit","preventDefault","defaultValue","onChange","trim","placeholder","Input","forwardRef","ref","changeValue","cellTable","cellTh","cellTd","textAlign","tableLabel","tableButton","textTransform","textDecoration","background","fontWeight","transition","borderColor","boxShadow","tableRoller","overflowX","TableDisplayer","headers","useState","header","ele","rowId","React","back","setDisableOnBack","next","setDisableOnNext","setDisable","cellSpacing","colSpan","disabled","onClick","errorStruct","errorTag","ServerResponse","errorType","websocket","tableResponse","terminalContainer","line","Terminal","command","setCommand","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","serverResponse","setServerResponse","wrappedSetServerReponse","elem","setLoadingMode","setReauthorisationMode","setPanelErrorMsg","editMode","setEditMode","textAreaRef","useRef","webSocket","isFormPassed","panelErrorMsg","clearInput","current","selectionStart","selectionEnd","setSelectionRange","focus","sendConnect","sleep","ms","catch","useEffect","receivedHistory","window","localStorage","getItem","receivedConsistency","sessionStorage","parsedReceivedHistory","JSON","setItem","listener","tokenizedCommand","toLowerCase","prevState","newPagingValue","newPagingMode","prepareArg","executeArgs","document","removeEventListener","logo","default","src","style","right","bottom","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.54cc2f14.chunk.js","sourcesContent":["import { Buffer } from 'buffer';\nimport {Byte, Int, Long, Short, String, StringList, Option, Bytes, ShortBytes} from \"./types\";\nconst format = require(\"biguint-format\");\nimport {parse} from 'uuid'\nimport { getTypeFrom } from '../cql-types/typeFactory';\n\nexport const numberToLong = (value: bigint) : Long => {\n    return {long: bigIntToBuffer(value, 8)}\n}\n\nexport const numberToInt = (value : bigint) : Int => {\n    return {int: bigIntToBuffer(value, 4)}\n}\n\nexport const numberToShort = (value : bigint) : Short => {\n    return {short: bigIntToBuffer(value, 2)}\n}\n\nexport const numberToByte = (value : bigint) : Byte => {\n    return {byte: bigIntToBuffer(value, 1)}\n}\n\nexport const bufferToShort = (buf : Buffer) : Short => {\n    return {short : buf.slice(0, 2)}\n}\n\nexport const bufferToInt = (buf : Buffer) : Int => {\n    return {int : buf.slice(0, 4)}\n}\n\nexport const bufferToOption = (buf : Buffer) : Option  =>  {\n    const id = bufferToShort(buf);\n    let stringLen = 2\n    const idVal = format(id.short)\n    let size = 0\n    let value = null\n\n    if (idVal == 0) {\n        value = bufferToString(buf.slice(stringLen))\n    } else if (idVal == 32 || idVal == 34) {\n        value = bufferToOption(buf.slice(stringLen))\n        size += value.size + 2\n    } else if (idVal == 33) {\n        const fst = bufferToOption(buf.slice(stringLen))\n        stringLen += fst.size\n        const snd = (bufferToOption(buf.slice(stringLen)))\n        size += fst.size + snd.size + 4\n        value = [fst, snd]\n\n    } else if (idVal == 48) {\n        const keyspace = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const udt = bufferToString(buf.slice(stringLen))\n        stringLen += 2\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n\n        stringLen += 2\n\n        let udtList : any[] = Array.from({length: n})\n        for (let i = 0; i < n; ++i) {\n            udtList[i].name =  bufferToString(buf.slice(stringLen));\n            stringLen += format(udtList[i].name.length)\n            udtList[i].option = bufferToOption(buf.slice(stringLen))\n            stringLen += udtList[i].option.size\n        }\n\n        value = [keyspace, udt, udtList]\n\n    } else if (idVal == 49) {\n        const n = format(bufferToShort(buf.slice(stringLen)).short)\n    \n        stringLen += 2\n        size += 2\n\n        let optionList : any[] = Array.from({length: n})\n       \n        for (let i = 0; i < n; ++i ) {\n            optionList[i] = bufferToOption(buf.slice(stringLen))\n            stringLen += optionList[i].size + 2\n            size += optionList[i].size + 2\n        }\n        value = optionList\n    }\n    \n    return {id: id, value : value, size: size}\n}\n\nexport const bufferToString = (buf : Buffer) : String => {\n    const len = Number(format(buf.slice(0, 2)))\n    return {length: numberToShort(BigInt(len)), string: buf.slice(2, len + 2)}\n}\n\nexport const bufferToBytes = (buf : Buffer) : Bytes | null => {\n    const len = buf.readInt32BE(0)\n    if (len < 0) {\n        return null;\n    }\n    return {length: numberToInt(BigInt(len)), bytes: buf.slice(4, len + 4)}\n}\n\nexport const bufferToShortBytes = (buf : Buffer) : ShortBytes => {\n    let len = Number(format(buf.slice(0, 2)))\n    if (len < 0) {\n        len = 0\n    }\n    return {length: numberToShort(BigInt(len)), shortBytes: buf.slice(2, len + 2)}\n}\n\nexport const optionToReadableString = (id : Short, byt: Bytes) : string => {\n    const idVal = format(id.short)\n\n    let result = \"\";\n    let buf = byt.bytes\n\n    // Ascii\n    if (idVal == 1) {\n        for (let i = 0; i < format(buf.length); ++i) {\n            if (buf[i] > 127) {\n                // Some error handling\n            } else {\n                result += buf[i].toString()\n            }\n        }\n        return result;\n    }\n    // Bigint\n    else if (idVal == 2) {\n        return buf.readBigInt64BE(0).toString();\n    }\n    // Blob\n    else if (idVal == 3) {\n        return buf.toString()\n    }\n    // Boolean\n    else if (idVal == 4) {\n        if (buf[0] == 0) {\n            return \"False\"\n        } else {\n            return \"True\"\n        }\n    }\n    // Date\n    else if (idVal == 5) {\n\n    }\n    // Decimal\n    else if (idVal == 6) {\n        return buf.readFloatLE(0).toString();\n    }\n    // Double\n    else if (idVal == 7) {\n        return buf.readDoubleBE(0).toString();\n    }\n    // Float\n    else if (idVal == 8) {\n\n    }\n    // Int\n    else if (idVal == 12) {\n        return buf.toString()\n    }\n    return \"\"\n}\n\nexport const bufferToStringList = (buf : Buffer) : StringList => {\n    const len = format(buf.slice(0, 2))\n    let parsed = 2\n    let result : String[] = []\n    for (let i = 0; i < len; ++i) {\n        const newItem = bufferToString(buf.slice(parsed))\n        parsed += format(newItem.length) + 2\n        result.push(newItem)\n    }\n    return  {length: numberToShort(len), stringList: result}\n}\n\nconst stringToValue = (option : Option, textValue : string) : Buffer => {\n    if (textValue == \"null\") {\n        return Buffer.from([-1])\n    }\n\n    const type = getTypeFrom(option, textValue)\n\n    // TODO : handle null\n\n    let typeVal : Buffer\n    if (type == null) {\n        typeVal = Buffer.from(\"null\")\n    }\n    else {\n        typeVal = type.toCQL()\n        console.log(typeVal)\n    }\n\n    //const val : ArrayLike<number> = parse(textValue)\n    const result = Buffer.concat([numberToInt(BigInt(typeVal.length)).int, typeVal])\n    return result\n}\n\nexport const tokensToValues = (types : Array<Option>, values : Array<string>) : Buffer => {\n    let results = numberToShort(BigInt(values.length)).short\n\n    for (let i = 0; i < values.length; ++i) {\n        results = Buffer.concat([results, stringToValue(types[i], values[i])])\n    }\n\n    return results\n}\n\nexport const bigIntToBuffer = (value : bigint, size? : number) : Buffer => {\n    if (!size) {\n        console.log(value)\n        let tempSize = 1, mul = 256n\n        while (value >= mul) {\n            mul *= 256n\n            tempSize += 1\n        }\n        size = tempSize\n        console.log(size)\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        console.log(buf, buf.length)\n        return buf;\n    } else {\n        let buf = Buffer.alloc(size);\n        for (let i = size - 1; i >= 0; --i) {\n            buf[i] = Number(value & BigInt(0xff));\n            value >>= 8n;\n        }\n        return buf;\n    }\n}\n","import { Buffer } from 'buffer';\nimport {numberToInt} from \"./conversions\";\n\nconst setLength = (buf : Buffer, length: bigint) : Buffer => {\n    const bodySize = numberToInt(length);\n    bodySize.int.copy(buf, 5, 0, 4);\n    return buf;\n}\nexport default setLength;","import {Buffer} from 'buffer';\n\nconst Frame= () : Buffer => {\n    return Buffer.alloc(9);\n}\nexport default Frame;","import { Buffer } from 'buffer';\n\nconst setVersion = (buf : Buffer, version: number) : Buffer => {\n    // Version is at position 0 in the frame\n    buf[0] = version;\n    return buf;\n}\nexport default setVersion;","const getMessageCode = (messageType: String) : number => {\n    switch (messageType) {\n        case \"ERROR\": {\n            return 0;\n        }\n        case \"STARTUP\": {\n            return 1;\n        }\n        case \"READY\": {\n            return 2;\n        }\n        case \"AUTHENTICATE\": {\n            return 3;\n        }\n        case \"OPTIONS\": {\n            return 5;\n        }\n        case \"SUPPORTED\": {\n            return 6;\n        }\n        case \"QUERY\": {\n            return 7;\n        }\n        case \"RESULT\": {\n            return 8;\n        }\n        case \"PREPARE\": {\n            return 9;\n        }\n        case \"EXECUTE\": {\n            return 10;\n        }\n        case \"REGISTER\": {\n            return 11;\n        }\n        case \"EVENT\": {\n            return 12;\n        }\n        case \"BATCH\": {\n            return 13;\n        }\n        case \"AUTH_CHALLENGE\": {\n            return 14;\n        }\n        case \"AUTH_RESPONSE\": {\n            return 15;\n        }\n        case \"AUTH_SUCCESS\": {\n            return 16;\n        }\n    }\n    return -1;\n}\nexport default getMessageCode;","import { Buffer } from 'buffer';\nimport getMessageCode from \"./getMessageCode\";\n\nconst setOpcode = (buf : Buffer, messageType: String) : void => {\n    // Opcode is at position 4 in the frame\n    buf[4] = getMessageCode(messageType);\n}\nexport default setOpcode;","import { Buffer } from 'buffer';\nconst format = require(\"biguint-format\");\n\nconst getLength = (buf : Buffer) : bigint => {\n    return BigInt(format(buf.slice(5, 9)));\n}\nexport default getLength;","import {Buffer} from 'buffer';\nimport {bufferToBytes} from \"../utils/conversions\";\nimport {getTypeFrom} from \"./typeFactory\";\nconst format = require(\"biguint-format\");\nimport {stringify, parse} from 'uuid'\n\nexport interface type {\n    toString() : string;\n    toCQL() : Buffer\n}\n\nexport class ASCII implements type {\n    validationError : boolean = false;\n    asciiText : string = \"\"\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            for (let pair of data.entries()) {\n                if (pair[1] > 127) {\n                    this.validationError = true;\n                    break;\n                }\n                this.asciiText += String.fromCharCode(pair[1])\n           }\n        } else {\n            this.asciiText = data;\n        }\n    }\n\n    toString() {\n        return this.asciiText\n    }\n\n    toCQL() {\n        return Buffer.from(this.asciiText, \"ascii\")\n    }\n}\n\n// 8 Byte signed long\nexport class BIGINT implements type {\n    value : bigint = 0n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readBigInt64BE();\n        } else {\n            this.value = BigInt(data);\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        return Buffer.from(format(this.value, \"hex\"), \"hex\")\n    }\n}\n\n// Blob is just a sequence of bytes\nexport class BLOB implements type {\n    \n    #value : BigInt = 0n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#value = BigInt(format(data))\n        } else {\n            this.#value = BigInt(data)\n        }\n    }\n\n    toString() {\n        return \"0x\" + this.#value.toString(16)\n    }\n\n    toCQL() {\n        return Buffer.from(format(this.#value, \"hex\"), \"hex\")\n    }\n}\n\nexport class BOOLEAN implements type {\n    value : boolean = false\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            if (data.length && data[0] > 0) {\n                this.value = true;\n            }\n        } else {\n            this.value = data === \"true\"\n        }\n    }\n\n    toString() {\n        return this.value ? \"True\" : \"False\"\n    }\n\n    toCQL() {\n        return Buffer.from([this.value ? 1 : 0])\n    }\n}\n\n// Number represented as unscaled * 10 ^ scale\nexport class DECIMAL implements type {\n    scale = 0n\n    unscaled = 0n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.scale = BigInt(format(data.slice(0, 4)))\n            this.unscaled = BigInt(format(data.slice(4)))\n        } else {\n            let parts = data.split(\".\")\n            this.scale = BigInt(parts[1].length)\n            this.unscaled = BigInt(parts[0])\n        }\n    }\n\n    toString() {\n        return this.unscaled.toString() + \" * 10^\" + this.scale.toString()\n    }\n\n    toCQL() {\n        return Buffer.concat([Buffer.from(format(this.scale, \"hex\"), \"hex\"), Buffer.from(format(this.unscaled, \"hex\"), \"hex\")])\n    }\n}\n\nexport class DOUBLE implements type {\n    value : number\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readDoubleBE(0)\n        } else {\n            this.value = 0\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeDoubleBE(this.value, 0)\n        return buf\n    }\n}\n\nexport class FLOAT implements type {\n    value : number\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readFloatBE(0)\n        } else {\n            this.value = 0\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeFloatBE(this.value, 0)\n        return buf\n    }\n}\n\nexport class INET implements type {\n    address : Buffer = Buffer.from(\"\")\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.address = data\n        } else {\n            this.address = Buffer.from(data)\n        }\n    }\n\n    toString() {\n        if (this.address.length == 4) {\n            return this.address.join('.').toString()\n        } else if (this.address.length == 6) {\n            return \"unimplemented\"\n        } else {\n            return \"invalid address\"\n        }\n    }\n     \n    toCQL() {\n        return this.address\n    }\n}\n\nexport class INT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt32BE(0)\n        } else {\n            this.value = parseInt(data)\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.value, 0)\n        return buf\n    }\n}\n\nexport class LIST implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value: any) {\n        if (data instanceof Buffer) {\n            const n = data.readInt32BE(0)\n            data = data.slice(4)\n            this.list = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    this.list[i] = getTypeFrom(value, bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.list.length, 0)\n        for (let i = 0; i < this.list.length; ++i) {\n            const el = this.list[i]\n            if (el !== null) {\n                buf = Buffer.concat([buf, el.toCQL()])\n            }  else {\n                buf = Buffer.concat([buf, Buffer.alloc(4)])\n            }\n        }\n        return buf\n    }\n}\n\nexport class MAP implements type {\n    container : Array<[type | null, type | null]> = new Array<[type | null, type | null]>()\n\n    constructor(data: Buffer | string, value : any) {\n        if (data instanceof Buffer) {\n            const [firstVal, secondVal] = value\n            const n = data.readInt32BE(0)\n            let dataPart = data.slice(4)\n            this.container = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                this.container[i] = [null, null]\n                let bytes = bufferToBytes(dataPart);\n            \n                if (bytes != null) {\n                    this.container[i][0] = getTypeFrom(firstVal, bytes.bytes);\n                    dataPart = dataPart.slice(bytes.bytes.length + 4)\n    \n                }\n                \n                bytes = bufferToBytes(dataPart);\n                if (bytes != null) {\n                    this.container[i][1] = getTypeFrom(secondVal, bytes.bytes);\n                    dataPart = dataPart.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"{\"\n        for (let i = 0; i < this.container.length; ++i) {\n            const [key, value] = this.container[i]\n            //if (key != null) {console.log(key.toString())}\n            const keyString = key != null ? key.toString() : \"null\"\n            const valueString =value != null ? value.toString() : \"null\"\n            resultString += keyString + \" : \" + valueString + \", \"\n        }\n        resultString = resultString.replace(/..$/,\"}\")\n        return resultString\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.container.length, 0)\n        for (let i = 0; i < this.container.length; ++i) {\n            const el1 = this.container[i][0]\n            if (el1 != null) {\n                buf = Buffer.concat([buf, el1.toCQL()])\n            } else {\n                buf = Buffer.concat([buf, Buffer.alloc(4)])\n            }\n            const el2 = this.container[i][1]\n            if (el2 != null) {\n                buf = Buffer.concat([buf, el2.toCQL()])\n            } else {\n                buf = Buffer.concat([buf, Buffer.alloc(4)])\n            }\n        }\n        return buf\n    }\n}\n\nexport class SET implements type {\n    list : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value : any) {\n        if (data instanceof Buffer) {\n            const n = data.readInt32BE(0)\n            data = data.slice(4)\n            this.list = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    this.list[i] = getTypeFrom(value, bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n        //console.log(this.list.toString())\n    }\n\n    toString() {\n        return this.list.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.list.length, 0)\n        for (let i = 0; i < this.list.length; ++i) {\n            const el = this.list[i]\n            if (el != null) {\n                buf = Buffer.concat([buf, el.toCQL()])\n            } else {\n                buf = Buffer.concat([buf, Buffer.alloc(4)])\n            }\n        }\n        return buf\n    }\n}\n\nexport class SMALLINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt16BE()\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt16BE(this.value, 0)\n        return buf\n    }\n}\n\nexport class TIME implements type {\n    #hours : bigint = 0n;\n    #minutes : bigint = 0n\n    #seconds : bigint = 0n\n    #nanoseconds :bigint = 0n\n    #hoursRatio : bigint = 3600000000000n\n    #minutesRatio : bigint = 60000000000n\n    #secondsRatio : bigint = 1000000000n\n\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#nanoseconds = BigInt(data.slice(0, 4).readInt32BE(0)) * BigInt(Math.pow(2,32)) + BigInt(data.slice(4, 8).readInt32BE(0))\n            if (0 < this.#nanoseconds && this.#nanoseconds < 86399999999999) {\n                this.#hours = this.#nanoseconds / this.#hoursRatio\n                this.#nanoseconds -= this.#hours * this.#hoursRatio\n                console.log(this.#nanoseconds)\n                this.#minutes = this.#nanoseconds / this.#minutesRatio\n                this.#nanoseconds -= this.#minutes * this.#minutesRatio\n                console.log(this.#nanoseconds)\n                this.#seconds = this.#nanoseconds / this.#secondsRatio\n                this.#nanoseconds -= this.#seconds * this.#secondsRatio\n            }\n        }\n    }\n\n    toString() {\n        let result = this.#hours + \":\" + this.#minutes + \":\" + this.#seconds\n        if (this.#nanoseconds > 0) {\n            result += \".\" + this.#nanoseconds\n        }\n        return result\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt32BE(Number(this.#hours), 0)\n        buf.writeInt32BE(Number(this.#minutes), 4)\n        buf.writeInt32BE(Number(this.#seconds), 8)\n        return buf\n    }\n}\n\nexport class DATE implements type {\n\n    #value : Date = new Date(0)\n    #days = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#days = data.slice(0, 4).readUInt32BE(0) - Math.pow(2, 31)\n            this.#value = new Date(this.#days * 8.64e7)\n        }\n    }\n\n    toString() {\n        if (isNaN(this.#value.getUTCFullYear())) {\n            return this.#days.toString() + \" days from 1970-01-01\"\n        }\n      \n        return this.#value.getUTCFullYear() + \"-\" + (this.#value.getUTCMonth() + 1) + \"-\" + this.#value.getUTCDate() \n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeUInt32BE(this.#days + Math.pow(2, 31), 0)\n        return buf\n    }\n}\n\nexport class TIMESTAMP implements type {\n    #value : Date = new Date(0)\n    #miliseconds = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#miliseconds = data.slice(0, 4).readUInt32BE(0) * Math.pow(2, 32) + data.slice(4, 8).readUInt32BE(0)\n            this.#value = new Date(this.#miliseconds)\n        } else {\n            this.#value = new Date(data)\n            this.#miliseconds = this.#value.getTime()\n        }\n    }\n\n    toString() {\n        if (isNaN(this.#value.getUTCFullYear())) {\n            return this.#miliseconds.toString() + \" miliseconds from 1970-01-01\"\n        }\n\n        return this.#value.getUTCFullYear() + \"-\" + (this.#value.getUTCMonth() + 1) + \"-\" + this.#value.getUTCDate() + \" \" + this.#value.getUTCHours() + \":\" + this.#value.getUTCMinutes() + \":\" + this.#value.getUTCSeconds() + \".\" + this.#value.getUTCMilliseconds()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeUInt32BE(Math.floor(this.#miliseconds / Math.pow(2, 32)), 0)\n        buf.writeUInt32BE(this.#miliseconds % Math.pow(2, 32), 4)\n        return buf\n    }\n}\n\nexport class TINYINT implements type {\n    value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.value = data.readInt8()\n        }\n    }\n\n    toString() {\n        return this.value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(8)\n        buf.writeInt8(this.value, 0)\n        return buf\n    }\n}\n\nexport class TUPLE implements type {\n    tuple : Array<type | null> = new Array<type | null>()\n\n    constructor(data: Buffer | string, value: any) {\n        if (data instanceof Buffer) {\n            const n = value.length\n            this.tuple = Array.from({length: n})\n            for (let i = 0; i < n; ++i) {\n                let bytes = bufferToBytes(data);\n                if (bytes != null) {\n                    //console.log(value[i])\n                    this.tuple[i] = getTypeFrom(value[i], bytes.bytes);\n                    data = data.slice(bytes.bytes.length + 4)\n                }\n            }\n        }\n    }\n\n    toString() {\n        let resultString = \"(\"\n        for (let i = 0; i < this.tuple.length; ++i) {\n            const tupleValue = this.tuple[i]\n            const stringValue = tupleValue != null ? tupleValue.toString() : \"null\"\n           \n            resultString += stringValue + \", \"\n        }\n        resultString = resultString.replace(/..$/,\")\")\n        return resultString\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.tuple.length, 0)\n        for (let i = 0; i < this.tuple.length; ++i) {\n            const tupleValue = this.tuple[i]\n            if (tupleValue != null) {\n                buf = Buffer.concat([buf, tupleValue.toCQL()])\n            }\n        }\n        return buf\n    }\n}\n\nexport class UUID implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer | string) {\n        console.log(data)\n        if (data instanceof Buffer) {\n            this.#value = stringify(data)\n        } else {\n            this.#value = data\n        }\n    }\n\n    toString() {\n        return this.#value\n    }\n\n    toCQL() {\n        return Buffer.from(Array.from(parse(this.#value)))\n    }\n}\n\nexport class VARCHAR implements type {\n    #value : string = \"\"\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#value = data.toString('utf8')\n        }\n    }\n\n    toString() {\n        return this.#value\n    }\n\n    toCQL() {\n        return Buffer.from(this.#value, \"utf-8\")\n    }\n}\n\nexport class VARINT implements type {\n    #value : number = 0\n\n    constructor(data: Buffer | string) {\n        if (data instanceof Buffer) {\n            this.#value = data.readInt32BE()\n        }\n    }\n\n    toString() {\n        return this.#value.toString()\n    }\n\n    toCQL() {\n        let buf = Buffer.alloc(4)\n        buf.writeInt32BE(this.#value, 0)\n        return buf\n    }\n}","import {ASCII, BIGINT, BLOB, BOOLEAN, DECIMAL, DOUBLE, FLOAT,\n        SET, INT, type, LIST, MAP, VARCHAR, UUID, TUPLE, INET, TIME, DATE, SMALLINT, TINYINT, TIMESTAMP} from \"./types\";\nconst format = require(\"biguint-format\");\n\nexport const getTypeFrom = (type: any, data: Buffer | string) : type | null =>  {\n    const id = Number(format(type.id.short))\n    const value = type.value\n    switch (id) {\n        case 1: {\n            return new ASCII(data);\n        }\n        case 2: {\n            return new BIGINT(data);\n        }\n        case 3: {\n            return new BLOB(data);\n        }\n        case 4: {\n            return new BOOLEAN(data)\n        }\n        case 6: {\n            return new DECIMAL(data)\n        }\n        case 7: {\n            return new DOUBLE(data)\n        }\n        case 8: {\n            return new FLOAT(data)\n        }\n        case 9: {\n            return new INT(data)\n        }\n        case 11: {\n            return new TIMESTAMP(data)\n        }\n        case 12: {\n            return new UUID(data)\n        }\n        case 13: {\n            return new VARCHAR(data)\n        }\n        case 16: {\n            return new INET(data)\n        }\n        case 17: {\n            return new DATE(data)\n        }\n        case 18: {\n            return new TIME(data)\n        }\n        case 19: {\n            return new SMALLINT(data)\n        }\n        case 20: {\n            return new TINYINT(data)\n        }\n        case 32 : {\n            return new LIST(data, value)\n        }\n        case 33: {\n            return new MAP(data, value)\n        }\n        case 34: {\n            return new SET(data, value)\n        }\n        case 49: {\n            return new TUPLE(data, value)\n        }\n    }\n    return null;\n}","import {Buffer} from \"buffer\";\nimport {numberToInt, numberToShort} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addQueryBody = (buffer: Buffer, queryBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const querySize = numberToInt(BigInt(queryBody.length));\n    querySize.int.copy(body, 0, 0, 4);\n   \n    queryBody.copy(body, 4, 0, queryBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, queryBody.length + 4, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, queryBody.length + 6, 0, 1);\n    extraData.copy(body, queryBody.length + 7, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addQueryBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport {Bytes, Consistency} from \"./types\";\nimport setLength from \"./setLength\";\nimport addQueryBody from \"./addQueryBody\";\nimport {numberToByte, numberToInt} from \"./conversions\";\nimport { CQLDriver } from \"../Driver\";\n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getQueryMessage = (driver: CQLDriver, body: string, setLastQuery : any, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(body)\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n    setOpcode(buffer, \"QUERY\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        \n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n    \n    // Basic query - long string(int) + consistency(short) + flag(byte) + possible data    \n    const queryBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(queryBody.length + 7 + extraData.length)\n    setLength(buffer, length)\n    buffer = addQueryBody(buffer, queryBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    return buffer;\n}\n\n\n\nexport default getQueryMessage;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\nimport {Byte, Consistency} from \"./types\";\n\nconst addExecuteBody = (buffer: Buffer, executeBody: Buffer, consistency: Consistency, flag : Byte, length : number, extraData : Buffer) : Buffer => {\n    const body = Buffer.alloc(length);\n   \n    executeBody.copy(body, 0, 0, executeBody.length);\n    const consistencyBody = consistency.consistency.short;\n    consistencyBody.copy(body, executeBody.length, 0, 2);\n    const flagBody = flag.byte;\n    flagBody.copy(body, executeBody.length + 2, 0, 1);\n    extraData.copy(body, executeBody.length + 3, 0, extraData.length)\n    \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addExecuteBody;\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport {bigIntToBuffer, numberToByte, numberToInt, numberToShort, tokensToValues} from \"./conversions\";\nimport addExecuteBody from \"./addExecuteBody\";\nimport { CQLDriver } from \"../Driver\";\nimport { Bytes, Option } from \"./types\";\n\nconst ValuesFlag : bigint = 1n\nconst PageSizeFlagValue : bigint = 4n\nconst NextPageFlagValue : bigint = 8n\n\nconst getExecuteMessage = (driver : CQLDriver, queryId: string, setLastQuery : any, bindValues : Array<string>, bindTypes : Array<Option>, pagingState? : Bytes) : Buffer => {\n    let buffer = Frame();\n\n    setLastQuery(queryId)\n\n    const consistency = driver.getConsistency()\n    const [pageSize, pagingEnabled] = driver.getPaging()\n\n    setOpcode(buffer, \"EXECUTE\");\n    setVersion(buffer, 4);\n\n    let flagValue : bigint = 0n\n    let extraData : Buffer = Buffer.alloc(0)\n\n    if (bindValues != []) {\n        flagValue += ValuesFlag\n        extraData = Buffer.concat([extraData, tokensToValues(bindTypes, bindValues)])\n    }\n\n    // If paging is enabled we add flag value and insert page size into extraData\n    if (pagingEnabled) {\n        flagValue += PageSizeFlagValue\n        extraData = Buffer.concat([extraData, numberToInt(BigInt(pageSize)).int])\n    }\n\n    if (pagingState) {\n        flagValue += NextPageFlagValue\n        extraData = Buffer.concat([extraData,numberToInt(BigInt(pagingState.bytes.length)).int, pagingState.bytes])\n    }\n\n    // Execute message + short bytes(short)*/\n    \n    const value = bigIntToBuffer(BigInt(queryId))\n    console.log(value)\n    const executeBody = Buffer.concat([numberToShort(BigInt(value.length)).short, value])\n    const length = BigInt(executeBody.length + 3 + extraData.length)\n    setLength(buffer, length)\n    buffer = addExecuteBody(buffer, executeBody, consistency,  numberToByte(flagValue), Number(length), extraData)\n    console.log(buffer)\n    return buffer;\n}\n\n\n\nexport default getExecuteMessage;","import {Consistency} from \"../utils/types\";\nimport {numberToShort} from \"../utils/conversions\";\n\nconst getConsistency = (value : string) : Consistency => {\n    let consistencyCode = -1\n\n    switch (value) {\n        case \"ANY\": {\n            consistencyCode = 0;\n            break;\n        }\n        case \"ONE\": {\n            consistencyCode = 1;\n            break;\n        }\n        case \"TWO\": {\n            consistencyCode = 2;\n            break;\n        }\n        case \"THREE\": {\n            consistencyCode = 3;\n            break;\n        }\n        case \"QUORUM\": {\n            consistencyCode = 4;\n            break;\n        }\n        case \"ALL\": {\n            consistencyCode = 5;\n            break;\n        }\n        case \"LOCAL_QUORUM\": {\n            consistencyCode = 6;\n            break;\n        }\n        case \"EACH_QUORUM\": {\n            consistencyCode = 7;\n            break;\n        }\n        case \"LOCAL_SERIAL\": {\n            consistencyCode = 8;\n            break;\n        }\n        case \"LOCAL_ONE\": {\n            consistencyCode = 9;\n            break;\n        }\n    }\n\n    return {\n        name: value,\n        consistency : numberToShort(BigInt(consistencyCode))\n    };\n}\n\nexport default getConsistency;","import { Buffer } from 'buffer';\n\nexport const getOpcode = (buf : Buffer) : number => {\n    // Opcode is at position 4 in the frame\n    return buf[4]\n}\n\nexport const getOpcodeName = (buf : Buffer) : string => {\n    // Opcode is at position 4 in the frame\n    var num = getOpcode(buf)\n\n    switch (num) {\n        case 0: {\n            return \"ERROR\";\n        }\n        case 1: {\n            return \"STARTUP\";\n        }\n        case 2: {\n            return \"READY\";\n        }\n        case 3: {\n            return \"AUTHENTICATE\";\n        }\n        case 5: {\n            return \"OPTIONS\";\n        }\n        case 6: {\n            return \"SUPPORTED\";\n        }\n        case 7: {\n            return \"QUERY\";\n        }\n        case 8: {\n            return \"RESULT\";\n        }\n        case 9: {\n            return \"PREPARE\";\n        }\n        case 10: {\n            return \"EXECUTE\";\n        }\n        case 11: {\n            return \"REGISTER\";\n        }\n        case 12: {\n            return \"EVENT\";\n        }\n        case 13: {\n            return \"BATCH\";\n        }\n        case 14: {\n            return \"AUTH_CHALLENGE\";\n        }\n        case 15: {\n            return \"AUTH_RESPONSE\";\n        }\n        case 16: {\n            return \"AUTH_SUCCESS\";\n        }\n    }\n    return \"INVALID\";\n}","const getConsistencyName = (value : number) : string => {\n    let consistencyName = \"\"\n\n    switch (value) {\n        case 0: {\n            consistencyName = \"ANY\";\n            break;\n        }\n        case 1: {\n            consistencyName = \"ONE\";\n            break;\n        }\n        case 2: {\n            consistencyName = \"TWO\";\n            break;\n        }\n        case 3: {\n            consistencyName = \"THREE\";\n            break;\n        }\n        case 4: {\n            consistencyName = \"QUORUM\";\n            break;\n        }\n        case 5: {\n            consistencyName = \"ALL\";\n            break;\n        }\n        case 6: {\n            consistencyName = \"LOCAL_QUORUM\";\n            break;\n        }\n        case 7: {\n            consistencyName = \"EACH_QUORUM\";\n            break;\n        }\n        case 8: {\n            consistencyName = \"LOCAL_SERIAL\";\n            break;\n        }\n        case 9: {\n            consistencyName = \"LOCAL_ONE\";\n            break;\n        }\n    }\n\n    return consistencyName\n}\n\nexport default getConsistencyName;","import { bufferToInt, bufferToShort, bufferToShortBytes, bufferToString, bufferToStringList } from \"./conversions\";\nimport getConsistencyName from \"./getConsistencyName\";\nconst format = require(\"biguint-format\");\n\nconst getServerErrorMessage = (errorBody : Buffer) : [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Server Error\"]\n}\n\nconst getProtocolErrorMessage = (errorBody : Buffer) : [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Protocol Error\"]\n}\n\nconst getAuthenticationErrorMessage = (errorBody : Buffer) : [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Authentication Error\"]\n}\n\n\nconst getUnavialableExceptionMessage = (errorBody: Buffer): [string, string] => {\n    const consistency = bufferToShort(errorBody).short\n    const required = bufferToInt(errorBody.slice(2)).int\n    const alive = bufferToInt(errorBody.slice(6)).int\n\n    const message = \n        \"Consistency of query that triggered exception: \" +\n        getConsistencyName(Number(format(consistency))) + \". \" + \n        \"Required nodes alive: \" +\n        format(required) + \", \" + \n        \"Current nodes alive: \" +\n        format(alive) + \".\"\n\n    return [message  , \"Unavailable\"]\n}\n\nconst getOverloadedMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Overloaded\"]\n}\n\nconst getIsBootstrappingMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Is Bootstrapping\"]\n}\n\nconst getTruncateErrorMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Truncate Error\"]\n}\n\n\nconst getWriteTimeoutMessage = (errorBody: Buffer): [string, string] => {\n    let position = 0\n    const consistency = bufferToShort(errorBody.slice(position)).short\n    position += 2;\n    const received = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const blockFor = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const writeType = bufferToString(errorBody.slice(position)).string\n\n    const message =\n        \"Consistency of query that triggered exception: \" +\n        getConsistencyName(Number(format(consistency))) + \". \" + \n        \"Nodes that acknowledged request: \" +\n        format(received) + \", \" + \n        \"Required replicas: \" +\n        format(blockFor) + \".\"\n        \"Type of write that timed out: \" + writeType.toString()\n\n    return [message, \"Write Timeout\"]\n}\n\nconst getReadTimeoutMessage = (errorBody: Buffer): [string, string] => {\n    let position = 0\n    const consistency = bufferToShort(errorBody.slice(position)).short\n    position += 2;\n    const received = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const blockFor = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const dataPresent = errorBody.slice(position)\n\n    const message =\n        \"Consistency of query that triggered exception: \" +\n        getConsistencyName(Number(format(consistency))) + \". \" + \n        \"Nodes that answered request: \" +\n        format(received) + \", \" + \n        \"Required replicas: \" +\n        format(blockFor) + \".\" + \n        (dataPresent[0] == 0 ? \"Asked replica has not responded.\" : \"\")\n\n    return [message, \"Read Timeout\"]\n}\n\nconst getFunctionFailureMessage = (errorBody: Buffer): [string, string] => {\n    let position = 0\n    const keyspace = bufferToString(errorBody.slice(position)).string\n    position += keyspace.length + 2;\n    const fun = bufferToString(errorBody.slice(position)).string\n    position += fun.length + 2;\n    const argTypes = bufferToStringList(errorBody.slice(position)).stringList\n\n    const message =\n        \"Function : \" + fun.toString() +\n        \" with arguments: \" + argTypes.join(\" \") +\n        \" at keyspace: \" + keyspace + \" failed.\"\n\n    return [message, \"Function Timeout\"]\n}\n\n\nconst getReadFailureMessage = (errorBody: Buffer): [string, string] => {\n    let position = 0\n    const consistency = bufferToShort(errorBody.slice(position)).short\n    position += 2;\n    const received = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const blockFor = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const numFailures = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const dataPresent = errorBody.slice(position)\n\n    const message =\n        \"Consistency of query that triggered exception: \" +\n        getConsistencyName(Number(format(consistency))) + \". \" + \n        \"Nodes that answered request: \" +\n        format(received) + \", \" + \n        \"Required replicas: \" +\n        format(blockFor) + \".\" + \n        \"Number of nodes that failed: \" + format(numFailures) +\n        (dataPresent[0] == 0 ? \"Asked replica has not responded.\" : \"\")\n\n    return [message, \"Read Failure\"]\n}\n\n\nconst getWriteFailureMessage = (errorBody: Buffer): [string, string] => {\n    let position = 0\n    const consistency = bufferToShort(errorBody.slice(position)).short\n    position += 2;\n    const received = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const blockFor = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const numFailures = bufferToInt(errorBody.slice(position)).int\n    position += 4;\n    const writeType = bufferToString(errorBody.slice(position))\n\n    const message =\n        \"Consistency of query that triggered exception: \" +\n        getConsistencyName(Number(format(consistency))) + \". \" + \n        \"Nodes that answered request: \" +\n        format(received) + \", \" + \n        \"Required replicas: \" +\n        format(blockFor) + \".\" + \n        \"Number of nodes that failed: \" + format(numFailures) +\n        \"Type of write that timed out: \" + writeType.toString()\n\n    return [message, \"Write Failure\"]\n}\n\nconst getSyntaxErrorMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Syntax Error\"]\n}\n\nconst getUnautorizedMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Unauthorized\"]\n}\n\nconst getInvalidMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Invalid\"]\n}\n\nconst getConfigErrorMessage = (errorBody: Buffer): [string, string] => {\n    return [bufferToString(errorBody).string.toString(), \"Config Error\"]\n}\n\nconst getAlreadyExistsMessage = (errorBody: Buffer): [string, string] => {\n    const keyspace = bufferToString(errorBody).string\n    const table = bufferToString(errorBody.slice(keyspace.length)).string\n\n    const message = table.length == 0 ? \n        \"Keyspace \" + keyspace.toString() + \" already exists.\" :\n        \"Table \" + keyspace.toString() + \"/\" + table.toString() + \"already exists.\"\n\n    throw [message, \"Already Exists\"];\n}\n\nconst getUnpreparedMessage = (errorBody: Buffer): [string, string] => {\n    const id = BigInt(format(bufferToShortBytes(errorBody).shortBytes))\n    const message = \n        \"Prepared statement of ID: \" + id.toString() + \" does not exist.\"\n    return [message, \"Unprepared\"]\n}\n\nconst extractErrorMessage = (messageBody : Buffer) : [string, string] => {\n    const errorCode = Number(format(bufferToInt(messageBody).int))\n    console.log(errorCode)\n    messageBody = messageBody.slice(4)\n    \n    switch (errorCode) {\n        case 0x000: {\n            return getServerErrorMessage(messageBody);\n        }\n        case 0x00A: {\n            return getProtocolErrorMessage(messageBody);\n        }\n        case 0x0100: {\n            return getAuthenticationErrorMessage(messageBody);\n        }\n        case 0x1000: {\n            return getUnavialableExceptionMessage(messageBody);\n        }\n        case 0x1001: {\n            return getUnavialableExceptionMessage(messageBody);\n        }\n        case 0x1001: {\n            return getOverloadedMessage(messageBody);\n        }\n        case 0x1002: {\n            return getIsBootstrappingMessage(messageBody);\n        }\n        case 0x1003: {\n            return getTruncateErrorMessage(messageBody);\n        }\n        case 0x1100: {\n            return getWriteTimeoutMessage(messageBody);\n        }\n        case 0x1200: {\n            return getReadTimeoutMessage(messageBody);\n        }\n        case 0x1300: {\n            return getReadFailureMessage(messageBody);\n        }\n        case 0x1400: {\n            return getFunctionFailureMessage(messageBody)\n        }\n        case 0x1500: {\n            return getWriteFailureMessage(messageBody);\n        }\n        case 0x2000: {\n            return getSyntaxErrorMessage(messageBody);\n        }\n        case 0x2100: {\n            return getUnautorizedMessage(messageBody);\n        }\n        case 0x2200: {\n            return getInvalidMessage(messageBody);\n        }\n        case 0x2300: {\n            return getConfigErrorMessage(messageBody);\n        }\n        case 0x2400: {\n            return getAlreadyExistsMessage(messageBody);\n        }\n        case 0x2500: {\n            return getUnpreparedMessage(messageBody);\n        }\n    }\n\n    return [bufferToString(messageBody).string.toString(), \"Unknown Error\"]\n}\n\nexport default extractErrorMessage;","import {Buffer} from \"buffer\";\nimport {\n    bufferToBytes,\n    bufferToInt,\n    bufferToOption,\n    bufferToShort,\n    bufferToShortBytes,\n    bufferToString,\n    bufferToStringList\n} from \"./conversions\";\nimport {Option} from \"./types\";\nimport getLength from \"./getLength\";\nimport { getOpcodeName } from \"./getOpcode\";\nimport { getTypeFrom } from \"../cql-types/typeFactory\";\nimport { CQLDriver } from \"../Driver\";\nimport extractErrorMessage from \"./extractErrorMessage\";\nconst format = require(\"biguint-format\");\n\nconst getVoidResult = () : [string, string] => {\n    return [\"\", \"\"]\n}\n\nconst getRowsResult = (driver : CQLDriver, buf : Buffer) : [string  | Array<Array<string>>, \"\"] => {\n    \n    let stringLen = 0\n    let globalTableSpecPresent = false\n    let hasMorePages = false\n    let noMetaData = false\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    if (metaDataFlags & 2) {\n        hasMorePages = true\n    }\n    if (metaDataFlags & 4) {\n        noMetaData = true\n    }\n    stringLen += 4\n    const columnCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n    stringLen += 4\n\n    if (hasMorePages) {\n        const pagingState = bufferToBytes(buf.slice(stringLen))\n        if (pagingState != null) {\n            stringLen += pagingState.bytes.length + 4;\n            if (driver.getExpectedIndex() == driver.getNumberOfLoadedPages() - 1) {\n                driver.addPagingState(pagingState)\n            }\n            driver.setPageNumber(driver.getExpectedIndex())\n        } else {\n            stringLen += 4\n        }\n    } else {\n       driver.setPageNumber(driver.getExpectedIndex())\n    }\n\n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(keySpaceName.length))\n        tableName = bufferToString(buf.slice(stringLen))\n        stringLen += Number(format(tableName.length))\n    }\n    \n\n    let columnVars : any = Array.from({length: columnCount})\n  \n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(keySpaceName.length.short)) + 2\n            tableName = bufferToString(buf.slice(stringLen))\n            stringLen += Number(format(tableName.length.short)) + 2\n        }\n        \n        let columnName = bufferToString(buf.slice(stringLen))\n \n        stringLen += Number(format(columnName.length.short)) + 2\n        let columnType = bufferToOption(buf.slice(stringLen))\n    \n        columnVars[i] = {name: columnName, type: columnType}\n        stringLen += columnType.size + 2\n    }\n    \n    const rowCount = Number(format(bufferToInt(buf.slice(stringLen)).int))\n\n    stringLen += 4\n    let rows : any[] = Array.from({length: rowCount})\n\n    for (let i = 0; i < rowCount; ++i) {\n        let row : any = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            row[j] = bufferToBytes(buf.slice(stringLen))\n            stringLen += 4\n            if (row[j] != null) {\n                stringLen += Number(format(row[j].length.int))\n            }\n        }\n        rows[i] = row\n    }\n   \n    let content : Array<Array<string>> = Array.from({length: rowCount + 1})\n  \n    content[0] = Array.from({length: columnCount})\n    for (let j = 0; j < columnCount; ++j) {\n        content[0][j] = columnVars[j].name.string.toString()\n    }\n   \n    // Creating final array\n    for (let i = 1; i <= rowCount; ++i) {\n        content[i] = Array.from({length: columnCount})\n        for (let j = 0; j < columnCount; ++j) {\n            if (rows[i - 1][j] != null) {\n                const receivedType = getTypeFrom(columnVars[j].type, rows[i - 1][j].bytes)\n                if (receivedType != null) {\n                    content[i][j] = receivedType.toString()\n                } else {\n                    content[i][j] = \"null\"\n                }\n            } else {\n                content[i][j] = \"null\"\n            }\n            \n        }\n    }\n\n    return [content, \"\"]\n}\n\nconst getSetKeyspaceResult = (buf : Buffer, setKeyspace : (arg0: string) => void) : [string, string] => {\n    const keyspaceName =  bufferToString(buf).string.toString()\n    setKeyspace(keyspaceName)\n    const response = \"Changed keyspace to \" + keyspaceName\n    return [response, \"\"]\n}\n\nconst getPreparedResult = (buf : Buffer, addPreparedStatement : any) : [string, string] => {\n    const idBuffer = bufferToShortBytes(buf).shortBytes\n    const id = BigInt(format(bufferToShortBytes(buf).shortBytes))\n    let globalTableSpecPresent = false\n    buf = buf.slice(idBuffer.length + 2)\n    const metaDataFlags = Number(format(bufferToInt(buf).int))\n\n    if (metaDataFlags & 1) {\n        globalTableSpecPresent = true\n    }\n    \n    buf = buf.slice(4)\n    \n    const columnCount = Number(format(bufferToInt(buf).int))\n    buf = buf.slice(4)\n    const pkCount = Number(format(bufferToInt(buf).int))\n    buf = buf.slice(4)\n    \n    for (let i = 0; i < pkCount; ++i) {\n        const pkIndex = Number(format(bufferToShort(buf).short))\n        buf = buf.slice(2)\n    }\n    let columnValues : Array<Option> = Array.from({length: columnCount})\n   \n    let keySpaceName, tableName\n    if (globalTableSpecPresent) {\n        keySpaceName = bufferToString(buf)\n        buf = buf.slice(keySpaceName.string.length + 2)\n        tableName = bufferToString(buf)\n        buf = buf.slice(tableName.string.length + 2)\n    }\n    for (let i = 0; i < columnCount; ++i) {\n        if (!globalTableSpecPresent) {\n            keySpaceName = bufferToString(buf)\n            buf.slice(Number(format(keySpaceName.length.short)) + 2)\n            tableName = bufferToString(buf)\n            buf.slice(Number(format(tableName.length.short)) + 2)\n        }\n        \n        let columnName = bufferToString(buf)\n        buf = buf.slice(Number(format(columnName.length.short)) + 2)\n        let columnType = bufferToOption(buf)\n        columnValues[i] = columnType\n        buf = buf.slice(columnType.size + 2)\n    }\n    addPreparedStatement(id, columnValues)\n\n    return [\"Prepared statement with id \" + id.toString(), \"\"]\n}\n\nconst getSchemaChangeResult = (buf : Buffer) : [string, string] => {\n    let stringLen = 0\n    const changeType = bufferToString(buf).string.toString()\n    stringLen += changeType.length + 2\n    const target = bufferToString(buf.slice(stringLen)).string.toString()\n    stringLen += target.length + 2\n    let option = \"\"\n\n    if (target == \"KEYSPACE\") {\n        option = bufferToString(buf.slice(stringLen)).string.toString()\n    } else if (target == \"TABLE\" || target == \"TYPE\") {\n        const object = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += object.length + 2\n        const name = bufferToString(buf.slice(stringLen)).string.toString()\n        option = object + \" \" + name\n    } else if (target == \"FUNCTION\" || target == \"AGGREGATE\") {\n        const keyspace = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const fun = bufferToString(buf.slice(stringLen)).string.toString()\n        stringLen += keyspace.length + 2\n        const args = bufferToStringList(buf.slice(stringLen))\n        option = keyspace + \" \" + fun\n        for (let i = 0; i < format(args.length.short); ++i) {\n            option += \" \" + args.stringList[i].string.toString()\n        }\n    }\n\n    return [changeType + \" \" + target + \" \" + option, \"\"]\n}\n\nconst getQueryResult = (driver : any, buffer: Buffer, setKeyspace: any, addPreparedStatement : any) : [string | Array<Array<string>>, string] => {\n    const length = getLength(buffer)\n    const body = buffer.slice(9, 9 + Number(length));\n    if (body.length >= length) {\n        driver.setLastBody(Buffer.from(\"\"))\n        driver.setLastHeader(Buffer.from(\"\"))\n        let code = Number(format(body.slice(0, 4)))\n        \n        if (getOpcodeName(buffer) == \"RESULT\") {\n            switch (code) {\n                case 1: {\n                    return getVoidResult();\n                }\n                case 2: {\n                    //return \"Rows\";\n                    return getRowsResult(driver, body.slice(4, Number(length)))\n                }\n                case 3: {\n                    return getSetKeyspaceResult(body.slice(4, Number(length)), setKeyspace);\n                }\n                case 4: {\n                    return getPreparedResult(body.slice(4, Number(length)), addPreparedStatement);\n                }\n                case 5: {\n                    return getSchemaChangeResult(body.slice(4, Number(length)));\n                }\n            }\n\n            return [\"Invalid optcode:\", code.toString()]\n        } else if (getOpcodeName(buffer) == \"ERROR\") {\n            return extractErrorMessage(body);\n        } else if (getOpcodeName(buffer) == \"READY\") {\n            return [\"Connection properly established\", \"READY\"];\n        } else if (getOpcodeName(buffer) == \"AUTH_SUCCESS\") {\n            return [\"Successful authentication\", \"AUTH_SUCCESS\"];\n        } else if (getOpcodeName(buffer) == \"AUTHENTICATE\") {\n            return [\"Authentication required\", \"AUTHENTICATE\"];\n        } else {\n            return [\"Unexpected response, cannot be handled.\", \"\"];\n        }\n    } else {\n        driver.setLastBody(body)\n        driver.setLastHeader(buffer.slice(0, 9))\n        return [\"Not complete response\",\"\"]\n    }\n}\n\nexport default getQueryResult;","import handshakeMessage from \"./functions/Handshake\"\nimport {Bytes, Consistency, Option} from \"./utils/types\";\nimport getConsistency from \"./functions/Consistency\";\nimport {numberToShort} from \"./utils/conversions\";\nimport getQueryMessage from \"./utils/getQueryMessage\";\nimport getQueryResult from \"./utils/getQueryResult\";\nimport getPrepareMessage from \"./utils/getPrepareMessage\";\nimport getExecuteMessage from \"./utils/getExecuteMessage\";\nimport getAuthenticationMessage from \"./utils/getAuthenticationMessage\";\nimport getLength from \"./utils/getLength\";\nimport {Blob} from 'buffer'\nimport {isBrowser} from \"browser-or-node\"\nimport { WebSocket as WWebSocket} from \"ws\";\n\n\nclass CQLDriver {\n    #websocket : any\n    #consistency: Consistency\n    #keyspace : string\n    #pageSize: number\n    #pagingEnabled : boolean\n    #pagingStates : Array<Bytes>\n    #pagingIndex : number\n    #lastQuery: string\n    #lastQueryType : string\n    #expectedIndex : number\n    #expectingNewQuery : boolean\n    #bindValues : Array<string>\n    #lastHeader : Buffer\n    #lastBody : Buffer\n    #preparedStatements : Map<bigint, Array<Option>>\n\n    constructor() {\n        this.#websocket = isBrowser ? new WebSocket(\"ws://localhost:8222\", \"cql\")\n        : this.#websocket = new WWebSocket('ws://localhost:8222', \"cql\")\n        this.#consistency = getConsistency(\"ONE\");\n        this.#keyspace = \"\"\n        this.#pageSize = 6\n        this.#pagingEnabled = true\n        this.#pagingStates = []\n        this.#pagingIndex = -1\n        this.#expectedIndex = 0\n        this.#lastBody = Buffer.from(\"\")\n        this.#lastHeader = Buffer.from(\"\")\n        this.#lastQuery = \"\"\n        this.#lastQueryType = \"QUERY\"\n        this.#expectingNewQuery = true\n        this.#bindValues = []\n        this.#preparedStatements = new Map()\n    }\n\n\n    handshake = handshakeMessage.bind(this)\n\n    authenticate = (login : string, passwd : string) => {\n        this.#checkSend(this.#websocket, getAuthenticationMessage(login, passwd))\n    } \n\n    #addPreparedStatement = (id: bigint, values: Array<Option>) : void => {\n        this.#preparedStatements.set(id, values)\n    }\n\n    setLastBody = (buf : Buffer) : void => {\n        this.#lastBody = buf\n    }\n\n    setLastHeader = (buf: Buffer) : void => {\n        this.#lastHeader = buf\n    }\n\n    recreate = (adress : string, port : string) => {\n        this.#websocket.close()\n        this.#websocket = isBrowser ? new WebSocket(\"ws://\" + adress + \":\" + port, \"cql\")\n        : this.#websocket = new WWebSocket(\"ws://\" + adress + \":\" + port, \"cql\")\n        const waitForFlag = async (condition: () => Boolean) => {\n            return new Promise<void>((resolve, reject) => {\n                const interval = setInterval(() => {\n                    if (!condition()) { return };\n                    clearInterval(interval);\n                    resolve();\n                }, 100);\n        \n                setTimeout(() => {\n                    clearInterval(interval);\n                    reject(\"Waited too long for response\");\n                }, 5000);\n            });\n        };\n\n        return waitForFlag(() => this.isWebReady())\n    }\n\n    isWebReady = () => {\n        return this.#websocket.readyState == 0x1\n    }\n\n    getResponse = (buf: Buffer) : [string | Array<Array<string>>, string] => {\n        if (this.#lastBody == Buffer.from(\"\")) {\n            return getQueryResult(this, buf, this.#setKeyspace, this.#addPreparedStatement)\n        } else {\n            this.#lastBody = Buffer.concat([this.#lastBody, buf])\n            if (getLength(this.#lastHeader) <= this.#lastBody.length) {\n                return getQueryResult(this, Buffer.concat([this.#lastHeader, this.#lastBody]), this.#setKeyspace, this.#addPreparedStatement)\n            } else {\n                return [\"Not complete response\",\"\"]\n            }\n        }\n    }\n\n    #checkSend = (ws : any, msg : Uint8Array) => {\n        if (ws.readyState == 1) {\n            ws.send(msg);\n        }\n    }\n\n    connect = (setResponse : any, setTableResponse : any, user: string, passwd : string) : boolean => {\n        let driver = this\n        let ws = this.#websocket\n\n        ws.addEventListener('open', function (event : any) {\n            console.log('Connected to the WS Server!')\n        });\n        // Connection closed\n        ws.addEventListener('close', function (event: any) {\n            console.log('Disconnected from the WS Server!')\n        });\n\n        // Listen for messages\n        const coder = new TextEncoder()\n\n        ws.addEventListener('message', function (event: any) {\n          \n            let received = event.data\n            if (Buffer.isBuffer(event.data)) {\n                received = new Blob([event.data]) \n            }\n\n            //event.data=new Blob(event.data)\n            received.arrayBuffer().then((response: any) => {\n                response = driver.getResponse(Buffer.from(response))\n                if (typeof response[0] == \"string\") {\n                    if (response[1] == \"READY\" || response[1] == \"AUTH_SUCCESS\") {\n                        setResponse([response[0], \"\"])\n                    } else if (response[1] == \"AUTHENTICATE\") {\n                        driver.authenticate(user, passwd)                   \n                    } else {\n                        setResponse(response)\n                    }\n                } else {\n                    setTableResponse(response[0])\n                } \n            })\n        });\n\n        \n        this.#checkSend(ws, (coder.encode(driver.handshake())));\n\n        return true;\n    }\n\n    isReady = () => {\n        return this.#websocket.readyState == 0x1\n    }\n\n    endWebsocket = () => {\n        this.#websocket.close()\n    }\n\n    query = (body : string, pagingState? : Bytes) : void => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"QUERY\"\n        this.#bindValues = []\n        this.#checkSend(this.#websocket, getQueryMessage(this, body, this.#setLastQuery, pagingState));\n    }\n\n    prepare = (body : string) : void => {\n        this.#checkSend(this.#websocket, getPrepareMessage(body))\n    }\n\n    execute = (body : string, bindValues : Array<string>) : void | string => {\n        this.#expectedIndex = 0\n        this.clearPagingStates()\n        this.#lastQueryType = \"EXECUTE\"\n        this.#bindValues = bindValues\n        const result = this.#preparedStatements.get(BigInt(body))\n        if (result == undefined) {\n            return \"Query with id \" + body + \" is not prepared\";\n        }\n       \n        this.#checkSend(this.#websocket, getExecuteMessage(this, body, this.#setLastQuery, this.#bindValues, result));\n    }\n\n    getNextPageQuery = () : void => {\n        const wantedIndex = this.#pagingIndex + 1\n        const queryPage = this.#getQueryPageAt(wantedIndex)\n        if (queryPage != null) {\n            this.#checkSend(this.#websocket, (queryPage))\n        }\n    }\n\n    getNumberOfLoadedPages = () : number => {\n        return this.#pagingStates.length + 1\n    }\n\n    hasPreviousPage = () : boolean => {\n        if (this.getPageNumber() > 0) {\n            return true\n        }\n        return false\n    }\n\n    hasNextPage = () : boolean => {\n        if (this.getPageNumber() < this.#pagingStates.length) {\n            return true\n        }\n        return false\n    }\n\n    getPreviousPageQuery = () : void => {\n        const wantedIndex = this.#pagingIndex - 1\n        const queryPage = this.#getQueryPageAt(wantedIndex)\n        if (queryPage != null) {\n            this.#checkSend(this.#websocket, queryPage)\n        }\n    }\n\n    #getQueryPageAt = (index: number) : Buffer | null => {\n        const [isFirstPage, pagingState] = this.#getPagingState(index)\n        this.#expectedIndex = index\n\n        if (isFirstPage && pagingState == null) {\n            if (this.#lastQueryType == \"EXECUTE\") {\n                const result = this.#preparedStatements.get(BigInt(this.#lastQuery))\n\n                if (result == undefined) {\n                    return null\n                }\n                return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery, this.#bindValues, result);\n            } else {\n                return getQueryMessage(this, this.#lastQuery, this.#setLastQuery);\n            }\n        } else if (pagingState == null) {\n            return null\n        }\n        if (this.#lastQueryType == \"EXECUTE\") {\n            const result = this.#preparedStatements.get(BigInt(this.#lastQuery))\n\n            if (result == undefined) {\n                return null\n            }\n            return getExecuteMessage(this, this.#lastQuery, this.#setLastQuery, this.#bindValues, result, pagingState);\n        } else {\n            return getQueryMessage(this, this.#lastQuery, this.#setLastQuery, pagingState);\n        }\n    }\n\n    getExpectedIndex = () : number => {\n        return this.#expectedIndex\n    }\n\n    getExpectingNewQuery = () : boolean => {\n        return this.#expectingNewQuery\n    }\n\n    setPageNumber = (page: number) : void => {\n        this.#pagingIndex = page\n    }\n\n    setConsistency = (s : string) => {\n        const received = getConsistency(s);\n        if (Buffer.compare(received.consistency.short, numberToShort(BigInt(-1)).short) != 0) {\n            this.#consistency = received;\n            return 0\n        }\n        return -1\n    }\n\n    #setKeyspace = (keyspace : string) => {\n        this.#keyspace = keyspace\n    }\n\n    #setLastQuery = (query : string) : void => {\n        this.#lastQuery = query;\n    }\n\n    getLastQuery = () : string => {\n        return this.#lastQuery\n    }\n\n    getKeyspace = () : string => {\n        return this.#keyspace\n    }\n\n    getConsistencyName = () : string => {\n        return this.#consistency.name\n    }\n\n    getConsistency = () : Consistency => {\n        return this.#consistency\n    }\n\n    #getPagingState = (index: number) :  [boolean, Bytes | null]  => {\n       \n        if (index == 0) {\n            return [true, null]\n        } else if (index < 0 || index - 1 >= this.#pagingStates.length) {\n            return [false, null]\n        }\n\n        return [false, this.#pagingStates[index - 1]]\n    }\n\n    getPageNumber = () : number => {\n        return this.#pagingIndex\n    }\n\n    clearPagingStates = () : void => {\n        this.#pagingStates = []\n    }\n\n    addPagingState = (nextPagingState : Bytes) : void => {\n        this.#pagingStates.push(nextPagingState)\n    }\n\n    setPaging = (mode : string, size? : number) => {\n        if (size) {\n            this.#pageSize = size;\n        }\n        \n        if (mode.toUpperCase() == \"ON\") {\n            this.#pagingEnabled = true\n        } else if (mode.toUpperCase() == \"OFF\") {\n            this.#pagingEnabled = false\n        } \n    }\n\n    getPaging = () : [number, boolean] => {\n        return [this.#pageSize, this.#pagingEnabled]\n    }\n}\n\nexport {CQLDriver}","import setOpcode from \"./setOpcode\";\nimport Frame from \"./FrameTemplate\";\nimport setVersion from \"./setVersion\";\nimport { bufferToString, bufferToBytes, bufferToInt } from \"./conversions\";\nimport setLength from \"./setLength\";\n\nconst getAuthenticationMessage = (username : string, password: string) => {\n    let buffer = Frame();\n\n    setOpcode(buffer, \"AUTH_RESPONSE\");\n    setVersion(buffer, 4);\n\n    console.log(username)\n\n    const usr = Buffer.concat([Buffer.from(username), Buffer.from([0])])\n    const pwd = Buffer.concat([Buffer.from(password), Buffer.from([0])])\n    const len = Buffer.from([0,0,0,0])\n    len.writeInt32LE(usr.length + pwd.length)\n    const body = Buffer.concat([len, usr, pwd])\n\n    if (body != null) {\n        setLength(buffer, BigInt(body.length))\n        buffer = Buffer.concat([buffer, body])\n    } else {\n        setLength(buffer, 4n)\n        buffer = Buffer.concat([buffer, Buffer.from([255, 255, 255, 255])])\n    }\n    console.log(buffer)\n    return buffer;\n}\nexport default getAuthenticationMessage;\n","import {Buffer} from \"buffer\";\n\nconst addStartupBody = (buffer: Buffer) : Buffer => {\n    const body = Buffer.alloc(2);\n    buffer = Buffer.concat([buffer, body], buffer.length + 2);\n    return buffer\n}\n\nexport default addStartupBody;\n\n","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport addStartupBody from \"./addStartupBody\";\nimport setLength from \"./setLength\";\n\nconst getStartupMessage = () : Buffer => {\n    let buffer = Frame();\n    setOpcode(buffer, \"STARTUP\");\n    setVersion(buffer, 4);\n    setLength(buffer, 2n)\n    buffer = addStartupBody(buffer);\n    return buffer;\n}\n\nexport default  getStartupMessage;","import getStartupMessage from \"../utils/getStartupMessage\";\n\n\nconst handshakeMessage = () : string => {\n    return getStartupMessage().toString();\n}\n\nexport default handshakeMessage;","import {Buffer} from \"buffer\";\nimport {numberToInt} from \"./conversions\";\n\nconst addPrepareBody = (buffer: Buffer, prepareBody: Buffer, length : number) : Buffer => {\n    const body = Buffer.alloc(length);\n\n    const prepareSize = numberToInt(BigInt(prepareBody.length));\n    prepareSize.int.copy(body, 0, 0, 4);\n   \n    prepareBody.copy(body, 4, 0, prepareBody.length);\n  \n    buffer = Buffer.concat([buffer, body]);\n    return buffer;\n}\n\nexport default addPrepareBody;","import Frame from \"./FrameTemplate\";\nimport setOpcode from \"./setOpcode\";\nimport setVersion from \"./setVersion\";\nimport {Buffer} from \"buffer\";\nimport setLength from \"./setLength\";\nimport addPrepareBody from \"./addPrepareBody\";\n\nconst getPrepareMessage = (body: string) : Buffer => {\n    let buffer = Frame();\n\n    setOpcode(buffer, \"PREPARE\");\n    setVersion(buffer, 4);\n\n    // Prepare message + long string(int)  \n    const prepareBody = Buffer.from(body, 'utf-8');\n    const length = BigInt(prepareBody.length + 4)\n    setLength(buffer, length)\n    buffer = addPrepareBody(buffer, prepareBody, Number(length))\n    return buffer;\n}\n\n\n\nexport default getPrepareMessage;","export default __webpack_public_path__ + \"static/media/logo.5f473e75.webp\";","import {makeStyles} from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ninterface TerminalHistoryProp {\n  history: string[];\n}\n\nconst TerminalHistory = ({ history } : TerminalHistoryProp) : JSX.Element =>\n{\n    const classes = useStyles();\n    const list = history.map((e, i) => e ?\n        <div key={\"history-upper-\" + i}>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <div className={classes.inputContainer}>{e}</div>\n            </div>\n        </div> :\n        <div className={classes.inputContainer} key={\"history-lower-\" + i}>\n            {'> '}\n        </div>)\n\n    return (\n        <div>\n            <div className={classes.lineContainer}>\n                History\n            </div>\n            {list.slice(-10)}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\n\nexport default TerminalHistory","\nexport const DEFAULT_PAGING_VALUE = 40;\n\nexport const DEFUALT_ADDRESS = \"127.0.0.1\";\n\nexport const DEFAULT_PORT = \"8222\";\n","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DEFUALT_ADDRESS, DEFAULT_PORT} from \"../consts\"\nimport { Oval } from 'react-loading-icons'\n\ninterface LaunchFormProps {\n    adress : string;\n    setAddress : (s : string) => void;\n    port : string;\n    setPort : (s : string) => void;\n    login : string, \n    setLogin : (s : string) => void;\n    password : string;\n    setPassword : (s : string) => void;\n    setFormPassed : (b : boolean) => void;\n    connectUser : () => void;\n\n    reauthorisationMode : boolean;\n    authorise : () => void;\n    loadingMode : boolean;\n    errorMsg : string;\n    setErrorMsg : (s : string) => void;\n}\n\nfunction LaunchForm({adress, setAddress, port, setPort, login, setLogin, password, setPassword, setFormPassed, connectUser, \n    reauthorisationMode, authorise, loadingMode, errorMsg, setErrorMsg} : LaunchFormProps)\n{\n    const classes = useStyles();\n\n    const changeAddress =  (event : React.ChangeEvent<HTMLInputElement>) => {\n        setAddress(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changePort = (event : React.ChangeEvent<HTMLInputElement>)  => {\n        setPort(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changeLogin =  (event : React.ChangeEvent<HTMLInputElement>) => {\n        setLogin(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const changePassword = (event : React.ChangeEvent<HTMLInputElement>)  => {\n        setPassword(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    }\n\n    const submitForm = (e : any) => {\n        e.preventDefault();\n\n        if (adress === \"\")\n            setAddress(DEFUALT_ADDRESS)\n\n        if (port === \"\")\n            setPort(DEFAULT_PORT);\n\n        connectUser();\n        setFormPassed(true);\n    }\n\n    const submitReauthorisation = (e : any) => {\n        e.preventDefault();\n\n        if (login === \"\")\n        {\n            setErrorMsg(\"Username is required!\")\n            return;\n        }\n        \n        if (password == \"\")\n        {\n            setErrorMsg(\"Password is required!\")\n            return;\n        }\n\n        authorise();\n    }\n\n    return <div className={classes.blurredBackground}>\n        {\n        loadingMode ? \n            <div className={classes.content}>\n                <Oval\n                    speed={.85}\n                    strokeWidth={5}\n                    height={\"100px\"}\n                    width={\"60px\"}\n                />\n                Connecting…\n            </div>\n        :\n            <form className={classes.content} onSubmit={reauthorisationMode ? submitReauthorisation : submitForm} >\n\n                {reauthorisationMode ? \"\" :\n                    <div className={classes.element}>\n                        <div>Address:</div>\n                        <input\n                            defaultValue=\"\"\n                            value={adress}\n                            onChange={changeAddress}\n                            placeholder={DEFUALT_ADDRESS}\n                            className={classes.styledInput}\n                        />\n                </div>\n                }\n\n                {reauthorisationMode ? \"\" :\n                    <div className={classes.element}>\n                        <div>Port:</div>\n                        <input\n                            defaultValue=\"\"\n                            value={port}\n                            onChange={changePort}\n                            placeholder={DEFAULT_PORT}\n                            className={classes.styledInput}\n                        />\n                    </div>\n                }\n\n                <div className={classes.element}>\n                    <div>Username:</div>\n                    <input\n                        defaultValue=\"\"\n                        value={login}\n                        onChange={changeLogin}\n                        className={classes.styledInput}\n                    />\n                </div>\n\n                <div className={classes.element}>\n                    <div>Password:</div>\n                    <input\n                        defaultValue=\"\"\n                        value={password}\n                        onChange={changePassword}\n                        type=\"password\"\n                        className={classes.styledInput}\n                    />\n                </div>\n                \n                {errorMsg && <div className={classes.errorDisplayer}>{errorMsg}</div>}\n                <button className={classes.launchPadButton}>\n                    {reauthorisationMode ? \"Authorise\" : \"Connect\"}\n                </button>\n            </form>\n        }\n    </div>\n}\n\nconst useStyles = makeStyles(theme => ({\n    blurredBackground: {\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundSize: \"cover\",\n        backgroundColor: \"#161616\",\n        opacity:\"0.8\",\n    },\n\n    content: {\n        fontSize: \"120%\",\n        backgroundColor: \"#0b0b61\",\n        width: \"fit-content\",\n        margin: \"auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: '30px',\n        padding: \"35px\",\n        borderRadius: \"20px\",\n        paddingBottom: \"20px\",\n    },\n\n    element: {\n        marginBottom: \"10px\",\n    },\n\n    styledInput: {\n        fontSize: \"100%\",\n    },\n\n    launchPadButton: {\n        fontSize: \"100%\",\n        marginTop: \"10px\",\n    },\n\n    errorDisplayer: {\n        fontSize: \"80%\",\n        color: \"#ed4337\",\n    }\n}));\n\nexport default LaunchForm;\n","import React, { forwardRef } from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\ninterface InputProps {\n    value: string;\n    keyspaceName: string;\n    changeValue: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst Input = forwardRef<HTMLTextAreaElement, InputProps>(({value, keyspaceName, changeValue}, ref) => {\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Input: ~/{keyspaceName}{keyspaceName ? \"/\" : \"\"}\n            </div>\n            <div className={classes.lineContainer}>\n                <div className={classes.terminalSign}>\n                    {'>'}\n                </div>\n                <textarea\n                    className={classes.inputContainer}\n                    defaultValue=\"\"\n                    value={value}\n                    onChange={changeValue}\n                    ref={ref}\n                    id=\"inputTextArea\"\n                />\n            </div>\n        </div>\n    );\n});\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        backgroundColor: \"#161616\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n}));\n\nexport default Input;","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { CQLDriver } from \"../CQL-Driver/src/Driver\";\nimport Terminal from \"./Terminal\";\n\ninterface TableProps {\n    driver : CQLDriver;\n    headers: string[]; \n    data: string[][];\n}\n\nfunction TableDisplayer({driver, headers, data} : TableProps)\n{\n    const classes = useStyles();\n\n    const [page, setPageCount] = useState(driver.getPageNumber() + 1);\n    const header = headers.map((ele, i) => {\n        return <th className={classes.cellTh} key = {i}>{ele}</th>\n    })\n\n    let content =data.map((row, rowId) => {\n        return <tr key = {rowId}>\n            {row.map((ele, id) => {\n                return <td className={classes.cellTd} key={id}>{ele}</td>\n            })}\n        </tr>\n    })\n\n    const [back, setDisableOnBack] = React.useState(page == 1);\n    const [next, setDisableOnNext] = React.useState(false);\n    const setDisable = () => {\n        setDisableOnNext(driver.hasNextPage())\n        setDisableOnBack(driver.hasPreviousPage())\n    }\n\n    const onBack = () => {\n       driver.getPreviousPageQuery();\n       setDisable()\n    }\n    \n    const onNext = () => {        \n        driver.getNextPageQuery();\n        setDisable()\n    }\n\n    return (\n        <div className={classes.tableRoller}>\n            <table\n                cellSpacing={\"0\"}\n                className={classes.cellTable} \n            >\n                <thead>\n                    <tr>\n                        {header}\n                    </tr>\n                </thead>\n                <tbody>\n                    {content}\n                </tbody>\n                <tfoot>\n                    <td colSpan={headers.length} className={classes.cellTd} >\n                        <button disabled={back} className={classes.tableButton} onClick={onBack}>\n                            Back\n                        </button>\n                        <label className={classes.tableLabel}>{page}</label>\n                        <button disabled={next} className={classes.tableButton} onClick={onNext}>\n                            Next\n                        </button>\n                    </td>\n                </tfoot>\n            </table>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    cellTable:  {\n        width: \"auto\",\n        height: \"auto\",\n        padding: \"10px\"\n    },\n\n    cellTh:  {\n        border: \"1px solid lightblue;\",\n        padding: \"10px\",\n    },\n\n    cellTd:  {\n        border: \"1px solid lightblue;\",\n        textAlign: \"center\",\n        padding: \"5px\",\n    },\n\n    tableLabel: {\n        padding: \"0 15px\"\n    },\n\n    tableButton: {\n        color: \"#494949\",\n        textTransform: \"uppercase\",\n        textDecoration: \"none\",\n        background: \"#eeeeee\",\n        padding: \"5px\",\n        fontSize: \"15px\",\n        fontWeight: 'bold',\n        borderRadius: \"5px\",\n        border: \"3px solid lightblue\",\n        display: \"inline-block\",\n        transition: \"all 0.4s ease 0s\",\n\n        '&:hover': {\n            color: \"#3a2d55\",\n            background: \"#57d1e5\",\n            borderColor: \"#57d1e5\",\n            transition: \"all 0.4s ease 0s\",\n        },\n\n        '&:hover:active': {\n            background: \"#77e1ff\",\n            borderColor: \"#77e1ff\",\n            boxShadow: \"0px 0px 25px 2px  rgba(77, 225, 255, 0.7)\",\n            transition: \"none\",\n        },\n\n        '&:disabled': {\n            color: \"#666666\",\n            background: \"#aaaaaa\",\n            borderColor: \"#bbbbbb\",\n        },\n\n        '&:disabled:active': {\n            color: \"#666666\",\n            background: \"#aaaaaa\",\n            borderColor: \"#bbbbbb\",\n            boxShadow: \"none\",\n        },\n    },\n\n    tableRoller: {\n        overflowX: 'auto',\n    },\n\n}));\n\nexport default TableDisplayer;\n","import React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TableDisplayer from \"./TableDisplayer\";\n\ninterface ServerResponseProps {\n    driver: any;\n    websocket: any;\n    response: [string, string];\n    setResponse: (s: [string, string]) => void;\n    tableResponse: string[][];\n    setTableResponse: (s: string[][]) => void;\n}\n\nconst ServerResponse = ({driver, websocket, response, setResponse, tableResponse, setTableResponse} : ServerResponseProps) => {\n    const classes = useStyles();\n\n    const errorResponse = (message : string, errorType : string) => \n        <div className={classes.errorStruct}> <span className={classes.errorTag}>{errorType}:</span> {message}</div>;\n\n    return (\n        <div>\n            <hr/>\n            <div className={classes.lineContainer}>\n                Response\n            </div>\n            {tableResponse && tableResponse.length && tableResponse[0] && tableResponse[0].length ?\n                <TableDisplayer\n                    driver = {driver}\n                    headers = {tableResponse[0]}\n                    data = {tableResponse.slice(1)}\n                />\n            :   \n            (<div className={classes.lineContainer}>\n                    <div className={classes.terminalSign}>\n                        {'>'}\n                    </div>\n                    <div className={classes.inputContainer}>\n                        {response[1] ? errorResponse(response[0], response[1]) : response}\n                    </div>\n                </div>)}\n            <hr/>\n        </div>\n    )\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n\n    terminalSign: {\n        width: \"2%\",\n    },\n\n    errorStruct: {\n        color: \"#bb0000\",\n        fontWeight: 700,\n    },\n  \n    errorTag: {\n        color: \"#F44336\",\n        fontWeight: 900,\n    },\n}));\n\n\nexport  default  ServerResponse;\n","import React, {useEffect, useState, useRef} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\nimport LaunchForm from \"./LaunchForm\";\n\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Input from \"./Input\";\nimport ServerResponse from \"./ServerResponse\";\nimport {CQLDriver} from \"../CQL-Driver/src/Driver\";\n\nconst Terminal = () => {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n    const [serverResponse, setServerResponse] = useState<[string, string]>([\"\", \"\"]);\n\n    const wrappedSetServerReponse = (elem : any) => {\n        setServerResponse(elem);\n\n        setLoadingMode(false);\n        setReauthorisationMode(false);\n        if (elem[1] === \"Authentication Error\")\n        {\n            setPanelErrorMsg(\"Authorisation failed!\");\n            setReauthorisationMode(true);\n        }\n    }\n\n    const [tableResponse, setTableResponse] = useState<Array<Array<string>>>([[]]);\n    const [editMode, setEditMode] = useState(false);\n\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n    const webSocket:any = useRef();\n    const [driver, setDriver] = useState(new CQLDriver());\n    const classes = useStyles();\n\n    const [adress, setAddress] = useState<string>(\"localhost\");\n    const [port, setPort] = useState<string>(\"8222\");\n    const [login, setLogin] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [isFormPassed, setFormPassed] = useState(false);\n\n    const [reauthorisationMode, setReauthorisationMode] = useState(false);\n    const [loadingMode, setLoadingMode] = useState(false);\n    const [panelErrorMsg, setPanelErrorMsg] = useState<string>(\"\");\n\n    const changeCommand = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommand(event.target.value.length && event.target.value[0].trim() === '' ? \n            event.target.value.slice(1) : event.target.value);\n    } \n\n    const clearInput = () => {\n        setCommand(\"\");\n\n        if (textAreaRef && textAreaRef.current && textAreaRef.current.selectionStart \n            && textAreaRef.current.selectionEnd)\n        {\n            textAreaRef.current.selectionStart = 0;\n            textAreaRef.current.selectionEnd = 0;\n            textAreaRef.current.setSelectionRange(0, 0)\n            textAreaRef.current.focus();\n        }\n    }\n\n    const sendConnect = (driver : CQLDriver, username : string, password : string) => {\n        driver.connect(wrappedSetServerReponse, setTableResponse, username, password);\n    }\n\n    function sleep(ms : number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const connectUser = async () => {\n        \n        setLoadingMode(true);\n        \n        driver.recreate(adress, port).then(async () => {\n            sendConnect(driver, login, password);\n            setServerResponse([\"\", \"\"])\n            clearInput();\n            setTableResponse([]);\n            await sleep(1500);\n        })\n        .catch((e) => {\n            console.log(e)\n            console.log(\"Could not connect\")\n        })\n\n    }\n\n    const authorise = async () => {\n        \n        setReauthorisationMode(true);\n        setLoadingMode(true);\n        await sleep(1500);\n\n        driver.authenticate(login, password);\n        setLoadingMode(false);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n        let receivedConsistency = window.sessionStorage.getItem('consistency');\n\n        if (typeof receivedConsistency === \"string\") {\n            driver.setConsistency(receivedConsistency)\n        }\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n        window.sessionStorage.setItem('consistency', driver.getConsistencyName())\n    }, [commandHistory, driver]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    const tokenizedCommand = command.split(' ')\n\n                    if (command.toLowerCase().trim() == \"long\")\n                    {\n                        setEditMode(true)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    else if (command.toLowerCase().trim() == \"short\")\n                    {\n                        setEditMode(false)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1)\n                    }\n                    else if (command.toLowerCase().trim() == \"clear\")\n                    {\n                        clearInput();\n                        setServerResponse([\"\", \"\"]);\n                        setPositionInHistory(0);\n                        setCommandHistory([]);\n                        setCommandResult(\"\");\n                        setTableResponse([]);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PAGING\") {\n                        // Rest of arguments are ignored - we can change it for required precise 2 arguemnts\n                        const newPagingMode = tokenizedCommand[1].trim();\n\n                        let newPagingValue\n                        if (tokenizedCommand.length > 2) {\n                            newPagingValue = tokenizedCommand[2].trim();\n                        } else {\n                            newPagingValue = \"\";\n                        }\n                        \n                        if (newPagingMode === \"OFF\")\n                        {\n                            driver.setPaging(\"OFF\")\n                        }\n                        else if (newPagingMode === \"ON\" && newPagingValue === \"\")\n                        {\n                            driver.setPaging(\"ON\")\n                        }\n                        else if (newPagingMode === \"ON\" && parseInt(newPagingValue) > 0)\n                        {\n                            driver.setPaging(\"ON\", parseInt(newPagingValue))\n                        }\n\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        setServerResponse([\"\", \"\"])\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"PREPARE\") {\n\n                        const prepareArg = command.slice(tokenizedCommand[0].length).trim()\n                        // Tu jakies wysłanie tego\n\n\n                        // Tu jakis odbiór\n                        driver.prepare(prepareArg)\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse([\"\",\"\"])\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length > 1 && tokenizedCommand[0] == \"EXECUTE\") {\n                        \n                        const executeArgs : Array<string> = tokenizedCommand.slice(1);\n                        console.log(\"Executing \", executeArgs)\n\n                        // Tu jakies wysłanie tego\n                       \n\n                        // Tu jakis odbiór\n                        driver.execute(executeArgs[0], executeArgs.slice(1))\n                        \n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setServerResponse([\"\", \"\"])\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 1 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse([\"Current consistency level is \" + driver.getConsistency() + \".\", \"\"])\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (tokenizedCommand.length == 2 && tokenizedCommand[0] == \"CONSISTENCY\") {\n                        setServerResponse([driver.setConsistency(tokenizedCommand[1]) == 0 ?\n                            \"Successfully changed consistency level to \" + tokenizedCommand[1] + \".\" :\n                            \"Invalid consistency level\", \"\"])\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    } else if (command && command.length)\n                    {\n                        if (editMode && command.trim().slice(-1) !== ';') // Commands are to end with semicolon\n                            break;\n\n                        setServerResponse([\"\", \"\"])\n                        driver.query(command);\n                        setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                        clearInput();\n                        setTableResponse([]);\n                        setPositionInHistory(commandHistory.length + 1);\n                    }\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length && !editMode) {\n                        event.preventDefault();\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            clearInput();\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0 && !editMode) {\n                        event.preventDefault();\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory, driver]);\n\n    const logo = require(\"../assets/logo.webp\").default;\n\n    return (\n        <div className={classes.terminalContainer}>\n            {(!isFormPassed || reauthorisationMode || loadingMode) && <LaunchForm \n                 adress={adress}\n                 setAddress={setAddress}\n                 port={port}\n                 setPort={setPort}\n                 login={login}\n                 setLogin={setLogin}\n                 password={password}\n                 setPassword={setPassword}\n                 setFormPassed={setFormPassed}\n                 connectUser={connectUser}\n\n                 reauthorisationMode={reauthorisationMode}\n                 authorise={authorise}\n                 loadingMode={loadingMode}\n                 errorMsg={panelErrorMsg}\n                 setErrorMsg={setPanelErrorMsg}\n            />}\n            <img \n                src={logo} \n                style={{\n                    opacity: 0.2,\n                    position: \"absolute\",\n                    right: 0,\n                    bottom: 0,\n                    height: \"52%\",\n                }}\n            />\n            <TerminalHistory\n                history={commandHistory}\n            />\n            <Input \n                value={command} \n                keyspaceName={driver.getKeyspace()} \n                changeValue={changeCommand}\n                ref={textAreaRef}\n            />\n             <ServerResponse\n                websocket={webSocket}\n                response={serverResponse}\n                setResponse={setServerResponse}\n                tableResponse={tableResponse}\n                setTableResponse={setTableResponse}\n                driver={driver}\n            />\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    terminalContainer: {\n        height: \"100%\",\n        width: \"100%\",\n        backgroundColor: \"#161616\",\n        color: \"lightblue\",\n        fontSize: \"24px\",\n    },\n    lineContainer:  {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\"\n    },\n    inputContainer: {\n        width: \"98%\",\n        color: \"lightblue\",\n        outlineWidth: 0,\n        border: \"none\",\n        fontSize: \"24px\",\n    },\n    terminalSign: {\n        width: \"2%\",\n    },\n    line : {\n        marginTop: 0,\n    }\n}));\n\nexport default Terminal;\n","import Terminal from \"./components/Terminal\";\nimport './index.css';\nfunction App() {\n\n    return (\n        <Terminal/>\n    );\n}\n\nexport default App;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}